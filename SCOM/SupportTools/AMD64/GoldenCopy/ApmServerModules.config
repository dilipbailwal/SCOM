<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="userdata" type="System.Configuration.NameValueSectionHandler,system, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, Custom=null" />
  </configSections>
  <userdata>
    <!--  Source aliasing
        You may setup source aliasing in several steps.
        1. Set enabled="true".
        2. Define sources and aliases under rename\add nodes
        3. Define sources which should be kept as is without changes under keep\add. 
           These sources will never be aliased.
           
        Regular expression syntax is allowed for defining source name.
    -->
    <sourceAliasing enabled="true">
      <rename>
        <add key="WindowsApplication1.exe" alias="NotMyWindowsApplicationButAnythingElse.exe" />
        <add key="source name 2" alias="Aliased source2" />
      </rename>
      <keep>
        <add key="source name 3" />
      </keep>
    </sourceAliasing>
    <!-- Temporarily disabled since we don't want to enable async unless shown necessary -->
    <!-- For the time being, Async defaults to zero and savePCounter defaults to zero -->
    <!--<SELogSettings>
      <add key="asyncLevel" value="0"/>
      <add key="savePCounter" value="0"/>
    </SELogSettings>
    -->
    <add key="connectionString" value="Provider=SQLOLEDB;Server=localhost;database=SEViewer;uid=SEViewer;pwd=;" />
    <!-- The wait time before terminating the attempt to execute SQL command and generating an error.
             By default sqlCommandTimeout is equal to 30 sec
        -->
    <add key="sqlCommandTimeout" value="300" />
    <add key="maxQueueSize" value="1000" />
    <add key="concurrentThreadCount" value="1" />
    <add key="eventSessionCountThreshold" value="100" />
    <add key="stateRecordsLimitationAccess" value="500000" />
    <add key="stateRecordsLimitationSQL" value="1000000" />
    <add key="rowsToDeletePerIteration" value="100" />
    <add key="rowsToDeletePerRequest" value="6000" />
    <!-- Problem management settings: -->
    <add key="PMRowsToProcessPerIteration" value="1000" />
    <add key="PMRowsToProcessPerRequest" value="6000" />
    <!-- Failure model constants -->
    <!-- Windows event log sending throttling period  -->
    <add key="eventMessageThrottlingPeriodByMinutes" value="5" />
    <!-- Maintenance time checking interval by minutes. -->
    <!-- Maintenance checking will be executed no more frequently than once every [maintenanceTimeCheckIntervalByMinutes] -->
    <add key="maintenanceTimeCheckIntervalByMinutes" value="30" />
    <!-- Number of last maintenance iterations that will be checked -->
    <add key="maintenanceThresholdIteration" value="3" />
  </userdata>
  <pdb_management>
    <add key="RootPath" value="Database\PDBStorage\" />
  </pdb_management>
  <handlers>
    <!--
      The section specifies information about event handlers
      The section contains preset information 
      and no changes are required to configure the application.
      -->
    <classHandlers eventClass="PMonitorLog" eventClassVersion="4.1" eventClassType="performance">
      <title>.NET Performance Event</title>
      <handler handlerType="EventInfoHandler">
        <assemblyFile>PMonitorHandlerV4,Version=7.0.5000.20, Culture=neutral, PublicKeyToken=31bf3856ad364e35</assemblyFile>
        <class>Avicode.Intercept.SEManager.CustomHandlers.PMonitor.PMonitorHandler</class>
        <settings>
          <add key="HeavyLeafsAmplitude" value="0.1" />
          <add key="RootDuration" value="20" />
        </settings>
      </handler>
    </classHandlers>
    <classHandlers eventClass="PMonitorLog" eventClassVersion="4.2" eventClassType="performance">
      <title>.NET Performance Event</title>
      <handler handlerType="EventInfoHandler">
        <assemblyFile>PMonitorHandlerV4,Version=7.0.5000.20, Culture=neutral, PublicKeyToken=31bf3856ad364e35</assemblyFile>
        <class>Avicode.Intercept.SEManager.CustomHandlers.PMonitor.PMonitorHandlerV42</class>
        <settings>
          <add key="HeavyLeafsAmplitude" value="0.1" />
          <add key="RootDuration" value="20" />
        </settings>
      </handler>
    </classHandlers>
    <classHandlers eventClass="PerfCounterLog" eventClassVersion="1.0" eventClassType="perfcounter">
      <title>Performance Counter</title>
      <handler handlerType="EventInfoHandler">
        <assemblyFile>PCounterHandlerV3.5,Version=7.0.5000.20, Culture=neutral, PublicKeyToken=31bf3856ad364e35</assemblyFile>
        <class>Avicode.Intercept.SEManager.CustomHandlers.PCounter.PCounterHandler</class>
        <settings>
          <add key="SpeedToNumber" value="\Apps\Monitored Requests/sec|\Apps\Performance Events/sec|\Apps\Exception Events/sec" />
        </settings>
      </handler>
    </classHandlers>
    <classHandlers eventClass="CLRXMonitorLog" eventClassVersion="4.1" eventClassType="exception">
      <title>.NET Exception Event</title>
      <handler handlerType="EventInfoHandler">
        <assemblyFile>CLRXMonitorHandlerV4,Version=7.0.5000.20, Culture=neutral, PublicKeyToken=31bf3856ad364e35</assemblyFile>
        <class>Avicode.Intercept.SEManager.CustomHandlers.CLRXMonitor.CLRXMonitorHandler</class>
        <settings>
          <!--add key="VisibleNamespaces" value="System;Microsoft" /-->
        </settings>
      </handler>
    </classHandlers>
    <classHandlers eventClass="CSMPMonitorLog" eventClassVersion="5.6" eventClassType="performance">
      <title>Client Side Performance Event</title>
      <handler handlerType="EventInfoHandler">
        <assemblyFile>CSMPMonitorHandlerV5.6,Version=7.0.5000.20, Culture=neutral, PublicKeyToken=31bf3856ad364e35</assemblyFile>
        <class>Avicode.Intercept.SEManager.CustomHandlers.CSMPMonitor.CSMPMonitorHandler</class>
        <settings>
          <add key="HeavyLeafsAmplitude" value="0.3" />
        </settings>
      </handler>
    </classHandlers>
    <classHandlers eventClass="CSMXMonitorLog" eventClassVersion="5.6" eventClassType="exception">
      <title>Client Side Exception Event</title>
      <handler handlerType="EventInfoHandler">
        <assemblyFile>CSMXMonitorHandlerV5,Version=7.0.5000.20, Culture=neutral, PublicKeyToken=31bf3856ad364e35</assemblyFile>
        <class>Avicode.Intercept.SEManager.CustomHandlers.CSMXMonitor.CSMXMonitorHandler</class>
        <settings>
        </settings>
      </handler>
    </classHandlers>
    <classHandlers eventClass="CSMAMonitorLog" eventClassVersion="5.6" eventClassType="performance">
      <title>Client Side Ajax Performance Event</title>
      <handler handlerType="EventInfoHandler">
        <assemblyFile>CSMAMonitorHandlerV5.6,Version=7.0.5000.20, Culture=neutral, PublicKeyToken=31bf3856ad364e35</assemblyFile>
        <class>Avicode.Intercept.SEManager.CustomHandlers.CSMAMonitor.CSMAMonitorHandler</class>
        <settings>
          <add key="HeavyLeafsAmplitude" value="0.3" />
        </settings>
      </handler>
    </classHandlers>
    <classHandlers eventClass="CSMSMonitorLog" eventClassVersion="5.6" eventClassType="performance">
      <title>Client Side Action Performance Event</title>
      <handler handlerType="EventInfoHandler">
        <assemblyFile>CSMSMonitorHandlerV5.6,Version=7.0.5000.20, Culture=neutral, PublicKeyToken=31bf3856ad364e35</assemblyFile>
        <class>Avicode.Intercept.SEManager.CustomHandlers.CSMSMonitor.CSMSMonitorHandler</class>
        <settings>
          <add key="HeavyLeafsAmplitude" value="0.3" />
        </settings>
      </handler>
    </classHandlers>
  </handlers>
  <avicode.ax5Base.errorLog>
    <output>
      <log type="fileLog" enable="false">
        <settings>
          <add key="path" value="Logs\Error.Log" />
        </settings>
      </log>
      <log type="windowsEventLog" enable="false">
        <settings>
          <add key="sourceName" value="SEManager" />
        </settings>
      </log>
    </output>
  </avicode.ax5Base.errorLog>
  <avicode.ax5Base.performance>
    <thresholds major="0" minor="0">
    </thresholds>
    <output>
      <log type="fileLog" enable="false">
        <settings>
          <add key="path" value="Logs\Performance.Log" />
        </settings>
      </log>
    </output>
  </avicode.ax5Base.performance>
  <defaultSettings>
    <add type="DBVersion" value="5.7" />
    <add type="Schema_Version" value="1" />
    <add type="PDBStorageMaxSize" value="1024" />
    <add type="managementServer" value="localhost" />
  </defaultSettings>
  <problemManagement>
    <variables>
      <variable name="Intercept.Variable.EventClassType" valuetype="Intercept.ValueType.StringEnum" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.EventClassTypeVar">
        <properties>
          <add name="SQLAlias" value="EVENT.EVENTCLASSTYPE" />
          <add name="EventType" value="All" />
          <add name="EventContext" value="All" />
          <add name="DefaultCondition" value="Intercept.Condition.StringEnumInLike" />
          <add name="Description" value="Event Type" />
          <add name="Designer" value="StringEnumDesigner.ascx" />
        </properties>
        <dataProviders>
          <dataProvider contextName="SELog" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.EventClassTypeSELogDP" />
          <dataProvider contextName="PMRuleWizard" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.EventClassTypeWizardDP" />
          <dataProvider contextName="SQL" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.DataProvider.SQLDataProvider" />
        </dataProviders>
      </variable>
      <variable name="Intercept.Variable.Source" valuetype="Intercept.ValueType.StringEnum" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.SourceVar">
        <properties>
          <add name="SQLAlias" value="EVENT.SOURCE" />
          <add name="EventType" value="All" />
          <add name="EventContext" value="All" />
          <add name="DefaultCondition" value="Intercept.Condition.StringEnumInLike" />
          <add name="Description" value="Source" />
          <add name="Designer" value="StringEnumEditableDesigner.ascx" />
        </properties>
        <dataProviders>
          <dataProvider contextName="SELog" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.SourceSELogDP" />
          <dataProvider contextName="PMRuleWizard" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.SourceWizardDP" />
          <dataProvider contextName="SQL" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.DataProvider.SQLDataProvider" />
        </dataProviders>
      </variable>
      <variable name="Intercept.Variable.Computer" valuetype="Intercept.ValueType.StringEnum" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.ComputerVar">
        <properties>
          <add name="SQLAlias" value="EVENT.MACHINENAME" />
          <add name="EventType" value="All" />
          <add name="EventContext" value="All" />
          <add name="DefaultCondition" value="Intercept.Condition.StringEnumInLike" />
          <add name="Description" value="Computer" />
          <add name="Designer" value="ComputerDesigner.ascx" />
        </properties>
        <dataProviders>
          <dataProvider contextName="SELog" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.ComputerSELogDP" />
          <dataProvider contextName="PMRuleWizard" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.ComputerWizardDP" />
          <dataProvider contextName="SQL" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.DataProvider.SQLDataProvider" />
        </dataProviders>
      </variable>
      <variable name="Intercept.Variable.Action" valuetype="Intercept.ValueType.String" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.ActionVar">
        <properties>
          <add name="SQLAlias" value="EVENT.ROOTNODENAME" />
          <add name="EventType" value="All" />
          <add name="EventContext" value="All" />
          <add name="DefaultCondition" value="Intercept.Condition.StringLike" />
          <add name="Description" value="Action" />
          <add name="Designer" value="DefaultConditionDesigner.ascx" />
        </properties>
        <dataProviders>
          <dataProvider contextName="SELog" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.ActionSELogDP" />
          <dataProvider contextName="PMRuleWizard" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.ActionWizardDP" />
          <dataProvider contextName="SQL" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.DataProvider.SQLDataProvider" />
        </dataProviders>
      </variable>
      <variable name="Intercept.Variable.Request" valuetype="Intercept.ValueType.String" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.ActionVar">
        <properties>
          <add name="SQLAlias" value="EVENT.ROOTNODENAME" />
          <add name="EventType" value="All" />
          <add name="EventContext" value="All" />
          <add name="DefaultCondition" value="Intercept.Condition.StringLike" />
          <add name="Description" value="Request" />
          <add name="Designer" value="DefaultConditionDesigner.ascx" />
        </properties>
        <dataProviders>
          <dataProvider contextName="SELog" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.ActionSELogDP" />
          <dataProvider contextName="PMRuleWizard" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.ActionWizardDP" />
          <dataProvider contextName="SQL" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.DataProvider.SQLDataProvider" />
        </dataProviders>
      </variable>
      <variable name="Intercept.Variable.HeaviestNode" valuetype="Intercept.ValueType.String" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.HeaviestNodeVar">
        <properties>
          <add name="SQLAlias" value="EVENT.HEAVIESTNODE" />
          <add name="EventType" value="Performance" />
          <add name="EventContext" value="All" />
          <add name="DefaultCondition" value="Intercept.Condition.StringLike" />
          <add name="Description" value="Slow Call" />
          <add name="Designer" value="DefaultConditionDesigner.ascx" />
        </properties>
        <dataProviders>
          <dataProvider contextName="SELog" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.HeaviestNodeSELogDP" />
          <dataProvider contextName="PMRuleWizard" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.HeaviestNodeWizardDP" />
          <dataProvider contextName="SQL" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.DataProvider.PerformanceSQLProvider" />
        </dataProviders>
        <dependencies>
          <vDependency type="forbidden" variable="Intercept.Variable.Category" />
          <vDependency type="forbidden" variable="Intercept.Variable.FailedFunction" />
          <vDependency type="forbidden" variable="Intercept.Variable.ExceptionClass" />
          <vDependency type="forbidden" variable="Intercept.Variable.CallStackHash" />
          <vDependency type="requiredIfExist" variable="Intercept.Variable.EventClassType" value="performance" />
        </dependencies>
      </variable>
      <variable name="Intercept.Variable.HeaviestExternalResource" valuetype="Intercept.ValueType.String" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.HeaviestExternalResourceVar">
        <properties>
          <add name="SQLAlias" value="EVENT.HEAVIESTEXTERNALRESOURCE" />
          <add name="EventType" value="All" />
          <add name="EventContext" value="All" />
          <add name="DefaultCondition" value="Intercept.Condition.StringLike" />
          <add name="Description" value="Resource Call" />
          <add name="Designer" value="DefaultConditionDesigner.ascx" />
        </properties>
        <dataProviders>
          <dataProvider contextName="SELog" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.HeaviestExternalResourceSELogDP" />
          <dataProvider contextName="PMRuleWizard" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.HeaviestExternalResourceWizardDP" />
          <dataProvider contextName="SQL" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.DataProvider.SQLDataProvider" />
        </dataProviders>
      </variable>
      <variable name="Intercept.Variable.FailedFunction" valuetype="Intercept.ValueType.String" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.FailedFunctionVar">
        <properties>
          <add name="SQLAlias" value="EVENT.ROOTFUNCTION" />
          <add name="EventType" value="Exception" />
          <add name="EventContext" value="All" />
          <add name="DefaultCondition" value="Intercept.Condition.StringLike" />
          <add name="Description" value="Failed Function" />
          <add name="Designer" value="DefaultConditionDesigner.ascx" />
        </properties>
        <dataProviders>
          <dataProvider contextName="SELog" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.FailedFunctionSELogDP" />
          <dataProvider contextName="PMRuleWizard" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.FailedFunctionWizardDP" />
          <dataProvider contextName="SQL" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.DataProvider.ExceptionSQLProvider" />
        </dataProviders>
        <dependencies>
          <vDependency type="forbidden" variable="Intercept.Variable.HeaviestNode" />
          <vDependency type="forbidden" variable="Intercept.Variable.Duration" />
          <vDependency type="forbidden" variable="Intercept.Variable.SlowCallDuration" />
          <vDependency type="forbidden" variable="Intercept.Variable.HeavyLightStatus" />
          <vDependency type="requiredIfExist" variable="Intercept.Variable.EventClassType" value="exception" />
        </dependencies>
      </variable>
      <variable name="Intercept.Variable.Description" valuetype="Intercept.ValueType.String" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.DescriptionVar">
        <properties>
          <add name="SQLAlias" value="EVENT.DESCRIPTION" />
          <add name="EventType" value="All" />
          <add name="EventContext" value="All" />
          <add name="DefaultCondition" value="Intercept.Condition.StringLike" />
          <add name="Description" value="Description" />
          <add name="Designer" value="DefaultConditionDesigner.ascx" />
        </properties>
        <dataProviders>
          <dataProvider contextName="SELog" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.DescriptionSELogDP" />
          <dataProvider contextName="PMRuleWizard" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.DescriptionWizardDP" />
          <dataProvider contextName="SQL" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.DataProvider.SQLDataProvider" />
        </dataProviders>
      </variable>
      <variable name="Intercept.Variable.Component" valuetype="Intercept.ValueType.String" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.ComponentVar">
        <properties>
          <add name="SQLAlias" value="EVENT.COMPONENT" />
          <add name="EventType" value="All" />
          <add name="EventContext" value="All" />
          <add name="DefaultCondition" value="Intercept.Condition.StringLike" />
          <add name="Description" value="Component" />
          <add name="Designer" value="DefaultConditionDesigner.ascx" />
        </properties>
        <dataProviders>
          <dataProvider contextName="SELog" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.ComponentSELogDP" />
          <dataProvider contextName="PMRuleWizard" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.ComponentWizardDP" />
          <dataProvider contextName="SQL" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.DataProvider.SQLDataProvider" />
        </dataProviders>
      </variable>
      <variable name="Intercept.Variable.UserName" valuetype="Intercept.ValueType.String" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.UserNameVar">
        <properties>
          <add name="SQLAlias" value="EVENT.USERNAME" />
          <add name="EventType" value="All" />
          <add name="EventContext" value="All" />
          <add name="DefaultCondition" value="Intercept.Condition.StringLike" />
          <add name="Description" value="User" />
          <add name="Designer" value="DefaultConditionDesigner.ascx" />
        </properties>
        <dataProviders>
          <dataProvider contextName="SELog" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.UserNameSELogDP" />
          <dataProvider contextName="PMRuleWizard" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.UserNameWizardDP" />
          <dataProvider contextName="SQL" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.DataProvider.SQLDataProvider" />
        </dataProviders>
      </variable>
      <variable name="Intercept.Variable.ExceptionClass" valuetype="Intercept.ValueType.String" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.ExceptionClassVar">
        <properties>
          <add name="SQLAlias" value="EVENT.EXCEPTIONCLASS" />
          <add name="EventType" value="Exception" />
          <add name="EventContext" value="All" />
          <add name="DefaultCondition" value="Intercept.Condition.StringLike" />
          <add name="Description" value="Exception Class" />
          <add name="Designer" value="DefaultConditionDesigner.ascx" />
        </properties>
        <dataProviders>
          <dataProvider contextName="SELog" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.ExceptionClassSELogDP" />
          <dataProvider contextName="PMRuleWizard" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.ExceptionClassWizardDP" />
          <dataProvider contextName="SQL" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.DataProvider.ExceptionSQLProvider" />
        </dataProviders>
        <dependencies>
          <vDependency type="forbidden" variable="Intercept.Variable.HeaviestNode" />
          <vDependency type="forbidden" variable="Intercept.Variable.Duration" />
          <vDependency type="forbidden" variable="Intercept.Variable.SlowCallDuration" />
          <vDependency type="forbidden" variable="Intercept.Variable.HeavyLightStatus" />
          <vDependency type="requiredIfExist" variable="Intercept.Variable.EventClassType" value="exception" />
        </dependencies>
      </variable>
      <variable name="Intercept.Variable.Duration" valuetype="Intercept.ValueType.Integer" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.DurationVar">
        <properties>
          <add name="SQLAlias" value="EVENT.EVENTDURATION" />
          <add name="EventType" value="Performance" />
          <add name="EventContext" value="All" />
          <add name="DefaultCondition" value="Intercept.Condition.LongGreater" />
          <add name="Description" value="Event Duration (ms)" />
          <add name="Designer" value="DurationDesigner.ascx" />
        </properties>
        <dataProviders>
          <dataProvider contextName="SELog" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.DurationSELogDP" />
          <dataProvider contextName="PMRuleWizard" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.DurationWizardDP" />
          <dataProvider contextName="SQL" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.DurationSQLDP" />
        </dataProviders>
        <dependencies>
          <vDependency type="forbidden" variable="Intercept.Variable.Category" />
          <vDependency type="forbidden" variable="Intercept.Variable.FailedFunction" />
          <vDependency type="forbidden" variable="Intercept.Variable.ExceptionClass" />
          <vDependency type="forbidden" variable="Intercept.Variable.CallStackHash" />
          <vDependency type="requiredIfExist" variable="Intercept.Variable.EventClassType" value="performance" />
        </dependencies>
      </variable>
      <variable name="Intercept.Variable.SlowCallDuration" valuetype="Intercept.ValueType.Integer" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.SlowCallDurationVar">
        <properties>
          <add name="SQLAlias" value="EVENT.SLOWCALLDURATION" />
          <add name="EventType" value="Performance" />
          <add name="EventContext" value="All" />
          <add name="DefaultCondition" value="Intercept.Condition.LongGreater" />
          <add name="Description" value="Slow Call Duration (ms)" />
          <add name="Designer" value="DurationDesigner.ascx" />
        </properties>
        <dataProviders>
          <dataProvider contextName="SELog" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.SlowCallDurationSELogDP" />
          <dataProvider contextName="PMRuleWizard" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.SlowCallDurationWizardDP" />
          <dataProvider contextName="SQL" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.DataProvider.PerformanceSQLProvider" />
        </dataProviders>
        <dependencies>
          <vDependency type="forbidden" variable="Intercept.Variable.Category" />
          <vDependency type="forbidden" variable="Intercept.Variable.FailedFunction" />
          <vDependency type="forbidden" variable="Intercept.Variable.ExceptionClass" />
          <vDependency type="forbidden" variable="Intercept.Variable.CallStackHash" />
          <vDependency type="requiredIfExist" variable="Intercept.Variable.EventClassType" value="performance" />
        </dependencies>
      </variable>
      <variable name="Intercept.Variable.EventID" valuetype="Intercept.ValueType.IntegerEnum" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.EventIDVar">
        <properties>
          <add name="SQLAlias" value="EVENT.EVENTID" />
          <add name="EventType" value="All" />
          <add name="EventContext" value="All" />
          <add name="DefaultCondition" value="Intercept.Condition.IntegerIn" />
          <add name="Description" value="Event ID" />
          <add name="Designer" value="IntegerConditionDesigner.ascx" />
        </properties>
        <dataProviders>
          <dataProvider contextName="SELog" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.EventIDSELogDP" />
          <dataProvider contextName="PMRuleWizard" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.EventIDWizardDP" />
          <dataProvider contextName="SQL" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.DataProvider.SQLDataProvider" />
        </dataProviders>
      </variable>
      <variable name="Intercept.Variable.EventGroupID" valuetype="Intercept.ValueType.IntegerEnum" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.EventGroupIDVar">
        <properties>
          <add name="SQLAlias" value="EVENT.EVENTGROUPID" />
          <add name="EventType" value="All" />
          <add name="EventContext" value="All" />
          <add name="DefaultCondition" value="Intercept.Condition.IntegerIn" />
          <add name="Description" value="EventGroup ID" />
          <add name="Designer" value="IntegerConditionDesigner.ascx" />
        </properties>
        <dataProviders>
          <dataProvider contextName="SELog" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.EventGroupIDSELogDP" />
          <dataProvider contextName="PMRuleWizard" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.EventGroupIDWizardDP" />
          <dataProvider contextName="SQL" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.DataProvider.SQLDataProvider" />
        </dataProviders>
      </variable>
      <variable name="Intercept.Variable.HeavyLightStatus" valuetype="Intercept.ValueType.IntegerEnum" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.HeavyLightStatusVar">
        <properties>
          <add name="SQLAlias" value="EVENT.HEAVYLIGHT" />
          <add name="EventType" value="Performance" />
          <add name="EventContext" value="All" />
          <add name="DefaultCondition" value="Intercept.Condition.IntegerIn" />
          <add name="Description" value="Heavy / Light Status" />
          <add name="Designer" value="HeavyLightStatusDesigner.ascx" />
        </properties>
        <dataProviders>
          <dataProvider contextName="SELog" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.HeavyLightStatusSELogDP" />
          <dataProvider contextName="PMRuleWizard" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.HeavyLightStatusWizardDP" />
          <dataProvider contextName="SQL" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.DataProvider.PerformanceSQLProvider" />
        </dataProviders>
        <dependencies>
          <vDependency type="forbidden" variable="Intercept.Variable.Category" />
          <vDependency type="forbidden" variable="Intercept.Variable.FailedFunction" />
          <vDependency type="forbidden" variable="Intercept.Variable.ExceptionClass" />
          <vDependency type="forbidden" variable="Intercept.Variable.CallStackHash" />
          <vDependency type="requiredIfExist" variable="Intercept.Variable.EventClassType" value="performance" />
        </dependencies>
      </variable>
      <variable name="Intercept.Variable.Aspect" valuetype="Intercept.ValueType.StringEnum" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.AspectVar">
        <properties>
          <add name="SQLAlias" value="EVENT.ASPECT" />
          <add name="EventType" value="All" />
          <add name="EventContext" value="All" />
          <add name="DefaultCondition" value="Intercept.Condition.StringEnumInLike" />
          <add name="Description" value="Aspect" />
          <add name="Designer" value="AspectDesigner.ascx" />
        </properties>
        <dataProviders>
          <dataProvider contextName="SELog" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.AspectSELogDP" />
          <dataProvider contextName="PMRuleWizard" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.AspectWizardDP" />
          <dataProvider contextName="SQL" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.DataProvider.SQLDataProvider" />
        </dataProviders>
      </variable>
      <variable name="Intercept.Variable.Category" valuetype="Intercept.ValueType.ConstantString" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.CategoryVar">
        <properties>
          <add name="SQLAlias" value="EVENT.CATEGORY" />
          <add name="EventType" value="Exception" />
          <add name="EventContext" value="All" />
          <add name="DefaultCondition" value="Intercept.Condition.StringEqual" />
          <add name="Description" value="Critical exception" />
          <add name="Designer" value="CategoryDesigner.ascx" />
        </properties>
        <dataProviders>
          <dataProvider contextName="SELog" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.CategorySELogDP" />
          <dataProvider contextName="PMRuleWizard" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.CategoryWizardDP" />
          <dataProvider contextName="SQL" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.DataProvider.SQLDataProvider" />
        </dataProviders>
        <dependencies>
          <vDependency type="forbidden" variable="Intercept.Variable.HeaviestNode" />
          <vDependency type="forbidden" variable="Intercept.Variable.Duration" />
          <vDependency type="forbidden" variable="Intercept.Variable.SlowCallDuration" />
          <vDependency type="forbidden" variable="Intercept.Variable.HeavyLightStatus" />
          <vDependency type="requiredIfExist" variable="Intercept.Variable.EventClassType" value="exception" />
        </dependencies>
      </variable>
      <variable name="Intercept.Variable.ApplicationGroupID" valuetype="Intercept.ValueType.SimpleIntegerEnum" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.ApplicationGroupIDVar">
        <properties>
          <add name="SQLAlias" value="EVENT.CUSTOM" />
          <add name="EventType" value="All" />
          <add name="EventContext" value="All" />
          <add name="DefaultCondition" value="Intercept.Condition.IntegerIn" />
          <add name="Description" value="Application Group" />
          <add name="Designer" value="ApplicationGroupDesigner.ascx" />
        </properties>
        <dataProviders>
          <dataProvider contextName="SELog" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.ApplicationGroupIDSELogDP" />
          <dataProvider contextName="PMRuleWizard" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.ApplicationGroupIDWizardDP" />
          <dataProvider contextName="SQL" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.ApplicationGroupIDSQLDP" />
        </dataProviders>
      </variable>
      <variable name="Intercept.Variable.Body" valuetype="Intercept.ValueType.Xml" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.BodyVar">
        <properties>
          <add name="EventType" value="All" />
          <add name="EventContext" value="All" />
          <add name="DefaultCondition" value="Intercept.Condition.XPathExists" />
          <add name="Description" value="Event Data" />
          <add name="Designer" value="DefaultConditionDesigner.ascx" />
          <add name="Hint" value="Please specify the XPath expression that should be used in search" />
        </properties>
        <dataProviders>
          <dataProvider contextName="SELog" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.BodySELogDP" />
          <dataProvider contextName="PMRuleWizard" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.BodyWizardDP" />
          <dataProvider contextName="SQL" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.DataProvider.SQLDataProvider" />
        </dataProviders>
      </variable>
      <variable name="Intercept.Variable.CallStackHash" valuetype="Intercept.ValueType.UniqueHash" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.CallStackHashVar">
        <properties>
          <add name="EventType" value="Exception" />
          <add name="EventContext" value="Current" />
          <add name="DefaultCondition" value="Intercept.Condition.StringEqual" />
          <add name="Description" value="With the same call stack" />
          <add name="Designer" value="CallStackHashDesigner.ascx" />
        </properties>
        <dataProviders>
          <dataProvider contextName="SELog" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.CallStackHashSELogDP" />
          <dataProvider contextName="PMRuleWizard" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.CallStackHashWizardDP" />
          <dataProvider contextName="SQL" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Variable.DataProvider.ExceptionSQLProvider" />
        </dataProviders>
        <dependencies>
          <vDependency type="forbidden" variable="Intercept.Variable.HeaviestNode" />
          <vDependency type="forbidden" variable="Intercept.Variable.Duration" />
          <vDependency type="forbidden" variable="Intercept.Variable.SlowCallDuration" />
          <vDependency type="forbidden" variable="Intercept.Variable.HeavyLightStatus" />
          <vDependency type="requiredIfExist" variable="Intercept.Variable.EventClassType" value="exception" />
        </dependencies>
      </variable>
    </variables>
    <conditions>
      <condition name="Intercept.Condition.StringEqual" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Condition.StringEqualCondition">
        <properties>
          <add name="SQLOperation" value="=" />
          <add name="Description" value="=" />
          <add name="IgnoreCase" value="true" />
        </properties>
      </condition>
      <condition name="Intercept.Condition.StringNotEqual" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Condition.StringNotEqualCondition">
        <properties>
          <add name="SQLOperation" value="&lt;&gt;" />
          <add name="Description" value="!=" />
          <add name="IgnoreCase" value="true" />
        </properties>
      </condition>
      <condition name="Intercept.Condition.StringLike" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Condition.StringLikeCondition">
        <properties>
          <add name="SQLOperation" value="LIKE" />
          <add name="Description" value="like" />
          <add name="IgnoreCase" value="true" />
          <add name="SupportWildcards" value="true" />
        </properties>
      </condition>
      <condition name="Intercept.Condition.StringNotLike" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Condition.StringNotLikeCondition">
        <properties>
          <add name="SQLOperation" value="NOT LIKE" />
          <add name="Description" value="not like" />
          <add name="IgnoreCase" value="true" />
          <add name="SupportWildcards" value="true" />
        </properties>
      </condition>
      <condition name="Intercept.Condition.StringEnumInLike" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Condition.StringEnumInLikeCondition">
        <properties>
          <add name="SQLOperation" value="IN" />
          <add name="Description" value="in" />
          <add name="SupportWildcards" value="true" />
          <add name="MultiValued" value="true" />
          <add name="IgnoreCase" value="true" />
        </properties>
      </condition>
      <condition name="Intercept.Condition.StringEnumNotInLike" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Condition.StringEnumNotInLikeCondition">
        <properties>
          <add name="SQLOperation" value="NOT IN" />
          <add name="Description" value="not in" />
          <add name="SupportWildcards" value="true" />
          <add name="MultiValued" value="true" />
          <add name="IgnoreCase" value="true" />
        </properties>
      </condition>
      <condition name="Intercept.Condition.LongEqual" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Condition.NumericEqualCondition`1[[System.Int64,mscorlib]]">
        <properties>
          <add name="SQLOperation" value="=" />
          <add name="Description" value="=" />
        </properties>
      </condition>
      <condition name="Intercept.Condition.LongNotEqual" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Condition.NumericNotEqualCondition`1[[System.Int64,mscorlib]]">
        <properties>
          <add name="SQLOperation" value="&lt;&gt;" />
          <add name="Description" value="!=" />
        </properties>
      </condition>
      <condition name="Intercept.Condition.LongGreater" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Condition.NumericGreaterCondition`1[[System.Int64,mscorlib]]">
        <properties>
          <add name="SQLOperation" value="&gt;" />
          <add name="Description" value="&gt;" />
        </properties>
      </condition>
      <condition name="Intercept.Condition.LongLess" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Condition.NumericLessCondition`1[[System.Int64,mscorlib]]">
        <properties>
          <add name="SQLOperation" value="&lt;" />
          <add name="Description" value="&lt;" />
        </properties>
      </condition>
      <condition name="Intercept.Condition.IntegerIn" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Condition.NumericInCondition`1[[System.Int32,mscorlib]]">
        <properties>
          <add name="SQLOperation" value="IN" />
          <add name="Description" value="in" />
          <add name="MultiValued" value="true" />
        </properties>
      </condition>
      <condition name="Intercept.Condition.IntegerNotIn" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Condition.NumericNotInCondition`1[[System.Int32,mscorlib]]">
        <properties>
          <add name="SQLOperation" value="NOT IN" />
          <add name="Description" value="not in" />
          <add name="MultiValued" value="true" />
        </properties>
      </condition>
      <condition name="Intercept.Condition.XPathExists" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Condition.XPathExistsCondition">
        <properties>
          <add name="Description" value="contains" />
        </properties>
      </condition>
      <condition name="Intercept.Condition.XPathNotExists" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Condition.XPathNotExistsCondition">
        <properties>
          <add name="Description" value="not contains" />
        </properties>
      </condition>
      <!-- for test puprposes-->
      <condition name="Intercept.Condition.WithWrongClass" class="AVIcode.Intercept.SEViewer.Core.ProblemManagement.Condition.NotExistedClass">
      </condition>
    </conditions>
    <valueTypes>
      <valueType name="Intercept.ValueType.StringEnum" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.ValueType.PMValueType">
        <conditions>
          <condition name="Intercept.Condition.StringEnumInLike" />
          <condition name="Intercept.Condition.StringEnumNotInLike" />
        </conditions>
      </valueType>
      <valueType name="Intercept.ValueType.String" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.ValueType.PMValueType">
        <conditions>
          <condition name="Intercept.Condition.StringLike" />
          <condition name="Intercept.Condition.StringNotLike" />
        </conditions>
      </valueType>
      <valueType name="Intercept.ValueType.ConstantString" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.ValueType.PMValueType">
        <conditions>
          <condition name="Intercept.Condition.StringEqual" />
        </conditions>
      </valueType>
      <valueType name="Intercept.ValueType.Integer" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.ValueType.PMValueType">
        <conditions>
          <condition name="Intercept.Condition.LongEqual" />
          <condition name="Intercept.Condition.LongNotEqual" />
          <condition name="Intercept.Condition.LongGreater" />
          <condition name="Intercept.Condition.LongLess" />
        </conditions>
      </valueType>
      <valueType name="Intercept.ValueType.IntegerEnum" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.ValueType.PMValueType">
        <conditions>
          <condition name="Intercept.Condition.IntegerIn" />
          <condition name="Intercept.Condition.IntegerNotIn" />
        </conditions>
      </valueType>
      <valueType name="Intercept.ValueType.SimpleIntegerEnum" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.ValueType.PMValueType">
        <conditions>
          <condition name="Intercept.Condition.IntegerIn" />
        </conditions>
      </valueType>
      <valueType name="Intercept.ValueType.Xml" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.ValueType.PMValueType">
        <conditions>
          <condition name="Intercept.Condition.XPathExists" />
          <condition name="Intercept.Condition.XPathNotExists" />
        </conditions>
      </valueType>
      <valueType name="Intercept.ValueType.UniqueHash" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.ValueType.PMValueType">
        <conditions>
          <condition name="Intercept.Condition.StringEqual" />
        </conditions>
      </valueType>
    </valueTypes>
    <actionTypes>
      <actionType name="Intercept.ActionType.ChangeStatus" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.ActionType.ChangeStatusAction">
        <properties>
          <add name="SQLAlias" value="EVENT.PMSTATUS" />
          <add name="Description" value="Change Event Status" />
          <add name="Designer" value="EventStatusActionDesigner.ascx" />
        </properties>
        <executors>
          <executor contextName="SQL" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.ActionType.Executor.SimpleSQLExecutor" />
          <executor contextName="SELog" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.ActionType.ChangeStatusSELogExecutor" />
        </executors>
      </actionType>
    </actionTypes>
    <templates>
      <template name="Intercept.Template.DeletedForLightEvents" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Template.PMTemplate">
        <properties>
          <add name="Description" value="Set Status 'Deleted' for Light events" />
          <add name="EventType" value="Performance" />
          <add name="EventContext" value="All" />
        </properties>
        <expressions>
          <expression variable="Intercept.Variable.Source" condition="Intercept.Condition.StringEnumInLike" />
          <expression variable="Intercept.Variable.HeavyLightStatus" condition="Intercept.Condition.IntegerIn" valuetypename="System.Collections.Generic.List`1[[System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]">
            <ArrayOfInt xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
              <int>0</int>
            </ArrayOfInt>
          </expression>
        </expressions>
        <actions>
          <action actiontype="Intercept.ActionType.ChangeStatus" valuetypename="System.Byte">
            <unsignedByte>2</unsignedByte>
          </action>
        </actions>
      </template>
      <template name="Intercept.Template.DeletedForSystemExceptions" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Template.PMTemplate">
        <properties>
          <add name="Description" value="Set Status 'Deleted' for Exception events with only System stack points and specified Exception Class" />
          <add name="EventType" value="Exception" />
          <add name="EventContext" value="All" />
        </properties>
        <expressions>
          <expression variable="Intercept.Variable.EventClassType" condition="Intercept.Condition.StringEnumInLike" valuetypename="System.Collections.Generic.List`1[[System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]">
            <ArrayOfString xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
              <string>exception</string>
            </ArrayOfString>
          </expression>
          <expression variable="Intercept.Variable.Body" condition="Intercept.Condition.XPathNotExists" valuetypename="System.String">
            <string>//stackPoint/method[not(starts-with(text(),"System.")) and not(starts-with(text(),"Microsoft."))]</string>
          </expression>
          <expression variable="Intercept.Variable.Source" condition="Intercept.Condition.StringEnumInLike" />
          <expression variable="Intercept.Variable.ExceptionClass" condition="Intercept.Condition.StringLike" />
        </expressions>
        <actions>
          <action actiontype="Intercept.ActionType.ChangeStatus" valuetypename="System.Byte">
            <unsignedByte>2</unsignedByte>
          </action>
        </actions>
      </template>
      <template name="Intercept.Template.ByDesignFor404Errors" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Template.PMTemplate">
        <properties>
          <add name="Description" value="Set Status 'By Design' for HttpExceptions with 404 error code" />
          <add name="EventType" value="Exception" />
          <add name="EventContext" value="All" />
        </properties>
        <expressions>
          <expression variable="Intercept.Variable.EventClassType" condition="Intercept.Condition.StringEnumInLike" valuetypename="System.Collections.Generic.List`1[[System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]">
            <ArrayOfString xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
              <string>exception</string>
            </ArrayOfString>
          </expression>
          <expression variable="Intercept.Variable.Body" condition="Intercept.Condition.XPathExists" valuetypename="System.String">
            <string>//events/event/variable[@type="class"]/variables/variable[name="_httpCode" and value="404"]</string>
          </expression>
          <expression variable="Intercept.Variable.ExceptionClass" condition="Intercept.Condition.StringLike" valuetypename="System.String">
            <string>System.Web.HttpException</string>
          </expression>
          <expression variable="Intercept.Variable.Source" condition="Intercept.Condition.StringEnumInLike" />
        </expressions>
        <actions>
          <action actiontype="Intercept.ActionType.ChangeStatus" valuetypename="System.Byte">
            <unsignedByte>3</unsignedByte>
          </action>
        </actions>
      </template>
      <template name="Intercept.Template.ByDesignForSpecificExceptions" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Template.PMTemplate">
        <properties>
          <add name="Description" value="Set Status 'By Design' for Exception events with specified Exception" />
          <add name="EventType" value="Exception" />
          <add name="EventContext" value="All" />
        </properties>
        <expressions>
          <expression variable="Intercept.Variable.EventClassType" condition="Intercept.Condition.StringEnumInLike" valuetypename="System.Collections.Generic.List`1[[System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]">
            <ArrayOfString xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
              <string>exception</string>
            </ArrayOfString>
          </expression>
          <expression variable="Intercept.Variable.ExceptionClass" condition="Intercept.Condition.StringLike" />
          <expression variable="Intercept.Variable.Source" condition="Intercept.Condition.StringEnumInLike" />
        </expressions>
        <actions>
          <action actiontype="Intercept.ActionType.ChangeStatus" valuetypename="System.Byte">
            <unsignedByte>3</unsignedByte>
          </action>
        </actions>
      </template>
      <template name="Intercept.Template.ByDesignForSpecificPerformanceActions" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Template.PMTemplate">
        <properties>
          <add name="Description" value="Set Status 'By Design' for Performance events with specified Action and Event Duration" />
          <add name="EventType" value="Performance" />
          <add name="EventContext" value="All" />
        </properties>
        <expressions>
          <expression variable="Intercept.Variable.EventClassType" condition="Intercept.Condition.StringEnumInLike" valuetypename="System.Collections.Generic.List`1[[System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]">
            <ArrayOfString xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
              <string>performance</string>
            </ArrayOfString>
          </expression>
          <expression variable="Intercept.Variable.Source" condition="Intercept.Condition.StringEnumInLike" />
          <expression variable="Intercept.Variable.Action" condition="Intercept.Condition.StringLike" />
          <expression variable="Intercept.Variable.Duration" condition="Intercept.Condition.LongGreater" />
        </expressions>
        <actions>
          <action actiontype="Intercept.ActionType.ChangeStatus" valuetypename="System.Byte">
            <unsignedByte>3</unsignedByte>
          </action>
        </actions>
      </template>
      <template name="Intercept.Template.StatusForSpecificExceptionDescriptions" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Template.PMTemplate">
        <properties>
          <add name="Description" value="Set specified Status for Exception events with specified Exception Description" />
          <add name="EventType" value="Exception" />
          <add name="EventContext" value="All" />
        </properties>
        <expressions>
          <expression variable="Intercept.Variable.Source" condition="Intercept.Condition.StringEnumInLike" />
          <expression variable="Intercept.Variable.EventClassType" condition="Intercept.Condition.StringEnumInLike" valuetypename="System.Collections.Generic.List`1[[System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]">
            <ArrayOfString xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
              <string>exception</string>
            </ArrayOfString>
          </expression>
          <expression variable="Intercept.Variable.Description" condition="Intercept.Condition.StringLike" />
        </expressions>
        <actions>
          <action actiontype="Intercept.ActionType.ChangeStatus" />
        </actions>
      </template>
      <template name="Intercept.Template.StatusForSpecificFailedFunction" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Template.PMTemplate">
        <properties>
          <add name="Description" value="Set specified Status for Exception events with specified Failed Function" />
          <add name="EventType" value="Exception" />
          <add name="EventContext" value="All" />
        </properties>
        <expressions>
          <expression variable="Intercept.Variable.Source" condition="Intercept.Condition.StringEnumInLike" />
          <expression variable="Intercept.Variable.EventClassType" condition="Intercept.Condition.StringEnumInLike" valuetypename="System.Collections.Generic.List`1[[System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]">
            <ArrayOfString xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
              <string>exception</string>
            </ArrayOfString>
          </expression>
          <expression variable="Intercept.Variable.FailedFunction" condition="Intercept.Condition.StringLike" />
        </expressions>
        <actions>
          <action actiontype="Intercept.ActionType.ChangeStatus" />
        </actions>
      </template>
      <template name="Intercept.Template.StatusForSpecificCallStack" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Template.PMTemplate">
        <properties>
          <add name="Description" value="Set specified Status for Exception events with specified Call Stack" />
          <add name="EventType" value="Exception" />
          <add name="EventContext" value="Current" />
        </properties>
        <expressions>
          <expression variable="Intercept.Variable.Source" condition="Intercept.Condition.StringEnumInLike" />
          <expression variable="Intercept.Variable.EventClassType" condition="Intercept.Condition.StringEnumInLike" valuetypename="System.Collections.Generic.List`1[[System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]">
            <ArrayOfString xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
              <string>exception</string>
            </ArrayOfString>
          </expression>
          <expression variable="Intercept.Variable.CallStackHash" condition="Intercept.Condition.StringEqual" />
        </expressions>
        <actions>
          <action actiontype="Intercept.ActionType.ChangeStatus" />
        </actions>
      </template>
      <template name="Intercept.Template.StatusForSpecificPerformanceActions" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Template.PMTemplate">
        <properties>
          <add name="Description" value="Set specified Status for Performance events with specified Action" />
          <add name="EventType" value="Performance" />
          <add name="EventContext" value="All" />
        </properties>
        <expressions>
          <expression variable="Intercept.Variable.Source" condition="Intercept.Condition.StringEnumInLike" />
          <expression variable="Intercept.Variable.EventClassType" condition="Intercept.Condition.StringEnumInLike" valuetypename="System.Collections.Generic.List`1[[System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]">
            <ArrayOfString xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
              <string>performance</string>
            </ArrayOfString>
          </expression>
          <expression variable="Intercept.Variable.Action" condition="Intercept.Condition.StringLike" />
        </expressions>
        <actions>
          <action actiontype="Intercept.ActionType.ChangeStatus" />
        </actions>
      </template>
      <template name="Intercept.Template.StatusForSpecificHeaviestNode" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Template.PMTemplate">
        <properties>
          <add name="Description" value="Set specified Status for Performance events with specified Slow Call" />
          <add name="EventType" value="Performance" />
          <add name="EventContext" value="All" />
        </properties>
        <expressions>
          <expression variable="Intercept.Variable.Source" condition="Intercept.Condition.StringEnumInLike" />
          <expression variable="Intercept.Variable.EventClassType" condition="Intercept.Condition.StringEnumInLike" valuetypename="System.Collections.Generic.List`1[[System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]">
            <ArrayOfString xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
              <string>performance</string>
            </ArrayOfString>
          </expression>
          <expression variable="Intercept.Variable.HeaviestNode" condition="Intercept.Condition.StringLike" />
        </expressions>
        <actions>
          <action actiontype="Intercept.ActionType.ChangeStatus" />
        </actions>
      </template>
      <template name="Intercept.Template.StatusForSpecificBody" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.Template.PMTemplate">
        <properties>
          <add name="Description" value="Set specified Status for events with specified Event Body" />
          <add name="EventType" value="All" />
          <add name="EventContext" value="All" />
        </properties>
        <expressions>
          <expression variable="Intercept.Variable.Source" condition="Intercept.Condition.StringEnumInLike" />
          <expression variable="Intercept.Variable.Body" condition="Intercept.Condition.XPathExists" />
        </expressions>
        <actions>
          <action actiontype="Intercept.ActionType.ChangeStatus" />
        </actions>
      </template>
    </templates>
    <eventStatuses>
      <eventStatus name="Intercept.EventStatus.New" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.EventStatus.PMEventStatus">
        <properties>
          <add name="Description" value="New" />
          <add name="Priority" value="0" />
          <add name="IsDefault" value="true" />
          <add name="DatabaseID" value="0" />
        </properties>
      </eventStatus>
      <eventStatus name="Intercept.EventStatus.Reviewed" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.EventStatus.PMEventStatus">
        <properties>
          <add name="Description" value="Reviewed" />
          <add name="Priority" value="3" />
          <add name="DatabaseID" value="1" />
        </properties>
      </eventStatus>
      <eventStatus name="Intercept.EventStatus.Deleted" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.EventStatus.PMEventStatus">
        <properties>
          <add name="Description" value="Deleted" />
          <add name="Priority" value="10" />
          <add name="LifeTime" value="24" />
          <add name="DatabaseID" value="2" />
        </properties>
      </eventStatus>
      <eventStatus name="Intercept.EventStatus.ByDesign" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.EventStatus.PMEventStatus">
        <properties>
          <add name="Description" value="By Design" />
          <add name="Priority" value="5" />
          <add name="LifeTime" value="72" />
          <add name="DatabaseID" value="3" />
        </properties>
      </eventStatus>
    </eventStatuses>
    <ruleProcessors>
      <ruleProcessor name="Intercept.RuleProcessor.SELog.Process" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.RuleProcessor.SELog.SELogRuleProcessor" />
      <ruleProcessor name="Intercept.RuleProcessor.PMRuleWizard.Create" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.RuleProcessor.RuleWizard.CreateTaskRP" />
      <ruleProcessor name="Intercept.RuleProcessor.PMRuleWizard.Estimate" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.RuleProcessor.RuleWizard.EstimateTaskRP" />
      <ruleProcessor name="Intercept.RuleProcessor.PMRuleWizard.Process" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.RuleProcessor.RuleWizard.ProcessTaskRP" />
      <ruleProcessor name="Intercept.RuleProcessor.PMRuleWizard.GetError" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.RuleProcessor.RuleWizard.GetErrorRP" />
      <ruleProcessor name="Intercept.RuleProcessor.PMRuleWizard.Search" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.RuleProcessor.RuleWizard.SearchRP" />
      <ruleProcessor name="Intercept.RuleProcessor.PMRuleWizard.GetSearchCount" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.RuleProcessor.RuleWizard.GetSearchCountRP" />
      <ruleProcessor name="Intercept.RuleProcessor.PMRuleWizard.SearchAffected" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.RuleProcessor.RuleWizard.SearchAffectedRP" />
      <ruleProcessor name="Intercept.RuleProcessor.PMRuleWizard.GetAffectedCount" class="Avicode.Intercept.SEManager.Core.BusinessLogic.ProblemManagement.RuleProcessor.RuleWizard.GetAffectedCountRP" />
    </ruleProcessors>
  </problemManagement>
  <subscribers></subscribers>
</configuration>