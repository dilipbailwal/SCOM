<?xml version="1.0" encoding="utf-8"?><Transforms>

  <!-- Default transform (no locale) -->
  <Transform type="System.BaseData" locale="ENU">
	<!--
 |
 | XSLT REC Compliant Version of IE5 Default Stylesheet
 |
 | Original version by Jonathan Marsh (jmarsh@xxxxxxxxxxxxx)
 | http://msdn.microsoft.com/xml/samples/defaultss/defaultss.xsl
 |
 | Conversion to XSLT 1.0 REC Syntax by Steve Muench (smuench@xxxxxxxxxx)
 | Updated to work in MOM by Chris Weidman (christow@xxxxxxxxxx)
 |
 +--><xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
      <xsl:output indent="no" method="html" />

      <xsl:template match="/">
        <xsl:apply-templates />
      </xsl:template>

      <xsl:template match="processing-instruction()">
        <DIV STYLE="margin-left:1em; text-indent:-1em; margin-right:1em">
          <SPAN STYLE="color:red; font-weight:bold;">
            <xsl:call-template name="entity-ref">
              <xsl:with-param name="name">#160</xsl:with-param>
            </xsl:call-template>
          </SPAN>
          <SPAN STYLE="color:blue">
            <xsl:text>&lt;?</xsl:text>
          </SPAN>
          <SPAN STYLE="color:blue">
            <xsl:value-of select="name(.)" />
            <xsl:value-of select="." />
          </SPAN>
          <SPAN STYLE="color:blue">
            <xsl:text>?&gt;</xsl:text>
          </SPAN>
        </DIV>
      </xsl:template>

      <xsl:template match="processing-instruction('xml')">
        <DIV STYLE="margin-left:1em; text-indent:-1em; margin-right:1em">
          <SPAN STYLE="color:red; font-weight:bold;">
            <xsl:call-template name="entity-ref">
              <xsl:with-param name="name">#160</xsl:with-param>
            </xsl:call-template>
          </SPAN>
          <SPAN STYLE="color:blue">
            <xsl:text>&lt;?</xsl:text>
          </SPAN>
          <SPAN STYLE="color:blue">
            <xsl:text>xml </xsl:text>
            <xsl:for-each select="@*">
              <xsl:value-of select="name(.)" />
              <xsl:text>="</xsl:text>
              <xsl:value-of select="." />
              <xsl:text>" </xsl:text>
            </xsl:for-each>
          </SPAN>
          <SPAN STYLE="color:blue">
            <xsl:text>?&gt;</xsl:text>
          </SPAN>
        </DIV>
      </xsl:template>

      <xsl:template match="@*">
        <SPAN>
          <xsl:attribute name="STYLE">
            <xsl:choose>
              <xsl:when test="xsl:*/@*">
                <xsl:text>color:#990099</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text>color:#990000</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:attribute>
          <xsl:value-of select="name(.)" />
        </SPAN>
        <SPAN STYLE="color:blue">="</SPAN>
        <B>
          <xsl:value-of select="." />
        </B>
        <SPAN STYLE="color:blue">"</SPAN>
      </xsl:template>

      <xsl:template match="text()">
        <DIV STYLE="margin-left:1em; text-indent:-1em; margin-right:1em">
          <SPAN STYLE="color:red; font-weight:bold;"> </SPAN>
          <SPAN STYLE="font-weight:bold">
            <xsl:value-of select="." />
          </SPAN>
        </DIV>
      </xsl:template>

      <xsl:template match="comment()">
        <DIV STYLE="margin-left:1em;text-indent:-1em;margin-right:1em">
          <SPAN>
            <SPAN STYLE="color:blue">
              <xsl:text>&lt;!--</xsl:text>
            </SPAN>
          </SPAN>
          <SPAN STYLE="color:#888888" id="clean">
            <SPAN STYLE="margin:0px;display:inline">
              <xsl:value-of select="." />
            </SPAN>
          </SPAN>
          <SPAN STYLE="color:red;font-weight:bold;">
            <xsl:call-template name="entity-ref">
              <xsl:with-param name="name">#160</xsl:with-param>
            </xsl:call-template>
          </SPAN>
          <SPAN STYLE="color:blue">
            <xsl:text>--&gt;</xsl:text>
          </SPAN>
        </DIV>
      </xsl:template>

      <xsl:template match="*">
        <DIV STYLE="margin-left:1em; text-indent:-1em; margin-right:1em">
          <DIV STYLE="margin-left:1em;text-indent:-2em">
            <SPAN STYLE="color:red; font-weight:bold;">
              <xsl:call-template name="entity-ref">
                <xsl:with-param name="name">#160</xsl:with-param>
              </xsl:call-template>
            </SPAN>
            <SPAN STYLE="color:blue">&lt;</SPAN>
            <SPAN>
              <xsl:attribute name="STYLE">
                <xsl:choose>
                  <xsl:when test="xsl:*/@*">
                    <xsl:text>color:#990099</xsl:text>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text>color:#990000</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>
              <xsl:value-of select="name(.)" />
              <xsl:if test="@*">
                <xsl:text> </xsl:text>
              </xsl:if>
            </SPAN>
            <xsl:apply-templates select="@*" />
            <SPAN STYLE="color:blue">
              <xsl:text>/&gt;</xsl:text>
            </SPAN>
          </DIV>
        </DIV>
      </xsl:template>

      <xsl:template match="*[node()]">
        <DIV STYLE="margin-left:1em; text-indent:-1em; margin-right:1em">
          <DIV STYLE="margin-left:1em;text-indent:-2em">
            <SPAN STYLE="color:red; font-weight:bold;">&lt;</SPAN>
            <SPAN>
              <xsl:attribute name="STYLE">
                <xsl:choose>
                  <xsl:when test="xsl:*/@*">
                    <xsl:text>color:#990099</xsl:text>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text>color:#990000</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>
              <xsl:value-of select="name(.)" />
              <xsl:if test="@*">
                <xsl:text> </xsl:text>
              </xsl:if>
            </SPAN>
            <xsl:apply-templates select="@*" />
            <SPAN STYLE="color:blue">
              <xsl:text>&gt;</xsl:text>
            </SPAN>
          </DIV>
          <DIV>
            <xsl:apply-templates />
            <DIV>
              <SPAN STYLE="color:red; font-weight:bold;">
                <xsl:call-template name="entity-ref">
                  <xsl:with-param name="name">#160</xsl:with-param>
                </xsl:call-template>
              </SPAN>
              <SPAN STYLE="color:blue">
                <xsl:text>&lt;/</xsl:text>
              </SPAN>
              <SPAN>
                <xsl:attribute name="STYLE">
                  <xsl:choose>
                    <xsl:when test="xsl:*/@*">
                      <xsl:text>color:#990099</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:text>color:#990000</xsl:text>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:attribute>
                <xsl:value-of select="name(.)" />
              </SPAN>
              <SPAN STYLE="color:blue">
                <xsl:text>&gt;</xsl:text>
              </SPAN>
            </DIV>
          </DIV>
        </DIV>
      </xsl:template>

      <xsl:template match="*[text() and not (comment() or processing-instruction())]">
        <DIV STYLE="margin-left:1em; text-indent:-1em; margin-right:1em">
          <DIV STYLE="margin-left:1em;text-indent:-2em">
            <SPAN STYLE="color:red; font-weight:bold;">
              <xsl:call-template name="entity-ref">
                <xsl:with-param name="name">#160</xsl:with-param>
              </xsl:call-template>
            </SPAN>
            <SPAN STYLE="color:blue">
              <xsl:text>&lt;</xsl:text>
            </SPAN>
            <SPAN>
              <xsl:attribute name="STYLE">
                <xsl:choose>
                  <xsl:when test="xsl:*/@*">
                    <xsl:text>color:#990099</xsl:text>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text>color:#990000</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>
              <xsl:value-of select="name(.)" />
              <xsl:if test="@*">
                <xsl:text> </xsl:text>
              </xsl:if>
            </SPAN>
            <xsl:apply-templates select="@*" />
            <SPAN STYLE="color:blue">
              <xsl:text>&gt;</xsl:text>
            </SPAN>
            <SPAN STYLE="font-weight:bold">
              <xsl:value-of select="." />
            </SPAN>
            <SPAN STYLE="color:blue">&lt;/</SPAN>
            <SPAN>
              <xsl:attribute name="STYLE">
                <xsl:choose>
                  <xsl:when test="xsl:*/@*">
                    <xsl:text>color:#990099</xsl:text>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text>color:#990000</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>
              <xsl:value-of select="name(.)" />
            </SPAN>
            <SPAN STYLE="color:blue">
              <xsl:text>&gt;</xsl:text>
            </SPAN>
          </DIV>
        </DIV>
      </xsl:template>

      <xsl:template match="*[*]" priority="20">
        <DIV STYLE="margin-left:1em; text-indent:-1em; margin-right:1em">
          <DIV STYLE="margin-left:1em;text-indent:-1em">
            <SPAN STYLE="color:blue">&lt;</SPAN>
            <SPAN>
              <xsl:attribute name="STYLE">
                <xsl:choose>
                  <xsl:when test="xsl:*/@*">
                    <xsl:text>color:#990099</xsl:text>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text>color:#990000</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>
              <xsl:value-of select="name(.)" />
              <xsl:if test="@*">
                <xsl:text> </xsl:text>
              </xsl:if>
            </SPAN>
            <xsl:apply-templates select="@*" />
            <SPAN STYLE="color:blue">
              <xsl:text>&gt;</xsl:text>
            </SPAN>
          </DIV>
          <DIV>
            <xsl:apply-templates />
            <DIV>
              <SPAN STYLE="color:red; font-weight:bold;">
                <xsl:call-template name="entity-ref">
                  <xsl:with-param name="name">#160</xsl:with-param>
                </xsl:call-template>
              </SPAN>
              <SPAN STYLE="color:blue">
                <xsl:text>&lt;/</xsl:text>
              </SPAN>
              <SPAN>
                <xsl:attribute name="STYLE">
                  <xsl:choose>
                    <xsl:when test="xsl:*/@*">
                      <xsl:text>color:#990099</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:text>color:#990000</xsl:text>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:attribute>
                <xsl:value-of select="name(.)" />
              </SPAN>
              <SPAN STYLE="color:blue">
                <xsl:text>&gt;</xsl:text>
              </SPAN>
            </DIV>
          </DIV>
        </DIV>
      </xsl:template>

      <xsl:template name="entity-ref">
        <xsl:param name="name" />
        <xsl:text disable-output-escaping="yes">&amp;</xsl:text>
        <xsl:value-of select="$name" />
        <xsl:text>;</xsl:text>
      </xsl:template>

    </xsl:stylesheet>
  </Transform>

  <!-- System.Health.EntityStateChangeData (marius)-->
  <Transform type="System.Health.EntityStateChangeData" locale="enu">
	<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">

      <xsl:variable name="ShowHideString"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">ShowHideString</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="DateAndTime"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">DateAndTime</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="ManagedEntity"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">ManagedEntity</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="EventOriginId"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">EventOriginId</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="MonitorId"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">MonitorId</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="HealthState"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">HealthState</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="OldHealthState"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">OldHealthState</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="TimeChanged"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">TimeChanged</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="HealthStateUninitialized"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">HealthStateUninitialized</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="HealthStateSuccess"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">HealthStateSuccess</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="HealthStateWarning"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">HealthStateWarning</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="HealthStateError"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">HealthStateError</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="Ctx"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">Ctx</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="CtxData"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">CtxData</xsl:with-param></xsl:call-template></xsl:variable>

      <!-- Returns the display string of the specified resouce -->
      <xsl:template name="GetDisplayString">
        <xsl:param name="Id" />
        <xsl:value-of select="DataTypeTransformer:GetStringResource('System.Health.Library', '31bf3856ad364e35', concat('System.Health.EntityStateChangeData.',$Id))" />
      </xsl:template>

      <xsl:template match="DataItem">
        <xsl:element name="div">
          <xsl:attribute name="align">left</xsl:attribute>
          <xsl:attribute name="valign">top</xsl:attribute>
          <xsl:attribute name="class">state</xsl:attribute>

          <xsl:call-template name="CSS" />
          <xsl:call-template name="ScriptFunctions" />

          <xsl:element name="table">
            <xsl:attribute name="class">mainTable</xsl:attribute>

            <xsl:call-template name="Tag">
              <xsl:with-param name="TagName" select="$DateAndTime" />
              <xsl:with-param name="TagValue" select="DataTypeTransformer:FormatDateTime(@time)" />
            </xsl:call-template>

            <xsl:apply-templates select="ManagedEntity" />

            <xsl:for-each select="Changes/Change">
              <xsl:call-template name="Separator" />
              <xsl:apply-templates />
            </xsl:for-each>

          </xsl:element>

        </xsl:element>
      </xsl:template>

      <xsl:template match="ManagedEntity">
        <xsl:call-template name="Tag">
          <xsl:with-param name="TagName" select="$ManagedEntity" />
          <xsl:with-param name="TagValue" select="." />
          <xsl:with-param name="Guid" select="boolean(1)" />
          <xsl:with-param name="ObjectToName" select="boolean(1)" />
        </xsl:call-template>
      </xsl:template>

      <xsl:template match="EventOriginId">
        <xsl:call-template name="Tag">
          <xsl:with-param name="TagName" select="$EventOriginId" />
          <xsl:with-param name="TagValue" select="." />
          <xsl:with-param name="Guid" select="boolean(1)" />
        </xsl:call-template>
      </xsl:template>
      <xsl:template match="MonitorId">
        <xsl:call-template name="Tag">
          <xsl:with-param name="TagName" select="$MonitorId" />
          <xsl:with-param name="TagValue" select="." />
          <xsl:with-param name="Guid" select="boolean(1)" />
          <xsl:with-param name="MonitorToName" select="boolean(1)" />
        </xsl:call-template>
      </xsl:template>

      <xsl:template match="NewHealthState">
        <xsl:call-template name="Tag">
          <xsl:with-param name="TagName" select="$HealthState" />
          <xsl:with-param name="TagValue" select="." />
        </xsl:call-template>
      </xsl:template>
      <xsl:template match="OldHealthState">
        <xsl:call-template name="Tag">
          <xsl:with-param name="TagName" select="$OldHealthState" />
          <xsl:with-param name="TagValue" select="." />
        </xsl:call-template>
      </xsl:template>

      <xsl:template match="TimeChanged">
        <xsl:call-template name="Tag">
          <xsl:with-param name="TagName" select="$TimeChanged" />
          <xsl:with-param name="TagValue" select="DataTypeTransformer:FormatDateTime(.)" />
        </xsl:call-template>
      </xsl:template>

      <xsl:template match="Context">
        <xsl:variable name="ContextDataItem" select="./DataItem" />
        <xsl:choose>
          <xsl:when test="$ContextDataItem">
            <xsl:element name="tr">
              <xsl:element name="td">
                <xsl:attribute name="colSpan">2</xsl:attribute>
                <xsl:element name="table">
                  <xsl:attribute name="class">innerTable</xsl:attribute>
                  <xsl:call-template name="TableToggleEntry">
                    <xsl:with-param name="Title" select="$CtxData" />
                    <xsl:with-param name="Origin" select="../EventOriginId" />
                    <xsl:with-param name="Type" select="$ContextDataItem/@type" />
                    <xsl:with-param name="Time" select="$ContextDataItem/@time" />
                  </xsl:call-template>
                  <xsl:element name="tr">
                    <xsl:attribute name="style">display:none;</xsl:attribute>
                    <xsl:element name="td">
                      <xsl:attribute name="colSpan">2</xsl:attribute>
                      <xsl:copy-of select="DataTypeTransformer:Transform($ContextDataItem)" />
                    </xsl:element>
                  </xsl:element>
                </xsl:element>
              </xsl:element>
            </xsl:element>
          </xsl:when>
          <xsl:otherwise>
            <xsl:call-template name="Tag">
              <xsl:with-param name="TagName" select="$Ctx" />
              <xsl:with-param name="TagValue" select="." />
            </xsl:call-template>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:template>

      <xsl:template name="Tag">
        <xsl:param name="TagName" />
        <xsl:param name="TagValue" />
        <xsl:param name="Guid" />
        <xsl:param name="ObjectToName" />
        <xsl:param name="MonitorToName" />

        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="class">boldColumn</xsl:attribute>
            <xsl:value-of select="$TagName" />
          </xsl:element>
          <xsl:element name="td">
            <xsl:choose>
              <xsl:when test="not(boolean($Guid))">
                <xsl:choose>
                  <xsl:when test="number($TagValue) = 0">
                    <xsl:value-of select="$HealthStateUninitialized" />
                  </xsl:when>
                  <xsl:when test="number($TagValue) = 1">
                    <xsl:value-of select="$HealthStateSuccess" />
                  </xsl:when>
                  <xsl:when test="number($TagValue) = 2">
                    <xsl:value-of select="$HealthStateWarning" />
                  </xsl:when>
                  <xsl:when test="number($TagValue) = 3">
                    <xsl:value-of select="$HealthStateError" />
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="$TagValue" />
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:choose>
                  <xsl:when test="boolean($ObjectToName)">
                    <xsl:value-of select="DataTypeTransformer:GetObjectDisplayName($TagValue)" />
                  </xsl:when>
                  <xsl:when test="boolean($MonitorToName)">
                    <xsl:value-of select="DataTypeTransformer:GetMonitorDisplayName($TagValue)" />
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text>{</xsl:text>
                    <xsl:value-of select="$TagValue" />
                    <xsl:text>}</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:element>
      </xsl:template>

      <xsl:template name="TableToggleEntry">
        <xsl:param name="Title" />
        <xsl:param name="Origin" />
        <xsl:param name="Type" />
        <xsl:param name="Time" />
        <xsl:element name="tr">
          <xsl:attribute name="id">
            <xsl:value-of select="$Title" />
            <xsl:value-of select="$Origin" />
            <xsl:value-of select="$Type" />
            <xsl:value-of select="$Time" />
          </xsl:attribute>
          <xsl:element name="td">
            <xsl:attribute name="colSpan">2</xsl:attribute>
            <xsl:element name="p">
              <xsl:element name="b">
                <xsl:value-of select="$Title" />
              </xsl:element>
              <xsl:element name="a">
                <xsl:attribute name="onclick">
                  <xsl:text>ToggleDisplayMode('</xsl:text>
                  <xsl:value-of select="$Title" />
                  <xsl:value-of select="$Origin" />
                  <xsl:value-of select="$Type" />
                  <xsl:value-of select="$Time" />
                  <xsl:text>')</xsl:text>
                </xsl:attribute>
                <xsl:element name="u">
                  <xsl:value-of select="$ShowHideString" />
                </xsl:element>
              </xsl:element>
            </xsl:element>
          </xsl:element>
        </xsl:element>
      </xsl:template>

      <xsl:template name="Separator">
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="colSpan">2</xsl:attribute>
            <xsl:element name="hr" />
          </xsl:element>
        </xsl:element>
      </xsl:template>

      <xsl:template name="ScriptFunctions">
        <xsl:element name="script">
          

            function ToggleDisplayMode(node) 
            {
                var tableHeader = document.getElementById(node);
				if (null != tableHeader)
				{
					var row = tableHeader.nextSibling;
					while (row != null)
					{
						if ( row.style.display != "none" ) {
							row.style.display = "none";
						}
						else {
							row.style.display = "";
						}
						row = row.nextSibling;
					}
				}
            }

            
        </xsl:element>
      </xsl:template>

      <xsl:template name="CSS">
        <xsl:element name="style">
          .state .mainTable
          {
          width: 100%;
          border-style:none;
          border-collapse: collapse;
          }

          .state td
          {
          text-align: left;
          vertical-align: top;
          color: gray;
          }

          .state .boldColumn
          {
          text-align: left;
          vertical-align: top;
          font: bold;
          color: #696969;
          }

          .state .innerTable
          {
          width: 100%;
          border-style: none;
          border-collapse: collapse;
          }

          .state b
          {
          text-align: left;
          vertical-align: top;
          font: bold;
          color: #696969;
          }

          .state u
          {
          color: blue;
          }

        </xsl:element>
      </xsl:template>

    </xsl:stylesheet>
  </Transform>

  <!-- System.Health.StateData (marius)-->
  <Transform type="System.Health.StateData" locale="enu">
	<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">

      <xsl:variable name="ShowHideString"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">ShowHideString</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="DateAndTime"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">DateAndTime</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="EventOriginId"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">EventOriginId</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="ManagedEntityId"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">ManagedEntityId</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="MonitorId"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">MonitorId</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="ParentMonitorId"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">ParentMonitorId</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="HealthState"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">HealthState</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="OldHealthState"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">OldHealthState</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="HealthStateUninitialized"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">HealthStateUninitialized</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="HealthStateSuccess"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">HealthStateSuccess</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="HealthStateWarning"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">HealthStateWarning</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="HealthStateError"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">HealthStateError</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="Ctx"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">Ctx</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="CtxData"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">CtxData</xsl:with-param></xsl:call-template></xsl:variable>

      <!-- Returns the display string of the specified resouce -->
      <xsl:template name="GetDisplayString">
        <xsl:param name="Id" />
        <xsl:value-of select="DataTypeTransformer:GetStringResource('System.Health.Library', '31bf3856ad364e35', concat('System.Health.StateData.',$Id))" />
      </xsl:template>

      <xsl:template match="DataItem">
        <xsl:element name="div">
          <xsl:attribute name="align">left</xsl:attribute>
          <xsl:attribute name="valign">top</xsl:attribute>
          <xsl:attribute name="class">state</xsl:attribute>

          <xsl:call-template name="CSS" />
          <xsl:call-template name="ScriptFunctions" />

          <xsl:element name="table">
            <xsl:attribute name="class">mainTable</xsl:attribute>

            <xsl:call-template name="Tag">
              <xsl:with-param name="TagName" select="$DateAndTime" />
              <xsl:with-param name="TagValue" select="DataTypeTransformer:FormatDateTime(@time)" />
            </xsl:call-template>

            <xsl:apply-templates select="EventOriginId" />
            <xsl:apply-templates select="ManagedEntityId" />
            <xsl:apply-templates select="MonitorId" />
            <xsl:apply-templates select="ParentMonitorId" />
            <xsl:apply-templates select="HealthState" />
            <xsl:apply-templates select="OldHealthState" />

            <xsl:apply-templates select="Context" />
          </xsl:element>

        </xsl:element>
      </xsl:template>

      <xsl:template match="EventOriginId">
        <xsl:call-template name="Tag">
          <xsl:with-param name="TagName" select="$EventOriginId" />
          <xsl:with-param name="TagValue" select="." />
          <xsl:with-param name="Guid" select="boolean(1)" />
        </xsl:call-template>
      </xsl:template>
      <xsl:template match="ManagedEntityId">
        <xsl:call-template name="Tag">
          <xsl:with-param name="TagName" select="$ManagedEntityId" />
          <xsl:with-param name="TagValue" select="." />
          <xsl:with-param name="Guid" select="boolean(1)" />
          <xsl:with-param name="ObjectToName" select="boolean(1)" />
        </xsl:call-template>
      </xsl:template>
      <xsl:template match="MonitorId">
        <xsl:call-template name="Tag">
          <xsl:with-param name="TagName" select="$MonitorId" />
          <xsl:with-param name="TagValue" select="." />
          <xsl:with-param name="Guid" select="boolean(1)" />
          <xsl:with-param name="MonitorToName" select="boolean(1)" />
        </xsl:call-template>
      </xsl:template>
      <xsl:template match="ParentMonitorId">
        <xsl:call-template name="Tag">
          <xsl:with-param name="TagName" select="$ParentMonitorId" />
          <xsl:with-param name="TagValue" select="." />
          <xsl:with-param name="Guid" select="boolean(1)" />
          <xsl:with-param name="MonitorToName" select="boolean(1)" />
        </xsl:call-template>
      </xsl:template>

      <xsl:template match="HealthState">
        <xsl:call-template name="Tag">
          <xsl:with-param name="TagName" select="$HealthState" />
          <xsl:with-param name="TagValue" select="." />
        </xsl:call-template>
      </xsl:template>
      <xsl:template match="OldHealthState">
        <xsl:call-template name="Tag">
          <xsl:with-param name="TagName" select="$OldHealthState" />
          <xsl:with-param name="TagValue" select="." />
        </xsl:call-template>
      </xsl:template>

      <xsl:template match="Context">
        <xsl:variable name="ContextDataItem" select="./DataItem" />
        <xsl:choose>
          <xsl:when test="$ContextDataItem">
            <xsl:element name="tr">
              <xsl:element name="td">
                <xsl:attribute name="colSpan">2</xsl:attribute>
                <xsl:element name="table">
                  <xsl:attribute name="class">innerTable</xsl:attribute>
                  <xsl:choose>
                    <xsl:when test="../EventOriginId">
                      <xsl:call-template name="TableToggleEntry">
                        <xsl:with-param name="Title" select="$CtxData" />
                        <xsl:with-param name="Origin" select="../EventOriginId" />
                        <xsl:with-param name="Type" select="$ContextDataItem/@type" />
                        <xsl:with-param name="Time" select="$ContextDataItem/@time" />
                      </xsl:call-template>
                      <xsl:element name="tr">
                        <xsl:attribute name="style">display:none;</xsl:attribute>
                        <xsl:element name="td">
                          <xsl:attribute name="colSpan">2</xsl:attribute>
                          <xsl:copy-of select="DataTypeTransformer:Transform($ContextDataItem)" />
                        </xsl:element>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:element name="tr">
                        <xsl:element name="td">
                          <xsl:attribute name="colSpan">2</xsl:attribute>
                          <xsl:element name="p">
                            <xsl:element name="b">
                              <xsl:value-of select="$CtxData" />
                            </xsl:element>
                          </xsl:element>
                        </xsl:element>
                      </xsl:element>
                      <xsl:call-template name="Separator" />
                      <xsl:element name="tr">
                        <xsl:element name="td">
                          <xsl:attribute name="colSpan">2</xsl:attribute>
                          <xsl:copy-of select="DataTypeTransformer:Transform($ContextDataItem)" />
                        </xsl:element>
                      </xsl:element>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:element>
            </xsl:element>
          </xsl:when>
          <xsl:otherwise>
            <xsl:call-template name="Tag">
              <xsl:with-param name="TagName" select="$Ctx" />
              <xsl:with-param name="TagValue" select="." />
            </xsl:call-template>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:template>

      <xsl:template name="Tag">
        <xsl:param name="TagName" />
        <xsl:param name="TagValue" />
        <xsl:param name="Guid" />
        <xsl:param name="ObjectToName" />
        <xsl:param name="MonitorToName" />

        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="class">boldColumn</xsl:attribute>
            <xsl:value-of select="$TagName" />
          </xsl:element>
          <xsl:element name="td">
            <xsl:choose>
              <xsl:when test="not(boolean($Guid))">
                <xsl:choose>
                  <xsl:when test="number($TagValue) = 0">
                    <xsl:value-of select="$HealthStateUninitialized" />
                  </xsl:when>
                  <xsl:when test="number($TagValue) = 1">
                    <xsl:value-of select="$HealthStateSuccess" />
                  </xsl:when>
                  <xsl:when test="number($TagValue) = 2">
                    <xsl:value-of select="$HealthStateWarning" />
                  </xsl:when>
                  <xsl:when test="number($TagValue) = 3">
                    <xsl:value-of select="$HealthStateError" />
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="$TagValue" />
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:choose>
                  <xsl:when test="boolean($ObjectToName)">
                    <xsl:value-of select="DataTypeTransformer:GetObjectDisplayName($TagValue)" />
                  </xsl:when>
                  <xsl:when test="boolean($MonitorToName)">
                    <xsl:value-of select="DataTypeTransformer:GetMonitorDisplayName($TagValue)" />
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text>{</xsl:text>
                    <xsl:value-of select="$TagValue" />
                    <xsl:text>}</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:element>
      </xsl:template>

      <xsl:template name="TableToggleEntry">
        <xsl:param name="Title" />
        <xsl:param name="Origin" />
        <xsl:param name="Type" />
        <xsl:param name="Time" />
        <xsl:element name="tr">
          <xsl:attribute name="id">
            <xsl:value-of select="$Title" />
            <xsl:value-of select="$Origin" />
            <xsl:value-of select="$Type" />
            <xsl:value-of select="$Time" />
          </xsl:attribute>
          <xsl:element name="td">
            <xsl:attribute name="colSpan">2</xsl:attribute>
            <xsl:element name="p">
              <xsl:element name="b">
                <xsl:value-of select="$Title" />
              </xsl:element>
              <xsl:element name="a">
                <xsl:attribute name="onclick">
                  <xsl:text>ToggleDisplayMode('</xsl:text>
                  <xsl:value-of select="$Title" />
                  <xsl:value-of select="$Origin" />
                  <xsl:value-of select="$Type" />
                  <xsl:value-of select="$Time" />
                  <xsl:text>')</xsl:text>
                </xsl:attribute>
                <xsl:element name="u">
                  <xsl:value-of select="$ShowHideString" />
                </xsl:element>
              </xsl:element>
            </xsl:element>
          </xsl:element>
        </xsl:element>
      </xsl:template>

      <xsl:template name="Separator">
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="colSpan">2</xsl:attribute>
            <xsl:element name="hr" />
          </xsl:element>
        </xsl:element>
      </xsl:template>

      <xsl:template name="ScriptFunctions">
        <xsl:element name="script">
          

            function ToggleDisplayMode(node) 
            {
                var tableHeader = document.getElementById(node);
				if (null != tableHeader)
				{
					var row = tableHeader.nextSibling;
					while (row != null)
					{
						if ( row.style.display != "none" ) {
							row.style.display = "none";
						}
						else {
							row.style.display = "";
						}
						row = row.nextSibling;
					}
				}
            }

            
        </xsl:element>
      </xsl:template>

      <xsl:template name="CSS">
        <xsl:element name="style">
          .state .mainTable
          {
          width: 100%;
          border-style: none;
          border-collapse: collapse;
          }

          .state td
          {
          text-align: left;
          vertical-align: top;
          color: gray;
          }

          .state .boldColumn
          {
          text-align: left;
          vertical-align: top;
          font: bold;
          color: #696969;
          }

          .state .innerTable
          {
          width: 100%;
          border-style: none;
          border-collapse: collapse;
          }

          .state b
          {
          text-align: left;
          vertical-align: top;
          font: bold;
          color: #696969;
          }

          .state u
          {
          color: blue;
          }

        </xsl:element>
      </xsl:template>

    </xsl:stylesheet>
  </Transform>

  <!-- System.Health.ResetTaskData (marius)-->
  <Transform type="System.Health.ResetTaskData" locale="enu">
	<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">

      <xsl:variable name="DateAndTime"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">DateAndTime</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="ManagedEntityId"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">ManagedEntityId</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="MonitorId"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">MonitorId</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="Ctx"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">Ctx</xsl:with-param></xsl:call-template></xsl:variable>

      <!-- Returns the display string of the specified resouce -->
      <xsl:template name="GetDisplayString">
        <xsl:param name="Id" />
        <xsl:value-of select="DataTypeTransformer:GetStringResource('System.Health.Library', '31bf3856ad364e35', concat('System.Health.ResetTaskData.',$Id))" />
      </xsl:template>

      <xsl:template match="DataItem">
        <xsl:element name="div">
          <xsl:attribute name="align">left</xsl:attribute>
          <xsl:attribute name="valign">top</xsl:attribute>
          <xsl:attribute name="class">state</xsl:attribute>

          <xsl:call-template name="CSS" />

          <xsl:element name="table">
            <xsl:attribute name="class">mainTable</xsl:attribute>

            <xsl:call-template name="Tag">
              <xsl:with-param name="TagName" select="$DateAndTime" />
              <xsl:with-param name="TagValue" select="DataTypeTransformer:FormatDateTime(@time)" />
            </xsl:call-template>

            <xsl:apply-templates select="ManagedEntityId" />
            <xsl:apply-templates select="MonitorId" />

            <xsl:apply-templates select="Context" />
          </xsl:element>

        </xsl:element>
      </xsl:template>

      <xsl:template match="ManagedEntityId">
        <xsl:call-template name="Tag">
          <xsl:with-param name="TagName" select="$ManagedEntityId" />
          <xsl:with-param name="TagValue" select="." />
          <xsl:with-param name="ObjectToName" select="boolean(1)" />
        </xsl:call-template>
      </xsl:template>
      <xsl:template match="MonitorId">
        <xsl:call-template name="Tag">
          <xsl:with-param name="TagName" select="$MonitorId" />
          <xsl:with-param name="TagValue" select="." />
          <xsl:with-param name="MonitorToName" select="boolean(1)" />
        </xsl:call-template>
      </xsl:template>

      <xsl:template match="Context">
        <xsl:call-template name="Tag">
          <xsl:with-param name="TagName" select="$Ctx" />
          <xsl:with-param name="TagValue" select="." />
        </xsl:call-template>
      </xsl:template>

      <xsl:template name="Tag">
        <xsl:param name="TagName" />
        <xsl:param name="TagValue" />
        <xsl:param name="ObjectToName" />
        <xsl:param name="MonitorToName" />

        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="class">boldColumn</xsl:attribute>
            <xsl:value-of select="$TagName" />
          </xsl:element>
          <xsl:element name="td">
            <xsl:choose>
              <xsl:when test="boolean($ObjectToName)">
                <xsl:value-of select="DataTypeTransformer:GetObjectDisplayName($TagValue)" />
              </xsl:when>
              <xsl:when test="boolean($MonitorToName)">
                <xsl:value-of select="DataTypeTransformer:GetMonitorDisplayName($TagValue)" />
              </xsl:when>
              <xsl:otherwise>
                <xsl:text>{</xsl:text>
                <xsl:value-of select="$TagValue" />
                <xsl:text>}</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:element>
      </xsl:template>

      <xsl:template name="CSS">
        <xsl:element name="style">
          .state .mainTable
          {
          width: 100%;
          border-style: none;
          border-collapse: collapse;
          }

          .state td
          {
          text-align: left;
          vertical-align: top;
          color: gray;
          }

          .state .boldColumn
          {
          text-align: left;
          vertical-align: top;
          font: bold;
          color: #696969;
          }

          .state .innerTable
          {
          width: 100%;
          border-style: none;
          border-collapse: collapse;
          }

          .state b
          {
          text-align: left;
          vertical-align: top;
          font: bold;
          color: #696969;
          }

          .state u
          {
          color: blue;
          }

        </xsl:element>
      </xsl:template>

    </xsl:stylesheet>
  </Transform>

  <!-- MonitorTaskDataType (marius)-->
  <Transform type="MonitorTaskDataType" locale="enu">
	<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">

      <xsl:variable name="ShowHideString"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">ShowHideString</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="DateAndTime"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">DateAndTime</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="StateChange"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">StateChange</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="StateChangeDescription"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">StateChangeDescription</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="Diagnostic"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">Diagnostic</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="DiagnosticDescription"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">DiagnosticDescription</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="Recovery"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">Recovery</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="RecoveryDescription"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">RecoveryDescription</xsl:with-param></xsl:call-template></xsl:variable>

      <!-- Returns the display string of the specified resouce -->
      <xsl:template name="GetDisplayString">
        <xsl:param name="Id" />
        <xsl:value-of select="DataTypeTransformer:GetStringResource('System.Health.Library', '31bf3856ad364e35', concat('MonitorTaskDataType.',$Id))" />
      </xsl:template>

      <xsl:template match="DataItem">
        <xsl:element name="div">
          <xsl:attribute name="align">left</xsl:attribute>
          <xsl:attribute name="valign">top</xsl:attribute>
          <xsl:attribute name="class">monitorTask</xsl:attribute>

          <xsl:call-template name="CSS" />
          <xsl:call-template name="ScriptFunctions" />

          <xsl:element name="table">
            <xsl:attribute name="class">mainTable</xsl:attribute>

            <xsl:call-template name="TableEntry">
              <xsl:with-param name="Title" select="$DateAndTime" />
              <xsl:with-param name="Value" select="DataTypeTransformer:FormatDateTime(@time)" />
            </xsl:call-template>

            <xsl:apply-templates select="StateChange" />
            <xsl:apply-templates select="Diagnostic" />
            <xsl:apply-templates select="Recovery" />

          </xsl:element>
        </xsl:element>
      </xsl:template>

      <xsl:template match="StateChange">
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="colspan">2</xsl:attribute>
            <xsl:element name="table">
              <xsl:attribute name="class">innerTable</xsl:attribute>
              <xsl:call-template name="TableToggleEntry">
                <xsl:with-param name="Title" select="$StateChange" />
                <xsl:with-param name="TitleDesc" select="$StateChangeDescription" />
              </xsl:call-template>
              <xsl:call-template name="Inner">
              </xsl:call-template>
            </xsl:element>
          </xsl:element>
        </xsl:element>
      </xsl:template>

      <xsl:template match="Diagnostic">
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="colspan">2</xsl:attribute>
            <xsl:element name="table">
              <xsl:attribute name="class">innerTable</xsl:attribute>
              <xsl:call-template name="TableToggleEntry">
                <xsl:with-param name="Title" select="$Diagnostic" />
                <xsl:with-param name="TitleDesc" select="$DiagnosticDescription" />
              </xsl:call-template>
              <xsl:call-template name="Inner">
              </xsl:call-template>
            </xsl:element>
          </xsl:element>
        </xsl:element>
      </xsl:template>

      <xsl:template match="Recovery">
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="colspan">2</xsl:attribute>
            <xsl:element name="table">
              <xsl:attribute name="class">innerTable</xsl:attribute>
              <xsl:call-template name="TableToggleEntry">
                <xsl:with-param name="Title" select="$Recovery" />
                <xsl:with-param name="TitleDesc" select="$RecoveryDescription" />
              </xsl:call-template>
              <xsl:call-template name="Inner">
              </xsl:call-template>
            </xsl:element>
          </xsl:element>
        </xsl:element>
      </xsl:template>

      <xsl:template name="Inner">
        <xsl:variable name="InnerDataItem" select="./DataItem" />
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="colspan">2</xsl:attribute>
            <xsl:copy-of select="DataTypeTransformer:Transform($InnerDataItem)" />
          </xsl:element>
        </xsl:element>
      </xsl:template>

      <xsl:template name="TableToggleEntry">
        <xsl:param name="Title" />
        <xsl:param name="TitleDesc" />
        <xsl:element name="tr">
          <xsl:attribute name="id">
            <xsl:value-of select="$Title" />
          </xsl:attribute>
          <xsl:element name="td">

            <xsl:element name="p">
              <xsl:element name="b">
                <xsl:value-of select="$Title" />
              </xsl:element>
              <xsl:element name="a">
                <xsl:attribute name="onclick">
                  <xsl:text>ToggleDisplayMode('</xsl:text>
                  <xsl:value-of select="$Title" />
                  <xsl:text>')</xsl:text>
                </xsl:attribute>
                <xsl:element name="u">
                  <xsl:value-of select="$ShowHideString" />
                </xsl:element>
              </xsl:element>
            </xsl:element>
          </xsl:element>
          <xsl:element name="td">
            <xsl:value-of select="$TitleDesc" />
          </xsl:element>
        </xsl:element>
      </xsl:template>

      <xsl:template name="TableEntry">
        <xsl:param name="Title" />
        <xsl:param name="Value" />
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="class">boldColumn</xsl:attribute>
            <xsl:value-of select="$Title" />
          </xsl:element>
          <xsl:element name="td">
            <xsl:value-of select="$Value" />
          </xsl:element>
        </xsl:element>
      </xsl:template>

      <xsl:template name="ScriptFunctions">
        <xsl:element name="script">
          

            function ToggleDisplayMode(node) 
            {
                var tableHeader = document.getElementById(node);
				if (null != tableHeader)
				{
					var row = tableHeader.nextSibling;
					while (row != null)
					{
						if ( row.style.display != "none" ) {
							row.style.display = "none";
						}
						else {
							row.style.display = "";
						}
						row = row.nextSibling;
					}
				}
            }

            
        </xsl:element>
      </xsl:template>

      <xsl:template name="CSS">
        <xsl:element name="style">
          .monitorTask .mainTable
          {
          width: 100%;
          border-style: none;
          border-collapse: collapse;
          }

          .monitorTask td
          {
          text-align: left;
          vertical-align: top;
          color: gray;
          }

          .monitorTask .boldColumn
          {
          text-align: left;
          vertical-align: top;
          font: bold;
          color: #696969;
          }

          .monitorTask .innerTable
          {
          width: 100%;
          border:solid black 1.0pt;
          border-collapse: collapse;
          }

          .monitorTask b
          {
          text-align: left;
          vertical-align: top;
          font: bold;
          color: #696969;
          }

          .monitorTask u
          {
          color: blue;
          }

        </xsl:element>
      </xsl:template>

    </xsl:stylesheet>
  </Transform>

  <!-- WorkflowsReport (marius)-->
  <Transform type="WorkflowsReport" locale="enu">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">

      <xsl:variable name="DateAndTime"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">DateAndTime</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="StatusFailed"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">StatusFailed</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="StatusRunning"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">StatusRunning</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="Count"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">Count</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="Details"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">Details</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="ShowHideString"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">ShowHideString</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="InstanceId"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">InstanceId</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="InstanceName"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">InstanceName</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="Workflows"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">Workflows</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="WorkflowId"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">WorkflowId</xsl:with-param></xsl:call-template></xsl:variable>
      <xsl:variable name="WorkflowName"><xsl:call-template name="GetDisplayString"><xsl:with-param name="Id">WorkflowName</xsl:with-param></xsl:call-template></xsl:variable>

      <!-- Returns the display string of the specified resouce -->
      <xsl:template name="GetDisplayString">
        <xsl:param name="Id" />
        <xsl:value-of select="DataTypeTransformer:GetStringResource('System.Health.Library', '31bf3856ad364e35', concat('WorkflowsReport.',$Id))" />
      </xsl:template>

      <xsl:template match="DataItem">
        <xsl:element name="div">
          <xsl:attribute name="align">left</xsl:attribute>
          <xsl:attribute name="valign">top</xsl:attribute>
          <xsl:attribute name="class">workflow</xsl:attribute>

          <xsl:call-template name="CSS" />
          <xsl:call-template name="ScriptFunctions" />

          <xsl:element name="table">
            <xsl:attribute name="class">mainTable</xsl:attribute>

            <xsl:call-template name="TableEntry">
              <xsl:with-param name="Title" select="$DateAndTime" />
              <xsl:with-param name="TitleStyle" select="string(&quot;bold&quot;)" />
              <xsl:with-param name="Value" select="DataTypeTransformer:FormatDateTime(@time)" />
            </xsl:call-template>

            <xsl:choose>
              <xsl:when test="0 = ms:string-compare(string(Status), 'Failed')">
                <xsl:call-template name="TableEntry">
                  <xsl:with-param name="Title" select="$StatusFailed" />
                  <xsl:with-param name="TitleStyle" select="string(&quot;bold&quot;)" />
                  <xsl:with-param name="Value" select="Count" />
                </xsl:call-template>
              </xsl:when>
              <xsl:when test="0 = ms:string-compare(string(Status), 'Running')">
                <xsl:call-template name="TableEntry">
                  <xsl:with-param name="Title" select="$StatusRunning" />
                  <xsl:with-param name="TitleStyle" select="string(&quot;bold&quot;)" />
                  <xsl:with-param name="Value" select="Count" />
                </xsl:call-template>
              </xsl:when>
              <xsl:otherwise>
                <xsl:call-template name="TableEntry">
                  <xsl:with-param name="Title" select="$Count" />
                  <xsl:with-param name="TitleStyle" select="string(&quot;bold&quot;)" />
                  <xsl:with-param name="Value" select="Count" />
                </xsl:call-template>
              </xsl:otherwise>
            </xsl:choose>

            <!-- this deals with details -->
            <xsl:if test="boolean(Details)">

              <xsl:element name="tr">
                <xsl:element name="td">
                  <xsl:attribute name="colSpan">2</xsl:attribute>

                  <xsl:element name="table">
                    <xsl:attribute name="id">
                      <xsl:text>Details</xsl:text>
                    </xsl:attribute>
                    <xsl:attribute name="class">innerTable</xsl:attribute>

                    <xsl:call-template name="TableToggleEntry">
                      <xsl:with-param name="Id" select="$Details" />
                      <xsl:with-param name="Title" select="$Details" />
                    </xsl:call-template>

                    <xsl:element name="tr">
                      <xsl:element name="td">
                        <xsl:attribute name="colspan">2</xsl:attribute>

                        <xsl:for-each select="Details/Instance">
                          <xsl:element name="table">
                            <xsl:attribute name="id">
                              <xsl:text>Instance</xsl:text>
                              <xsl:value-of select="@Id" />
                            </xsl:attribute>
                            <xsl:attribute name="class">innerTable1</xsl:attribute>

                            <xsl:call-template name="TableEntry">
                              <xsl:with-param name="Title" select="$InstanceId" />
                              <xsl:with-param name="TitleStyle" select="string(&quot;bold&quot;)" />
                              <xsl:with-param name="Value" select="@Id" />
                            </xsl:call-template>
                            <xsl:call-template name="TableEntry">
                              <xsl:with-param name="Title" select="$InstanceName" />
                              <xsl:with-param name="TitleStyle" select="string(&quot;bold&quot;)" />
                              <xsl:with-param name="Value" select="DataTypeTransformer:GetObjectDisplayName(@Id)" />
                            </xsl:call-template>

                            <xsl:call-template name="TableToggleEntry">
                              <xsl:with-param name="Id" select="@Id" />
                              <xsl:with-param name="Title" select="$Workflows" />
                            </xsl:call-template>

                            <xsl:call-template name="TableEntry">
                              <xsl:with-param name="Title" select="$WorkflowId" />
                              <xsl:with-param name="Value" select="$WorkflowName" />
                              <xsl:with-param name="RowStyle" select="string(&quot;none&quot;)" />
                              <xsl:with-param name="TitleStyle" select="string(&quot;bold&quot;)" />
                              <xsl:with-param name="ValueStyle" select="string(&quot;bold&quot;)" />
                            </xsl:call-template>

                            <xsl:for-each select="Workflow">
                              <xsl:call-template name="TableEntry">
                                <xsl:with-param name="Title" select="." />
                                <xsl:with-param name="Value" select="DataTypeTransformer:GetWorkflowDisplayNameFromString(.)" />
                                <xsl:with-param name="RowStyle" select="string(&quot;none&quot;)" />
                              </xsl:call-template>
                            </xsl:for-each>

                          </xsl:element>
                        </xsl:for-each>
                      </xsl:element>

                    </xsl:element>

                  </xsl:element>

                </xsl:element>
              </xsl:element>

            </xsl:if>
          </xsl:element>
        </xsl:element>
      </xsl:template>

      <xsl:template name="TableToggleEntry">
        <xsl:param name="Id" />
        <xsl:param name="Title" />
        <xsl:element name="tr">
          <xsl:attribute name="id">
            <xsl:value-of select="$Id" />
          </xsl:attribute>
          <xsl:element name="td">
            <xsl:attribute name="colspan">2</xsl:attribute>

            <xsl:element name="p">
              <xsl:element name="b">
                <xsl:value-of select="$Title" />
              </xsl:element>
              <xsl:element name="a">
                <xsl:attribute name="onclick">
                  <xsl:text>ToggleDisplayMode('</xsl:text>
                  <xsl:value-of select="$Id" />
                  <xsl:text>')</xsl:text>
                </xsl:attribute>
                <xsl:element name="u">
                  <xsl:value-of select="$ShowHideString" />
                </xsl:element>
              </xsl:element>
            </xsl:element>
          </xsl:element>
        </xsl:element>
      </xsl:template>

      <xsl:template name="TableEntry">
        <xsl:param name="Title" />
        <xsl:param name="Value" />
        <xsl:param name="RowStyle" />
        <xsl:param name="TitleStyle" />
        <xsl:param name="ValueStyle" />
        <xsl:element name="tr">
          <xsl:if test="string($RowStyle)">
            <xsl:attribute name="style">
              <xsl:text>display:</xsl:text>
              <xsl:value-of select="string($RowStyle)" />
            </xsl:attribute>
          </xsl:if>
          <xsl:element name="td">
            <xsl:choose>
              <xsl:when test="string($TitleStyle)">
                <xsl:attribute name="class">boldColumn</xsl:attribute>
              </xsl:when>
            </xsl:choose>

            <xsl:value-of select="$Title" />
          </xsl:element>
          <xsl:element name="td">
            <xsl:choose>
              <xsl:when test="string($ValueStyle)">
                <xsl:attribute name="class">boldColumn</xsl:attribute>
              </xsl:when>
            </xsl:choose>

            <xsl:value-of select="$Value" />
          </xsl:element>
        </xsl:element>
      </xsl:template>

      <xsl:template name="ScriptFunctions">
        <xsl:element name="script">
          

            function ToggleDisplayMode(node) 
            {
                var tableHeader = document.getElementById(node);
				if (null != tableHeader)
				{
					var row = tableHeader.nextSibling;
					while (row != null)
					{
						if ( row.style.display != "none" ) {
							row.style.display = "none";
						}
						else {
							row.style.display = "";
						}
						row = row.nextSibling;
					}
				}
            }

            
        </xsl:element>
      </xsl:template>

      <xsl:template name="CSS">
        <xsl:element name="style">
          .workflow .mainTable
          {
          width: 100%;
          border-style: none;
          border-collapse: collapse;
          }

          .workflow td
          {
          text-align: left;
          vertical-align: top;
          color: gray;
          }

          .workflow .boldColumn
          {
          text-align: left;
          vertical-align: top;
          font: bold;
          color: #696969;
          }

          .workflow .innerTable
          {
          width: 100%;
          border-style: none;
          border-collapse: collapse;
          }

          .workflow .innerTable1
          {
          width: 100%;
          border:solid black 1.0pt;
          border-collapse: collapse;
          }

          .workflow b
          {
          text-align: left;
          vertical-align: top;
          font: bold;
          color: #696969;
          }

          .workflow u
          {
          color: blue;
          }

        </xsl:element>
      </xsl:template>

    </xsl:stylesheet>
  </Transform>

  <!-- System.TriggerData (marius)-->
  <Transform type="System.TriggerData" locale="enu">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">

      <xsl:variable name="DateAndTime">
        <xsl:call-template name="GetDisplayString">
          <xsl:with-param name="Id">DateAndTime</xsl:with-param>
        </xsl:call-template>
      </xsl:variable>

      <!-- Returns the display string of the specified resouce -->
      <xsl:template name="GetDisplayString">
        <xsl:param name="Id" />
        <xsl:value-of select="DataTypeTransformer:GetStringResource('System.Library', '31bf3856ad364e35', concat('System.TriggerData.',$Id))" />
      </xsl:template>

      <xsl:template match="DataItem">
        <xsl:element name="div">
          <xsl:attribute name="align">left</xsl:attribute>
          <xsl:attribute name="class">trigger</xsl:attribute>

          <xsl:call-template name="CSS" />
          <xsl:element name="table">
            <xsl:attribute name="class">mainTable</xsl:attribute>

            <xsl:apply-templates select="@time" />
          </xsl:element>
        </xsl:element>
      </xsl:template>

      <xsl:template match="@time">
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="class">boldColumn</xsl:attribute>
            <xsl:value-of select="$DateAndTime" />
          </xsl:element>
          <xsl:element name="td">
            <xsl:value-of select="DataTypeTransformer:FormatDateTime(.)" />
          </xsl:element>
        </xsl:element>
      </xsl:template>

      <xsl:template name="CSS">
        <xsl:element name="style">
          .trigger .mainTable
          {
          width: 100%;
          border-style: none;
          border-collapse: collapse;
          }

          .trigger .mainTable td
          {
          text-align: left;
          vertical-align: top;
          color: gray;
          }

          .trigger .mainTable .boldColumn
          {
          text-align: left;
          vertical-align: top;
          font: bold;
          color: #696969;
          }

        </xsl:element>
      </xsl:template>

    </xsl:stylesheet>
  </Transform>

  <!-- System.Typed.Data (marius)-->
  <Transform type="System.Typed.Data" locale="enu">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">

      <xsl:variable name="DateAndTime">
        <xsl:call-template name="GetDisplayString">
          <xsl:with-param name="Id">DateAndTime</xsl:with-param>
        </xsl:call-template>
      </xsl:variable>
      <xsl:variable name="KeyProperty">
        <xsl:call-template name="GetDisplayString">
          <xsl:with-param name="Id">KeyProperty</xsl:with-param>
        </xsl:call-template>
      </xsl:variable>
      <xsl:variable name="KeyPropertyValue">
        <xsl:call-template name="GetDisplayString">
          <xsl:with-param name="Id">KeyPropertyValue</xsl:with-param>
        </xsl:call-template>
      </xsl:variable>
      <xsl:variable name="ManagedEntityType">
        <xsl:call-template name="GetDisplayString">
          <xsl:with-param name="Id">ManagedEntityType</xsl:with-param>
        </xsl:call-template>
      </xsl:variable>
      <xsl:variable name="ManagedEntityId">
        <xsl:call-template name="GetDisplayString">
          <xsl:with-param name="Id">ManagedEntityId</xsl:with-param>
        </xsl:call-template>
      </xsl:variable>

      <!-- Returns the display string of the specified resouce -->
      <xsl:template name="GetDisplayString">
        <xsl:param name="Id" />
        <xsl:value-of select="DataTypeTransformer:GetStringResource('System.Library', '31bf3856ad364e35', concat('System.Typed.Data.',$Id))" />
      </xsl:template>

      <xsl:template match="DataItem">
        <xsl:element name="div">
          <xsl:attribute name="align">left</xsl:attribute>
          <xsl:attribute name="valign">top</xsl:attribute>
          <xsl:attribute name="class">typed</xsl:attribute>

          <xsl:call-template name="CSS" />

          <xsl:element name="table">
            <xsl:attribute name="class">mainTable</xsl:attribute>

            <xsl:call-template name="Tag">
              <xsl:with-param name="TagName" select="$DateAndTime" />
              <xsl:with-param name="TagValue" select="DataTypeTransformer:FormatDateTime(@time)" />
            </xsl:call-template>

            <xsl:apply-templates select="ManagedEntityType" />
            <xsl:apply-templates select="ManagedEntityId" />

            <xsl:element name="valuesTable">
              <xsl:attribute name="class">mainTable</xsl:attribute>

              <xsl:element name="tr">
                <xsl:element name="td">
                  <xsl:attribute name="class">boldColumn</xsl:attribute>
                  <xsl:value-of select="$KeyProperty" />
                </xsl:element>
                <xsl:element name="td">
                  <xsl:attribute name="class">boldColumn</xsl:attribute>
                  <xsl:value-of select="$KeyPropertyValue" />
                </xsl:element>
              </xsl:element>

              <xsl:apply-templates select="KeyProperties" />
            </xsl:element>

          </xsl:element>

        </xsl:element>
      </xsl:template>

      <xsl:template match="ManagedEntityType">
        <xsl:call-template name="Tag">
          <xsl:with-param name="TagName" select="$ManagedEntityType" />
          <xsl:with-param name="TagValue" select="DataTypeTransformer:GetClassDisplayName(.)" />
        </xsl:call-template>
      </xsl:template>
      <xsl:template match="ManagedEntityId">
        <xsl:call-template name="Tag">
          <xsl:with-param name="TagName" select="$ManagedEntityId" />
          <xsl:with-param name="TagValue" select="DataTypeTransformer:GetObjectDisplayName(.)" />
        </xsl:call-template>
      </xsl:template>

      <xsl:template match="KeyProperties">
        <xsl:for-each select="KeyProperty">
          <xsl:call-template name="Tag">
            <xsl:with-param name="TagName" select="DataTypeTransformer:GetPropertyDisplayName(../../ManagedEntityType, PropertyId)" />
            <xsl:with-param name="TagValue" select="Value" />
            <xsl:with-param name="NormalName" select="boolean(1)" />
          </xsl:call-template>
        </xsl:for-each>
      </xsl:template>

      <xsl:template name="Tag">
        <xsl:param name="TagName" />
        <xsl:param name="TagValue" />
        <xsl:param name="NormalName" />

        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:choose>
              <xsl:when test="not(boolean($NormalName))">
                <xsl:attribute name="class">boldColumn</xsl:attribute>
              </xsl:when>
            </xsl:choose>
            <xsl:value-of select="$TagName" />
          </xsl:element>
          <xsl:element name="td">
            <xsl:value-of select="$TagValue" />
          </xsl:element>
        </xsl:element>
      </xsl:template>

      <xsl:template name="CSS">
        <xsl:element name="style">
          .typed .mainTable
          {
          width: 100%;
          border-style: none;
          border-collapse: collapse;
          }

          .typed .mainTable td
          {
          text-align: left;
          vertical-align: top;
          color: gray;
          }

          .typed .mainTable .boldColumn
          {
          text-align: left;
          vertical-align: top;
          font: bold;
          color: #696969;
          }

        </xsl:element>
      </xsl:template>

    </xsl:stylesheet>
  </Transform>

  <!-- System.Availability.StateData (marius)-->
  <Transform type="System.Availability.StateData" locale="enu">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">

      <!-- Returns the display string of the specified resouce -->
      <xsl:template name="GetDisplayString">
        <xsl:param name="Id" />
        <xsl:value-of select="DataTypeTransformer:GetStringResource('System.Library', '31bf3856ad364e35', concat('System.Availability.StateData.',$Id))" />
      </xsl:template>

      <xsl:variable name="DateAndTime">
        <xsl:call-template name="GetDisplayString">
          <xsl:with-param name="Id">DateAndTime</xsl:with-param>
        </xsl:call-template>
      </xsl:variable>
      <xsl:variable name="HealthServiceId">
        <xsl:call-template name="GetDisplayString">
          <xsl:with-param name="Id">HealthServiceId</xsl:with-param>
        </xsl:call-template>
      </xsl:variable>
      <xsl:variable name="HostName">
        <xsl:call-template name="GetDisplayString">
          <xsl:with-param name="Id">HostName</xsl:with-param>
        </xsl:call-template>
      </xsl:variable>

      <xsl:template match="DataItem">
        <xsl:element name="div">
          <xsl:attribute name="align">left</xsl:attribute>
          <xsl:attribute name="valign">top</xsl:attribute>
          <xsl:attribute name="class">typed</xsl:attribute>

          <xsl:call-template name="CSS" />

          <xsl:element name="table">
            <xsl:attribute name="class">mainTable</xsl:attribute>

            <xsl:call-template name="Tag">
              <xsl:with-param name="TagName" select="$DateAndTime" />
              <xsl:with-param name="TagValue" select="DataTypeTransformer:FormatDateTime(@time)" />
            </xsl:call-template>

            <xsl:apply-templates select="HealthServiceId" />
            <xsl:apply-templates select="HostName" />
            <xsl:apply-templates select="Reachability" />

          </xsl:element>

        </xsl:element>
      </xsl:template>

      <xsl:template match="HealthServiceId">
        <xsl:call-template name="Tag">
          <xsl:with-param name="TagName" select="$HealthServiceId" />
          <xsl:with-param name="TagValue" select="." />
        </xsl:call-template>
      </xsl:template>

      <xsl:template match="HostName">
        <xsl:call-template name="Tag">
          <xsl:with-param name="TagName" select="$HostName" />
          <xsl:with-param name="TagValue" select="." />
        </xsl:call-template>
      </xsl:template>

      <xsl:template match="Reachability">

        <xsl:call-template name="Separator" />

        <xsl:choose>
          <xsl:when test="@ThruServer='true'">
            <xsl:choose>
              <xsl:when test="number(State)=0">
                <xsl:variable name="ServerAvailableNot">
                  <xsl:call-template name="GetDisplayString">
                    <xsl:with-param name="Id">ServerAvailableNot</xsl:with-param>
                  </xsl:call-template>
                </xsl:variable>
                <xsl:call-template name="Tag">
                  <xsl:with-param name="TagName" select="$ServerAvailableNot" />
                  <xsl:with-param name="TagValue" select="ServerHostName" />
                  <xsl:with-param name="NormalName" select="boolean(1)" />
                </xsl:call-template>
                <xsl:call-template name="UnHealthyReasons" />
              </xsl:when>
              <xsl:when test="number(State)=1">
                <xsl:choose>
                  <xsl:when test="number(Reasons/Reason)=0">
                    <xsl:variable name="ServerAvailableHealthy">
                      <xsl:call-template name="GetDisplayString">
                        <xsl:with-param name="Id">ServerAvailableHealthy</xsl:with-param>
                      </xsl:call-template>
                    </xsl:variable>
                    <xsl:call-template name="Tag">
                      <xsl:with-param name="TagName" select="$ServerAvailableHealthy" />
                      <xsl:with-param name="TagValue" select="ServerHostName" />
                      <xsl:with-param name="NormalName" select="boolean(1)" />
                    </xsl:call-template>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:variable name="ServerAvailableUnHealthy">
                      <xsl:call-template name="GetDisplayString">
                        <xsl:with-param name="Id">ServerAvailableUnHealthy</xsl:with-param>
                      </xsl:call-template>
                    </xsl:variable>
                    <xsl:call-template name="Tag">
                      <xsl:with-param name="TagName" select="$ServerAvailableUnHealthy" />
                      <xsl:with-param name="TagValue" select="ServerHostName" />
                      <xsl:with-param name="NormalName" select="boolean(1)" />
                    </xsl:call-template>
                    <xsl:call-template name="UnHealthyReasons" />
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <xsl:choose>
              <xsl:when test="number(State)=-1">
                <xsl:variable name="AvailableUnknown">
                  <xsl:call-template name="GetDisplayString">
                    <xsl:with-param name="Id">AvailableUnknown</xsl:with-param>
                  </xsl:call-template>
                </xsl:variable>
                <xsl:call-template name="TagSingle">
                  <xsl:with-param name="TagValue" select="$AvailableUnknown" />
                </xsl:call-template>
              </xsl:when>
              <xsl:when test="number(State)=0">
                <xsl:variable name="AvailableNot">
                  <xsl:call-template name="GetDisplayString">
                    <xsl:with-param name="Id">AvailableNot</xsl:with-param>
                  </xsl:call-template>
                </xsl:variable>
                <xsl:call-template name="TagSingle">
                  <xsl:with-param name="TagValue" select="$AvailableNot" />
                </xsl:call-template>
                <xsl:call-template name="UnHealthyReasons" />
              </xsl:when>
              <xsl:when test="number(State)=1">
                <xsl:choose>
                  <xsl:when test="number(Reasons/Reason)=0">
                    <xsl:variable name="AvailableHealthy">
                      <xsl:call-template name="GetDisplayString">
                        <xsl:with-param name="Id">AvailableHealthy</xsl:with-param>
                      </xsl:call-template>
                    </xsl:variable>
                    <xsl:call-template name="TagSingle">
                      <xsl:with-param name="TagValue" select="$AvailableHealthy" />
                    </xsl:call-template>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:variable name="AvailableUnHealthy">
                      <xsl:call-template name="GetDisplayString">
                        <xsl:with-param name="Id">AvailableUnHealthy</xsl:with-param>
                      </xsl:call-template>
                    </xsl:variable>
                    <xsl:call-template name="TagSingle">
                      <xsl:with-param name="TagValue" select="$AvailableUnHealthy" />
                    </xsl:call-template>
                    <xsl:call-template name="UnHealthyReasons" />
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:when test="number(State)=2">
                <xsl:variable name="AvailableDisabled">
                  <xsl:call-template name="GetDisplayString">
                    <xsl:with-param name="Id">AvailableDisabled</xsl:with-param>
                  </xsl:call-template>
                </xsl:variable>
                <xsl:call-template name="TagSingle">
                  <xsl:with-param name="TagValue" select="$AvailableDisabled" />
                </xsl:call-template>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>

        <xsl:call-template name="Separator" />

      </xsl:template>

      <xsl:template name="UnHealthyReasons">

        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="colSpan">2</xsl:attribute>
            <xsl:element name="table">
              <xsl:attribute name="class">innerTable</xsl:attribute>

              <xsl:variable name="Reasons">
                <xsl:call-template name="GetDisplayString">
                  <xsl:with-param name="Id">Reasons</xsl:with-param>
                </xsl:call-template>
              </xsl:variable>

              <xsl:call-template name="Separator" />

              <xsl:call-template name="TagSingle">
                <xsl:with-param name="TagValue" select="$Reasons" />
                <xsl:with-param name="BoldValue" select="boolean(1)" />
              </xsl:call-template>

              <xsl:variable name="ReasonString0">
                <xsl:call-template name="GetDisplayString">
                  <xsl:with-param name="Id">Reasons.0.HeartBeatMissing</xsl:with-param>
                </xsl:call-template>
              </xsl:variable>

              <xsl:variable name="ReasonString17">
                <xsl:call-template name="GetDisplayString">
                  <xsl:with-param name="Id">Reasons.17.ConnectorServicePaused</xsl:with-param>
                </xsl:call-template>
              </xsl:variable>
              <xsl:variable name="ReasonString25">
                <xsl:call-template name="GetDisplayString">
                  <xsl:with-param name="Id">Reasons.25.ActionAccountBusted</xsl:with-param>
                </xsl:call-template>
              </xsl:variable>
              <xsl:variable name="ReasonString41">
                <xsl:call-template name="GetDisplayString">
                  <xsl:with-param name="Id">Reasons.41.ConfigDataHandlingBusted</xsl:with-param>
                </xsl:call-template>
              </xsl:variable>
              <xsl:variable name="ReasonString42">
                <xsl:call-template name="GetDisplayString">
                  <xsl:with-param name="Id">Reasons.42.ConfigDataLoadingBusted</xsl:with-param>
                </xsl:call-template>
              </xsl:variable>
              <xsl:variable name="ReasonString43">
                <xsl:call-template name="GetDisplayString">
                  <xsl:with-param name="Id">Reasons.43.SystemWorkflowsBusted</xsl:with-param>
                </xsl:call-template>
              </xsl:variable>
              <xsl:variable name="ReasonString49">
                <xsl:call-template name="GetDisplayString">
                  <xsl:with-param name="Id">Reasons.49.EntityStateCollectionStalled</xsl:with-param>
                </xsl:call-template>
              </xsl:variable>
              <xsl:variable name="ReasonString50">
                <xsl:call-template name="GetDisplayString">
                  <xsl:with-param name="Id">Reasons.50.MonitorStateCollectionStalled</xsl:with-param>
                </xsl:call-template>
              </xsl:variable>
              <xsl:variable name="ReasonString51">
                <xsl:call-template name="GetDisplayString">
                  <xsl:with-param name="Id">Reasons.51.AlertCollectionStalled</xsl:with-param>
                </xsl:call-template>
              </xsl:variable>
              <xsl:variable name="ReasonString97">
                <xsl:call-template name="GetDisplayString">
                  <xsl:with-param name="Id">Reasons.97.SolutionEventSourceNotOpen</xsl:with-param>
                </xsl:call-template>
              </xsl:variable>
              <xsl:variable name="ReasonString98">
                <xsl:call-template name="GetDisplayString">
                  <xsl:with-param name="Id">Reasons.98.CannotParseConfig</xsl:with-param>
                </xsl:call-template>
              </xsl:variable>
              <xsl:variable name="ReasonStringUnk">
                <xsl:call-template name="GetDisplayString">
                  <xsl:with-param name="Id">Reasons.UnknownOffset</xsl:with-param>
                </xsl:call-template>
              </xsl:variable>

              <xsl:choose>
                <xsl:when test="Reasons/Reason">
                  <xsl:for-each select="Reasons/Reason">
                    <xsl:choose>
                      <xsl:when test="number(.)=17">
                        <xsl:call-template name="ReasonRow">
                          <xsl:with-param name="ReasonValue" select="." />
                          <xsl:with-param name="ReasonString" select="$ReasonString17" />
                        </xsl:call-template>
                      </xsl:when>
                      <xsl:when test="number(.)=25">
                        <xsl:call-template name="ReasonRow">
                          <xsl:with-param name="ReasonValue" select="." />
                          <xsl:with-param name="ReasonString" select="$ReasonString25" />
                        </xsl:call-template>
                      </xsl:when>
                      <xsl:when test="number(.)=41">
                        <xsl:call-template name="ReasonRow">
                          <xsl:with-param name="ReasonValue" select="." />
                          <xsl:with-param name="ReasonString" select="$ReasonString41" />
                        </xsl:call-template>
                      </xsl:when>
                      <xsl:when test="number(.)=42">
                        <xsl:call-template name="ReasonRow">
                          <xsl:with-param name="ReasonValue" select="." />
                          <xsl:with-param name="ReasonString" select="$ReasonString42" />
                        </xsl:call-template>
                      </xsl:when>
                      <xsl:when test="number(.)=43">
                        <xsl:call-template name="ReasonRow">
                          <xsl:with-param name="ReasonValue" select="." />
                          <xsl:with-param name="ReasonString" select="$ReasonString43" />
                        </xsl:call-template>
                      </xsl:when>
                      <xsl:when test="number(.)=49">
                        <xsl:call-template name="ReasonRow">
                          <xsl:with-param name="ReasonValue" select="." />
                          <xsl:with-param name="ReasonString" select="$ReasonString49" />
                        </xsl:call-template>
                      </xsl:when>
                      <xsl:when test="number(.)=50">
                        <xsl:call-template name="ReasonRow">
                          <xsl:with-param name="ReasonValue" select="." />
                          <xsl:with-param name="ReasonString" select="$ReasonString50" />
                        </xsl:call-template>
                      </xsl:when>
                      <xsl:when test="number(.)=51">
                        <xsl:call-template name="ReasonRow">
                          <xsl:with-param name="ReasonValue" select="." />
                          <xsl:with-param name="ReasonString" select="$ReasonString51" />
                        </xsl:call-template>
                      </xsl:when>
                      <xsl:when test="number(.)=97">
                        <xsl:call-template name="ReasonRow">
                          <xsl:with-param name="ReasonValue" select="." />
                          <xsl:with-param name="ReasonString" select="$ReasonString97" />
                        </xsl:call-template>
                      </xsl:when>
                      <xsl:when test="number(.)=98">
                        <xsl:call-template name="ReasonRow">
                          <xsl:with-param name="ReasonValue" select="." />
                          <xsl:with-param name="ReasonString" select="$ReasonString98" />
                        </xsl:call-template>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:call-template name="ReasonRow">
                          <xsl:with-param name="ReasonValue" select="." />
                          <xsl:with-param name="ReasonString" select="$ReasonStringUnk" />
                        </xsl:call-template>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:for-each>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:call-template name="ReasonRow">
                    <xsl:with-param name="ReasonValue" select="0" />
                    <xsl:with-param name="ReasonString" select="$ReasonString0" />
                  </xsl:call-template>
                </xsl:otherwise>
              </xsl:choose>

            </xsl:element>
          </xsl:element>
        </xsl:element>

      </xsl:template>

      <xsl:template name="ReasonRow">
        <xsl:param name="ReasonValue" />
        <xsl:param name="ReasonString" />
        <xsl:call-template name="Tag">
          <xsl:with-param name="TagName" select="number($ReasonValue)" />
          <xsl:with-param name="TagValue" select="$ReasonString" />
          <xsl:with-param name="NormalName" select="boolean(1)" />
        </xsl:call-template>
      </xsl:template>

      <xsl:template name="Separator">
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="colSpan">2</xsl:attribute>
            <xsl:element name="hr" />
          </xsl:element>
        </xsl:element>
      </xsl:template>

      <xsl:template name="Tag">
        <xsl:param name="TagName" />
        <xsl:param name="TagValue" />
        <xsl:param name="NormalName" />

        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:choose>
              <xsl:when test="not(boolean($NormalName))">
                <xsl:attribute name="class">boldColumn</xsl:attribute>
              </xsl:when>
            </xsl:choose>
            <xsl:value-of select="$TagName" />
          </xsl:element>
          <xsl:element name="td">
            <xsl:value-of select="$TagValue" />
          </xsl:element>
        </xsl:element>
      </xsl:template>

      <xsl:template name="TagSingle">
        <xsl:param name="TagValue" />
        <xsl:param name="BoldValue" />

        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="colSpan">2</xsl:attribute>
            <xsl:choose>
              <xsl:when test="boolean($BoldValue)">
                <xsl:attribute name="class">boldColumn</xsl:attribute>
              </xsl:when>
            </xsl:choose>
            <xsl:value-of select="$TagValue" />
          </xsl:element>
        </xsl:element>
      </xsl:template>

      <xsl:template name="CSS">
        <xsl:element name="style">
          .typed .mainTable
          {
          width: 100%;
          border-style: none;
          border-collapse: collapse;
          }

          .typed .mainTable td
          {
          text-align: left;
          vertical-align: top;
          color: gray;
          }

          .typed .mainTable .boldColumn
          {
          text-align: left;
          vertical-align: top;
          font: bold;
          color: #696969;
          }

          .typed .innerTable
          {
          width: 100%;
          border-style: none;
          border-collapse: collapse;
          }

          .typed .innerTable td
          {
          text-align: left;
          vertical-align: top;
          color: gray;
          }

          .typed .innerTable .boldColumn
          {
          text-align: left;
          vertical-align: top;
          font: bold;
          color: #696969;
          }

        </xsl:element>
      </xsl:template>

    </xsl:stylesheet>
  </Transform>

  <!-- Microsoft.SystemCenter.OperationsManager.Availability.ContainerData (marius)-->
  <Transform type="Microsoft.SystemCenter.OperationsManager.Availability.ContainerData" locale="enu">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">

      <!-- Returns the display string of the specified resouce -->
      <xsl:template name="GetDisplayString">
        <xsl:param name="Id" />
        <xsl:value-of select="DataTypeTransformer:GetStringResource('Microsoft.SystemCenter.Internal', '31bf3856ad364e35', concat('Microsoft.SystemCenter.OperationsManager.Availability.ContainerData.',$Id))" />
      </xsl:template>

      <xsl:variable name="DateAndTime">
        <xsl:call-template name="GetDisplayString">
          <xsl:with-param name="Id">DateAndTime</xsl:with-param>
        </xsl:call-template>
      </xsl:variable>

      <xsl:variable name="States">
        <xsl:call-template name="GetDisplayString">
          <xsl:with-param name="Id">States</xsl:with-param>
        </xsl:call-template>
      </xsl:variable>

      <xsl:template match="DataItem">
        <xsl:element name="div">
          <xsl:attribute name="align">left</xsl:attribute>
          <xsl:attribute name="valign">top</xsl:attribute>
          <xsl:attribute name="class">availabilityContainer</xsl:attribute>

          <xsl:call-template name="CSS" />

          <xsl:element name="table">
            <xsl:attribute name="class">mainTable</xsl:attribute>

            <xsl:call-template name="TableEntry">
              <xsl:with-param name="Title" select="$States" />
            </xsl:call-template>
            <xsl:call-template name="TableEntry">
              <xsl:with-param name="Title" select="$DateAndTime" />
              <xsl:with-param name="Value" select="DataTypeTransformer:FormatDateTime(@time)" />
            </xsl:call-template>

            <xsl:apply-templates select="States" />

          </xsl:element>
        </xsl:element>
      </xsl:template>

      <xsl:template match="States">
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="colspan">2</xsl:attribute>
            <xsl:element name="table">
              <xsl:attribute name="class">innerTable</xsl:attribute>
              <xsl:apply-templates select="DataItem[@type='System.Availability.StateData']" />
            </xsl:element>
          </xsl:element>
        </xsl:element>
      </xsl:template>

      <xsl:template match="DataItem[@type='System.Availability.StateData']">
        <xsl:variable name="InnerDataItem" select="." />
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="colspan">2</xsl:attribute>
            <xsl:copy-of select="DataTypeTransformer:Transform($InnerDataItem)" />
          </xsl:element>
        </xsl:element>
      </xsl:template>

      <xsl:template name="TableEntry">
        <xsl:param name="Title" />
        <xsl:param name="Value" />
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="class">boldColumn</xsl:attribute>
            <xsl:value-of select="$Title" />
          </xsl:element>
          <xsl:element name="td">
            <xsl:value-of select="$Value" />
          </xsl:element>
        </xsl:element>
      </xsl:template>

      <xsl:template name="CSS">
        <xsl:element name="style">
          .availabilityContainer .mainTable
          {
          width: 100%;
          border-style: none;
          border-collapse: collapse;
          }

          .availabilityContainer td
          {
          text-align: left;
          vertical-align: top;
          color: gray;
          }

          .availabilityContainer .boldColumn
          {
          text-align: left;
          vertical-align: top;
          font: bold;
          color: #696969;
          }

          .availabilityContainer .innerTable
          {
          width: 100%;
          border:solid black 1.0pt;
          border-collapse: collapse;
          }

          .availabilityContainer b
          {
          text-align: left;
          vertical-align: top;
          font: bold;
          color: #696969;
          }

        </xsl:element>
      </xsl:template>
    </xsl:stylesheet>
  </Transform>

  <!-- Microsoft.SystemCenter.OperationsManager.RoutingData (marius)-->
  <Transform type="Microsoft.SystemCenter.OperationsManager.RoutingData" locale="enu">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">

  <!-- Returns the display string of the specified resouce -->
  <xsl:template name="GetDisplayString">
    <xsl:param name="Id" />
    <xsl:value-of select="DataTypeTransformer:GetStringResource('Microsoft.SystemCenter.Internal', '31bf3856ad364e35', concat('Microsoft.SystemCenter.OperationsManager.RoutingData.',$Id))" />
  </xsl:template>

  <!-- Resources -->
  <xsl:variable name="ShowHideString">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ShowHideString</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="DateAndTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DateAndTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="HealthServiceId">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">HealthServiceId</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="NextDestinations">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">NextDestinations</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="TargetID">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TargetID</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="TargetName">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TargetName</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Cost">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Cost</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="DefaultRoute">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DefaultRoute</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ParkHoldString">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ParkHoldString</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="RootConnector">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">RootConnector</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:template name="Separator">
    <xsl:param name="RowStyle" />
    <xsl:element name="tr">
      <xsl:if test="string($RowStyle)">
        <xsl:attribute name="style">
          <xsl:text>display:</xsl:text>
          <xsl:value-of select="string($RowStyle)" />
        </xsl:attribute>
      </xsl:if>
      <xsl:element name="td">
        <xsl:attribute name="colSpan">3</xsl:attribute>
        <xsl:element name="hr" />
      </xsl:element>
    </xsl:element>
  </xsl:template>

  <xsl:template name="TableColumnEntry">
    <xsl:param name="Id" />
    <xsl:param name="ColumnSpan" />
    <xsl:param name="ColumnStyle" />
    <xsl:param name="ColumnValue" />
    <xsl:if test="string($ColumnValue)">
      <xsl:element name="td">
        <xsl:if test="string($ColumnSpan)">
          <xsl:attribute name="colspan">
            <xsl:value-of select="string($ColumnSpan)" />
          </xsl:attribute>
        </xsl:if>
        <xsl:if test="string($ColumnStyle)='bold'">
          <xsl:attribute name="class">boldColumn</xsl:attribute>
        </xsl:if>
        <xsl:choose>
          <xsl:when test="string($Id)">
            <xsl:element name="p">
              <xsl:element name="a">
                <xsl:attribute name="onclick">
                  <xsl:text>ToggleDisplayMode('</xsl:text>
                  <xsl:value-of select="$Id" />
                  <xsl:text>')</xsl:text>
                </xsl:attribute>
                <xsl:element name="u">
                  <xsl:value-of select="$ColumnValue" />
                </xsl:element>
              </xsl:element>
            </xsl:element>
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="$ColumnValue" />
          </xsl:otherwise>
        </xsl:choose>
      </xsl:element>
    </xsl:if>
  </xsl:template>

  <xsl:template name="TableRow">
    <xsl:param name="Id" />
    <xsl:param name="RowStyle" />
    <xsl:param name="Column1Span" />
    <xsl:param name="Column1Style" />
    <xsl:param name="Column1Value" />
    <xsl:param name="Column2Span" />
    <xsl:param name="Column2Style" />
    <xsl:param name="Column2Value" />
    <xsl:param name="Column3Span" />
    <xsl:param name="Column3Style" />
    <xsl:param name="Column3Value" />
    <xsl:element name="tr">
      <xsl:if test="string($RowStyle)">
        <xsl:attribute name="style">
          <xsl:text>display:</xsl:text>
          <xsl:value-of select="string($RowStyle)" />
        </xsl:attribute>
      </xsl:if>
      <xsl:if test="string($Id)">
        <xsl:attribute name="id">
          <xsl:value-of select="$Id" />
        </xsl:attribute>
      </xsl:if>
      <xsl:call-template name="TableColumnEntry">
        <xsl:with-param name="Id" select="$Id" />
        <xsl:with-param name="ColumnSpan" select="$Column1Span" />
        <xsl:with-param name="ColumnStyle" select="$Column1Style" />
        <xsl:with-param name="ColumnValue" select="$Column1Value" />
      </xsl:call-template>
      <xsl:call-template name="TableColumnEntry">
        <xsl:with-param name="ColumnSpan" select="$Column2Span" />
        <xsl:with-param name="ColumnStyle" select="$Column2Style" />
        <xsl:with-param name="ColumnValue" select="$Column2Value" />
      </xsl:call-template>
      <xsl:call-template name="TableColumnEntry">
        <xsl:with-param name="ColumnSpan" select="$Column3Span" />
        <xsl:with-param name="ColumnStyle" select="$Column3Style" />
        <xsl:with-param name="ColumnValue" select="$Column3Value" />
      </xsl:call-template>
    </xsl:element>
  </xsl:template>

  <xsl:template match="DataItem">
    <xsl:element name="div">
      <xsl:attribute name="align">left</xsl:attribute>
      <xsl:attribute name="valign">top</xsl:attribute>
      <xsl:attribute name="class">routing</xsl:attribute>

      <xsl:call-template name="CSS" />
      <xsl:call-template name="ScriptFunctions" />

      <xsl:element name="table">
        <xsl:attribute name="id">DataItem</xsl:attribute>
        <xsl:attribute name="class">table</xsl:attribute>
        <xsl:call-template name="Separator" />
        <xsl:call-template name="TableRow">
          <xsl:with-param name="Column1Style" select="string('bold')" />
          <xsl:with-param name="Column1Value" select="$DateAndTime" />
          <xsl:with-param name="Column2Span" select="2" />
          <xsl:with-param name="Column2Value" select="DataTypeTransformer:FormatDateTime(@time)" />
        </xsl:call-template>
        <xsl:call-template name="TableRow">
          <xsl:with-param name="Column1Style" select="string('bold')" />
          <xsl:with-param name="Column1Value" select="$HealthServiceId" />
          <xsl:with-param name="Column2Span" select="2" />
          <xsl:with-param name="Column2Value" select="DataTypeTransformer:GetObjectDisplayName(@sourceHealthServiceId)" />
        </xsl:call-template>

        <xsl:element name="td">
          <xsl:attribute name="colspan">3</xsl:attribute>

          <xsl:element name="table">
            <xsl:attribute name="class">tableDetail</xsl:attribute>
            <xsl:attribute name="id">
              <xsl:text>RoutingDetails</xsl:text>
            </xsl:attribute>

            <xsl:call-template name="Separator" />
            <xsl:call-template name="TableRow">
              <xsl:with-param name="Column1Span" select="3" />
              <xsl:with-param name="Column1Style" select="string('bold')" />
              <xsl:with-param name="Column1Value" select="$NextDestinations" />
            </xsl:call-template>
            <xsl:call-template name="Separator" />
            <xsl:apply-templates select="NextDestination" />
          </xsl:element>
        </xsl:element>
      </xsl:element>
    </xsl:element>
  </xsl:template>

  <xsl:template match="NextDestination">
    <xsl:element name="tr">
      <xsl:element name="td">
        <xsl:attribute name="colspan">3</xsl:attribute>

        <xsl:element name="table">
          <xsl:attribute name="class">tableDetail</xsl:attribute>
          <xsl:attribute name="id">
            <xsl:text>NextDestination_</xsl:text>
            <xsl:value-of select="@ID" />
          </xsl:attribute>

          <xsl:choose>
            <xsl:when test="@Name = 'DefaultRoute'">
              <xsl:call-template name="TableRow">
                <xsl:with-param name="Id" select="string('00000000-0000-0000-0000-000000000000')" />
                <xsl:with-param name="Column1Value" select="$DefaultRoute" />
                <xsl:with-param name="Column2Span" select="2" />
                <xsl:with-param name="Column2Value" select="string('00000000-0000-0000-0000-000000000000')" />
              </xsl:call-template>
            </xsl:when>
            <xsl:when test="@Name = 'ParkHoldString'">
              <xsl:call-template name="TableRow">
                <xsl:with-param name="Id" select="string('FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF')" />
                <xsl:with-param name="Column1Value" select="$ParkHoldString" />
                <xsl:with-param name="Column2Span" select="2" />
                <xsl:with-param name="Column2Value" select="string('FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF')" />
              </xsl:call-template>
            </xsl:when>
            <xsl:when test="@Name = 'RootConnector'">
              <xsl:call-template name="TableRow">
                <xsl:with-param name="Id" select="$RootConnector" />
                <xsl:with-param name="Column1Value" select="$RootConnector" />
                <xsl:with-param name="Column2Span" select="2" />
                <xsl:with-param name="Column2Value" select="$RootConnector" />
              </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
              <xsl:call-template name="TableRow">
                <xsl:with-param name="Id" select="@ID" />
                <xsl:with-param name="Column1Value" select="@Name" />
                <xsl:with-param name="Column2Span" select="2" />
                <xsl:with-param name="Column2Value" select="@ID" />
              </xsl:call-template>
            </xsl:otherwise>
          </xsl:choose>

          <xsl:call-template name="Separator">
            <xsl:with-param name="RowStyle" select="string('none')" />
          </xsl:call-template>
          <xsl:call-template name="TableRow">
            <xsl:with-param name="RowStyle" select="string('none')" />
            <xsl:with-param name="Column1Style" select="string('bold')" />
            <xsl:with-param name="Column1Value" select="$TargetName" />
            <xsl:with-param name="Column2Style" select="string('bold')" />
            <xsl:with-param name="Column2Value" select="$TargetID" />
            <xsl:with-param name="Column3Style" select="string('bold')" />
            <xsl:with-param name="Column3Value" select="$Cost" />
          </xsl:call-template>
          <xsl:call-template name="Separator">
            <xsl:with-param name="RowStyle" select="string('none')" />
          </xsl:call-template>

          <xsl:for-each select="Target">

            <xsl:choose>
              <xsl:when test="@Name = 'DefaultRoute'">
                <xsl:call-template name="TableRow">
                  <xsl:with-param name="RowStyle" select="string('none')" />
                  <xsl:with-param name="Column1Value" select="$DefaultRoute" />
                  <xsl:with-param name="Column2Value" select="string('00000000-0000-0000-0000-000000000000')" />
                  <xsl:with-param name="Column3Value" select="@Cost" />
                </xsl:call-template>
              </xsl:when>
              <xsl:when test="@Name = 'ParkHoldString'">
                <xsl:call-template name="TableRow">
                  <xsl:with-param name="RowStyle" select="string('none')" />
                  <xsl:with-param name="Column1Value" select="$ParkHoldString" />
                  <xsl:with-param name="Column2Value" select="string('FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF')" />
                  <xsl:with-param name="Column3Value" select="@Cost" />
                </xsl:call-template>
              </xsl:when>
              <xsl:when test="@Name = 'RootConnector'">
                <xsl:call-template name="TableRow">
                  <xsl:with-param name="RowStyle" select="string('none')" />
                  <xsl:with-param name="Column1Value" select="$RootConnector" />
                  <xsl:with-param name="Column2Value" select="$RootConnector" />
                  <xsl:with-param name="Column3Value" select="@Cost" />
                </xsl:call-template>
              </xsl:when>
              <xsl:otherwise>
                <xsl:call-template name="TableRow">
                  <xsl:with-param name="RowStyle" select="string('none')" />
                  <xsl:with-param name="Column1Value" select="@Name" />
                  <xsl:with-param name="Column2Value" select="@ID" />
                  <xsl:with-param name="Column3Value" select="@Cost" />
                </xsl:call-template>
              </xsl:otherwise>
            </xsl:choose>

          </xsl:for-each>

        </xsl:element>
      </xsl:element>
    </xsl:element>
    <xsl:call-template name="Separator" />
  </xsl:template>

  <xsl:template name="ScriptFunctions">
    <xsl:element name="script">
      

            function ToggleDisplayMode(node) 
            {
                var tableHeader = document.getElementById(node);
				if (null != tableHeader)
				{
					var row = tableHeader.nextSibling;
					while (row != null)
					{
						if ( row.style.display != "none" ) {
							row.style.display = "none";
						}
						else {
							row.style.display = "";
						}
						row = row.nextSibling;
					}
				}
            }

            
    </xsl:element>
  </xsl:template>

  <xsl:template name="CSS">
    <xsl:element name="style">
      .routing .table
      {
      width: 100%;
      border-style: none;
      border-collapse: collapse;
      }

      .routing .tableDetail
      {
      width: 100%;
      border:solid black 1.0pt;
      border-collapse: collapse;
      }

      .routing td
      {
      text-align: left;
      vertical-align: top;
      color: gray;
      }

      .routing .table .boldColumn
      {
      text-align: left;
      vertical-align: top;
      font: bold;
      color: #696969;
      }

      .routing .tableDetail .boldColumn
      {
      text-align: left;
      vertical-align: top;
      font: bold;
      color: #696969;
      }
    </xsl:element>
  </xsl:template>

</xsl:stylesheet>
  </Transform>

  <!-- Command Output transform english locale -->
  <Transform type="System.CommandOutput" locale="ENU">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">

  <!-- Localizable text -->
  <xsl:variable name="StdOut">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">StdOut</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="StdErr">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">StdErr</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="None">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">None</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ExitCode">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ExitCode</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <!-- End localizable text -->

  <!-- Returns the display string of the specified resouce -->
  <xsl:template name="GetDisplayString">
    <xsl:param name="Id" />
    <xsl:value-of select="DataTypeTransformer:GetStringResource('System.Library', '31bf3856ad364e35', concat('System.CommandOutput.',$Id))" />
  </xsl:template>

  <xsl:template match="DataItem">

    <div class="Section1" marginTop="0">

      <table border="0" cellspacing="0" cellpadding="0">

        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$StdOut" />
          <xsl:with-param name="Value" select="StdOut" />
          <xsl:with-param name="Error" select="boolean(0)" />
        </xsl:call-template>

        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$StdErr" />
          <xsl:with-param name="Value" select="StdErr" />
          <xsl:with-param name="Error" select="boolean(1)" />
        </xsl:call-template>

        <xsl:call-template name="TableEntrySingleRow">
          <xsl:with-param name="Title" select="$ExitCode" />
          <xsl:with-param name="Value" select="ExitCode" />
          <!-- Show this as an error if not 0 -->
          <xsl:with-param name="Error" select="ExitCode!=0" />
        </xsl:call-template>

      </table>
    </div>

  </xsl:template>

  <xsl:template name="TableEntry">
    <xsl:param name="Title" />
    <xsl:param name="Value" />
    <xsl:param name="Error" />

    <xsl:call-template name="TableEntrySingleRow">
      <xsl:with-param name="Title" select="$Title" />
      <xsl:with-param name="Value" />
      <xsl:with-param name="Error" select="$Error" />
    </xsl:call-template>

    <tr>
      <td valign="top" style="width:466.9pt;background:#B3B3B3;padding:0in 5.4pt 0in 5.4pt">
        <p>
          <xsl:element name="span">
            <xsl:choose>
              <!-- Only read when the error flag is set and there is a value -->
              <xsl:when test="$Error and boolean(string-length($Value))">
                <xsl:attribute name="style">color:red</xsl:attribute>
              </xsl:when>
              <xsl:otherwise>
                <xsl:attribute name="style" />
              </xsl:otherwise>
            </xsl:choose>
            <pre>
              <xsl:choose>
                <xsl:when test="boolean(string-length($Value))">
                  <xsl:value-of select="$Value" />
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="$None" />
                </xsl:otherwise>
              </xsl:choose>
            </pre>
          </xsl:element>
        </p>
        <p style="mso-layout-grid-align:none;text-autospace:none">
          <span style="">
          </span>
        </p>
      </td>
    </tr>
  </xsl:template>

  <xsl:template name="TableEntrySingleRow">
    <xsl:param name="Title" />
    <xsl:param name="Value" />
    <xsl:param name="Error" />
    <tr>
      <td valign="top" style="width:466.9pt;background:#595959;padding:0in 5.4pt 0in 5.4pt">
        <p>
          <span>
            <b>
              <span style="color:white">
                <xsl:choose>
                  <!-- If there was a value for this row-->
                  <xsl:when test="boolean(string-length($Value))">
                    <xsl:value-of select="concat($Title, ':  ')" />
                    <xsl:element name="span">
                      <xsl:choose>
                        <xsl:when test="ExitCode!=0">
                          <xsl:attribute name="style">color:red</xsl:attribute>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:attribute name="style" />
                        </xsl:otherwise>
                      </xsl:choose>
                      <xsl:value-of select="$Value" />
                    </xsl:element>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="$Title" />
                  </xsl:otherwise>
                </xsl:choose>
              </span>
            </b>
          </span>
        </p>
      </td>
    </tr>
  </xsl:template>

</xsl:stylesheet>
  </Transform>

  <!-- Base event transform english locale -->
  <Transform type="System.Event.Data" locale="enu">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">
  <!-- Localizable text -->
  <xsl:variable name="DateAndTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DateAndTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="LogName">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">LogName</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Source">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Source</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="EventNumber">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">EventNumber</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Level">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Level</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="LoggingComputer">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">LoggingComputer</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="User">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">User</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Description">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Description</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="EventData">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">EventData</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <!-- End localizable text -->

  <!-- Returns the display string of the specified resouce -->
  <xsl:template name="GetDisplayString">
    <xsl:param name="Id" />
    <xsl:value-of select="DataTypeTransformer:GetStringResource('System.Library', '31bf3856ad364e35', concat('System.Event.Data.',$Id))" />
  </xsl:template>

  <xsl:template match="DataItem">
    <div align="left">
      <table border="0" width="100%" id="outertable" style="border-collapse: collapse">
        <tr>
          <td width="35%">
            <table border="0" width="100%" id="tablecolumn1" style="border-collapse: collapse">

              <xsl:call-template name="TableEntry">
                <xsl:with-param name="Title" select="$DateAndTime" />
                <xsl:with-param name="Value" select="DataTypeTransformer:FormatDateTime(@time)" />
              </xsl:call-template>

              <xsl:call-template name="TableEntry">
                <xsl:with-param name="Title" select="$LogName" />
                <xsl:with-param name="Value" select="Channel" />
              </xsl:call-template>

              <xsl:call-template name="TableEntry">
                <xsl:with-param name="Title" select="$Source" />
                <xsl:with-param name="Value" select="PublisherName" />
              </xsl:call-template>

              <xsl:call-template name="TableEntry">
                <xsl:with-param name="Title" select="$EventNumber" />
                <xsl:with-param name="Value" select="EventDisplayNumber" />
              </xsl:call-template>

              <xsl:call-template name="TableEntry">
                <xsl:with-param name="Title" select="$Level" />
                <xsl:with-param name="Value" select="EventLevel" />
              </xsl:call-template>

              <xsl:call-template name="TableEntry">
                <xsl:with-param name="Title" select="$LoggingComputer" />
                <xsl:with-param name="Value" select="LoggingComputer" />
              </xsl:call-template>

              <xsl:call-template name="TableEntry">
                <xsl:with-param name="Title" select="$User" />
                <xsl:with-param name="Value" select="UserName" />
              </xsl:call-template>

            </table>
          </td>
          <td width="65%" style="position:relative;top=0px;left=0px">
            <DIV style="position:relative;top=0px;left=0px">
              <table border="0" width="100%" id="tablecolumn2" style="border-collapse: collapse">
                <tr>
                  <td width="100%" align="left" style="font:bold;color:gray">
                    <xsl:value-of select="$Description" />
                  </td>
                </tr>
                <tr>
                  <td width="100%" align="left" style="color:gray">
                    <xsl:value-of select="EventDescription" />
                  </td>
                </tr>
              </table>
            </DIV>
          </td>
        </tr>
      </table>

      <p style="font:bold;color:gray;margin-bottom:0">
        <xsl:value-of select="$EventData" />
      </p>
      <!-- BUGBUG The C# XSLCompiledTransform does not handle the <hr/> tag
          
          <xsl:element name="hr">
            <xsl:attribute name="style">margin-top:0;margin-bottom:0</xsl:attribute> 
          </xsl:element>
          
          -->
      <xsl:variable name="EventDataItem" select="EventData/DataItem" />
      <xsl:if test="$EventDataItem">
        <xsl:copy-of select="DataTypeTransformer:Transform($EventDataItem)" />
      </xsl:if>

    </div>
  </xsl:template>

  <xsl:template name="TableEntry">
    <xsl:param name="Title" />
    <xsl:param name="Value" />
    <tr>
      <td width="35%" style="font:bold;color:gray">
        <xsl:value-of select="$Title" />
      </td>
      <td width="65%" style="color:gray">
        <xsl:value-of select="$Value" />
      </td>
    </tr>
  </xsl:template>

</xsl:stylesheet>
  </Transform>

    <Transform type="Microsoft.SystemCenter.ASPNET20.2007.LobDataType" locale="enu">
      <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:lg="http://AVICode.com/Intercept/MonitorLog" xmlns:DataTypeTransformer="urn:DatatypeTransformer">


      <xsl:template match="DataItem">
        <xsl:element name="DIV">
          <xsl:attribute name="class">HandlersFrame</xsl:attribute>
          <xsl:choose>
            <xsl:when test="count(EventData/*[local-name()='log']/Enterprise) = 0">
              <xsl:choose>
                <xsl:when test="EventClass[.='XMOMASPMonitorLog']">
                  <xsl:call-template name="CSS" />
                  <xsl:call-template name="XMonitorScript" />
                  <xsl:apply-templates select="EventData" mode="XMOMASPMonitorLog" />
                </xsl:when>
                <xsl:when test="EventClass[.='PMOMASPMonitorLog']">
                  <xsl:call-template name="CSS" />
                  <xsl:call-template name="PMonitorScript" />
                  <xsl:apply-templates select="EventData" mode="PMOMASPMonitorLog" />
                </xsl:when>
                <xsl:when test="EventClass[.='PMonitorLog']">
                  <xsl:call-template name="AVIMOMCSS" />
                  <xsl:call-template name="AVIMOMPMonitorScript" />
                  <xsl:apply-templates select="EventData" mode="AVIMOMPMonitorLog" />
                </xsl:when>
                <xsl:when test="EventClass[.='XMonitorLog']">
                  <xsl:call-template name="AVIMOMCSS" />
                  <xsl:call-template name="AVIMOMXMonitorScript" />
                  <xsl:apply-templates select="EventData" mode="AVIMOMXMonitorLog" />
                </xsl:when>
                <xsl:when test="EventClass[.='CLRXMonitorLog']">
                  <xsl:call-template name="AVIMOMCSS" />
                  <xsl:call-template name="AVIMOMCLRXMonitorScript" />
                  <xsl:apply-templates select="EventData" mode="AVIMOMCLRXMonitorLog" />
                </xsl:when>
                <xsl:when test="EventClass[.='CSMPMonitorLog']">
                  <html xmlns:v="urn:schemas-microsoft-com:vml">
                    <style>v\:*{behavior:url(#default#VML);position:absolute}</style>
                    <body>
                      <xsl:call-template name="AVIMOMCSS" />
                      <xsl:call-template name="AVIMOMCSMPMonitorScript" />
                      <xsl:apply-templates select="EventData" mode="AVIMOMCSMPMonitorLog" />
                    </body>
                  </html>
                </xsl:when>
                <xsl:when test="EventClass[.='CSMSMonitorLog']">
                  <html xmlns:v="urn:schemas-microsoft-com:vml">
                    <style>v\:*{behavior:url(#default#VML);position:absolute}</style>
                    <body>
                      <xsl:call-template name="AVIMOMCSS" />
                      <xsl:call-template name="AVIMOMCSMSMonitorScript" />
                      <xsl:apply-templates select="EventData" mode="AVIMOMCSMSMonitorLog" />
                    </body>
                  </html>
                </xsl:when>
                <xsl:when test="EventClass[.='CSMXMonitorLog']">
                  <xsl:call-template name="AVIMOMCSS" />
                  <xsl:call-template name="AVIMOMCSMXMonitorScript" />
                  <xsl:apply-templates select="EventData" mode="AVIMOMCSMXMonitorLog" />
                </xsl:when>
                <xsl:when test="EventClass[.='CSMAMonitorLog']">
                  <html xmlns:v="urn:schemas-microsoft-com:vml">
                    <style>v\:*{behavior:url(#default#VML);position:absolute}</style>
                    <body>
                      <xsl:call-template name="AVIMOMCSS" />
                      <xsl:call-template name="AVIMOMCSMAMonitorScript" />
                      <xsl:apply-templates select="EventData" mode="AVIMOMCSMAMonitorLog" />
                    </body>
                  </html>
                </xsl:when>
                <xsl:when test="EventClass[.='AboveThresholdMonitorLog']">
                  <xsl:apply-templates select="EventData" mode="AVIMOMAboveThresholdMonitorLog" />
                </xsl:when>
              </xsl:choose>
            </xsl:when>
            <xsl:when test="count(EventData/*[local-name()='log']/Enterprise) &gt; 0">
              <xsl:choose>
                <xsl:when test="EventData/*[local-name()='log']/Enterprise/EventClass_Enterprise[.='PMonitorLog']">
                  <xsl:call-template name="AVIMOMCSS" />
                  <xsl:call-template name="AVIMOMPMonitorScript" />
                  <xsl:apply-templates select="EventData/*[local-name()='log']/Enterprise" mode="AVIMOMPMonitorLog" />
                </xsl:when>
                <xsl:when test="EventData/*[local-name()='log']/Enterprise/EventClass_Enterprise[.='XMonitorLog']">
                  <xsl:call-template name="AVIMOMCSS" />
                  <xsl:call-template name="AVIMOMXMonitorScript" />
                  <xsl:apply-templates select="EventData/*[local-name()='log']/Enterprise" mode="AVIMOMXMonitorLog" />
                </xsl:when>
                <xsl:when test="EventData/*[local-name()='log']/Enterprise/EventClass_Enterprise[.='CLRXMonitorLog']">
                  <xsl:call-template name="AVIMOMCSS" />
                  <xsl:call-template name="AVIMOMCLRXMonitorScript" />
                  <xsl:apply-templates select="EventData/*[local-name()='log']/Enterprise" mode="AVIMOMCLRXMonitorLog" />
                </xsl:when>
                <xsl:when test="EventData/*[local-name()='log']/Enterprise/EventClass_Enterprise[.='CSMPMonitorLog']">
                  <xsl:call-template name="AVIMOMCSS" />
                  <xsl:call-template name="AVIMOMCSMPMonitorScript" />
                  <xsl:apply-templates select="EventData/*[local-name()='log']/Enterprise" mode="AVIMOMCSMPMonitorLog" />
                </xsl:when>
                <xsl:when test="EventData/*[local-name()='log']/Enterprise/EventClass_Enterprise[.='CSMSMonitorLog']">
                  <xsl:call-template name="AVIMOMCSS" />
                  <xsl:call-template name="AVIMOMCSMSMonitorScript" />
                  <xsl:apply-templates select="EventData/*[local-name()='log']/Enterprise" mode="AVIMOMCSMSMonitorLog" />
                </xsl:when>
                <xsl:when test="EventData/*[local-name()='log']/Enterprise/EventClass_Enterprise[.='CSMXMonitorLog']">
                  <xsl:call-template name="AVIMOMCSS" />
                  <xsl:call-template name="AVIMOMCSMXMonitorScript" />
                  <xsl:apply-templates select="EventData/*[local-name()='log']/Enterprise" mode="AVIMOMCSMXMonitorLog" />
                </xsl:when>
                <xsl:when test="EventData/*[local-name()='log']/Enterprise/EventClass_Enterprise[.='CSMAMonitorLog']">
                  <xsl:call-template name="AVIMOMCSS" />
                  <xsl:call-template name="AVIMOMCSMAMonitorScript" />
                  <xsl:apply-templates select="EventData/*[local-name()='log']/Enterprise" mode="AVIMOMCSMAMonitorLog" />
                </xsl:when>
              </xsl:choose>
            </xsl:when>
          </xsl:choose>
        </xsl:element>
      </xsl:template>

      <!-- templates for AVIMOMPMonitorLog -->
      <xsl:template match="EventData" mode="AVIMOMPMonitorLog">
        <xsl:if test="count(notLicense) = 0">
          <xsl:for-each select="*[local-name()='log']">
            <xsl:call-template name="AVIMOMPMain" />
          </xsl:for-each>
        </xsl:if>
        <xsl:call-template name="AVIMOMPLicenseWizard" />
      </xsl:template>
      <xsl:template match="EventData/*[local-name()='log']/Enterprise" mode="AVIMOMPMonitorLog">
        <xsl:if test="count(notLicense) = 0">
          <xsl:for-each select="*[local-name()='log']">
            <xsl:call-template name="AVIMOMPMain" />
          </xsl:for-each>
        </xsl:if>
        <xsl:call-template name="AVIMOMPLicenseWizard" />
      </xsl:template>
      <xsl:template name="AVIMOMPMain">
        <xsl:value-of select="outputScript" disable-output-escaping="yes" />
        <xsl:call-template name="AVIMOMPViewerLink" />
        <table cellpadding="0" cellspacing="0" class="AlignByCompany">
          <tr class="AlignByCompany">
            <td class="AlignByCompany">
              <xsl:if test="(count(properties/add[@name='WrongSelfTime']) &gt; 0)">
                <div style="font-weight:bold;color:red">BIOS settings on the monitored server prevent the accurate time measurement. The event timing may be invalid. Please, go to AVIcode support knowledge base (support.avicode.com) for more information.</div>
              </xsl:if>
              <xsl:if test="count(//event[link]) &gt; 0">
                <table cellpadding="0" cellspacing="0" class="Header">
                  <tr>
                    <td class="HeaderTitle" onclick="GlobalTreeExpander('slowestNodesH', 'slowestNodesC', 'TreeNode');">Slowest Nodes</td>
                    <td id="slowestNodesH" class="TreeNodeMinus" onclick="GlobalTreeExpander('slowestNodesH', 'slowestNodesC', 'TreeNode');">
                      <li />
                    </td>
                  </tr>
                </table>
                <xsl:call-template name="AVIMOMPSlowest" />
              </xsl:if>
              <table cellpadding="0" cellspacing="0" class="Header">
                <tr>
                  <td class="HeaderTitle" onclick="GlobalTreeExpander('stackH', 'stackContent', 'TreeNode');">Stack</td>
                  <td id="stackH" class="TreeNodeMinus" onclick="GlobalTreeExpander('stackH', 'stackContent', 'TreeNode');">
                    <li />
                  </td>
                </tr>
              </table>
              <div id="stackContent">
                <xsl:if test="count(callGroups/callGroup) &gt; 0">
                  <table cellpadding="0" cellspacing="0" class="HeaderInput">
                    <tr>
                      <td class="ExpandAll" id="ExpandAllButton" title="Expand all" onclick="ExpandAll(document.getElementById((document.getElementById('execution').checked ? '1' : 'GroupView')))">Expand all</td>
                      <td />
                      <td valign="center">
                        <input name="radio" id="execution" type="radio" onclick="ChangeView(false)" CHECKED="true">
                          <xsl:attribute name="onclick">
                            <xsl:choose>
                              <xsl:when test="count(//professionalLicenseLimitation) &gt; 0">
                                ChangeView(false, true);
                              </xsl:when>
                              <xsl:otherwise>
                                ChangeView(false);
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                        </input>
                        <label for="execution">Execution Tree View</label>
                        <input name="radio" id="resource" type="radio">
                          <xsl:attribute name="onclick">
                            <xsl:choose>
                              <xsl:when test="count(//professionalLicenseLimitation) &gt; 0">
                                ChangeView(true, true);
                              </xsl:when>
                              <xsl:otherwise>
                                ChangeView(true);
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:if test="count(//professionalLicenseLimitation) &gt; 0">
                            <xsl:attribute name="checked">
                              true
                            </xsl:attribute>
                          </xsl:if>
                        </input>
                        <label for="resource">Resource Group View</label>
                      </td>
                    </tr>
                  </table>
                </xsl:if>
                <div id="TreeView">

                  <!-- Switch to resource group view in case of professional license -->
                  <xsl:attribute name="style">
                    <xsl:choose>
                      <xsl:when test="(count(//professionalLicenseLimitation) &gt; 0) and (count(callGroups/callGroup) &gt; 0)">
                        display: none;
                      </xsl:when>
                      <xsl:otherwise>
                        display: block;
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>

                  <xsl:for-each select="events/event">
                    <table cellpadding="0" cellspacing="0" class="TreeFun">
                      <xsl:call-template name="AVIMOMPTreeRow">
                        <xsl:with-param name="left" select="0" />
                        <xsl:with-param name="id">1</xsl:with-param>
                        <xsl:with-param name="parent-id">1</xsl:with-param>
                      </xsl:call-template>
                    </table>
                  </xsl:for-each>
                  <xsl:if test="count(skippedFrames/skippedFrame) &gt; 0">
                    <table cellpadding="0" cellspacing="0" class="Header">
                      <tr>
                        <td class="HeaderTitle">Skipped frames</td>
                      </tr>
                    </table>
                    <table cellpadding="0" cellspacing="0">
                      <xsl:for-each select="skippedFrames/skippedFrame">
                        <tr>
                          <td class="TreeNodeValue">
                            <xsl:value-of select="name" />
                          </td>
                          <td class="TreeNodeTime">
                            <xsl:value-of select="count" />
                          </td>
                        </tr>
                      </xsl:for-each>
                    </table>
                  </xsl:if>
                </div>
                <xsl:if test="count(callGroups/callGroup) &gt; 0">
                  <div id="GroupingByTypeView">

                    <!-- Switch to resource group view in case of professional licnese -->
                    <xsl:attribute name="style">
                      <xsl:choose>
                        <xsl:when test="count(//professionalLicenseLimitation) &gt; 0">
                          display: block;
                        </xsl:when>
                        <xsl:otherwise>
                          display: none;
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:attribute>

                    <table cellpadding="0" cellspacing="0" class="TreeFun">
                      <xsl:for-each select="events/event">
                        <tr>
                          <td>
                            <table cellpadding="0" cellspacing="0" class="TreeNode" id="GroupView">
                              <tr>
                                <td id="GroupViewsign" class="TreeNodeMinus" onclick="TreeExpander('GroupView','TreeNode');">
                                  <li />
                                </td>
                                <xsl:call-template name="AVIMOMPGroupViewContent" />
                              </tr>
                            </table>
                          </td>
                        </tr>
                      </xsl:for-each>
                      <xsl:for-each select="callGroups/callGroup">
                        <tr id="GroupView.{position()-1}" style="Display:;">
                          <Script Language="JavaScript">
                            <xsl:text>document.write(GroupRow('</xsl:text>
                            <xsl:value-of select="@name" />
                            <xsl:text>','</xsl:text>
                            <xsl:value-of select="@duration" />
                            <xsl:text>   (</xsl:text>
                            <xsl:value-of select="@percent" />
                            <xsl:text>)</xsl:text>
                            <xsl:text>','</xsl:text>
                            <xsl:value-of select="@count" />
                            <xsl:text>',</xsl:text>
                            <xsl:if test="position()=last()">true, 'GroupView.</xsl:if>
                            <xsl:if test="position()!=last()">false, 'GroupView.</xsl:if>
                            <xsl:value-of select="position()-1" />
                            <xsl:text>'));</xsl:text>
                          </Script>
                        </tr>
                        <xsl:call-template name="AVIMOMPTreeRowInGroupView">
                          <xsl:with-param name="groupType">
                            <xsl:value-of select="@name" />
                          </xsl:with-param>
                          <xsl:with-param name="isLastParent">
                            <xsl:if test="position()=last()">true</xsl:if>
                            <xsl:if test="position()!=last()">false</xsl:if>
                          </xsl:with-param>
                          <xsl:with-param name="id">
                            <xsl:text>GroupView.</xsl:text>
                            <xsl:value-of select="position()-1" />
                          </xsl:with-param>
                          <xsl:with-param name="isRemainCalls">
                            <xsl:choose>
                              <xsl:when test="@remainCalls">true</xsl:when>
                              <xsl:otherwise>false</xsl:otherwise>
                            </xsl:choose>
                          </xsl:with-param>
                        </xsl:call-template>
                        <xsl:if test="@remainCalls!=''">
                          <tr style="Display:none;">
                            <xsl:attribute name="id">
                              <xsl:text>GroupView.</xsl:text>
                              <xsl:value-of select="position()-1" />
                              <xsl:text>.</xsl:text>
                              <xsl:variable name="groupType" select="@name" />
                              <xsl:value-of select="count(//event[stack/stackPoint[callGroupType=$groupType]])" />
                            </xsl:attribute>
                            <td>
                              <table cellpadding="0" cellspacing="0" class="TreeNode">
                                <tr>
                                  <Script Language="JavaScript">
                                    <xsl:text>document.write(GroupViewTree(true,</xsl:text>
                                    <xsl:if test="position()=last()">true</xsl:if>
                                    <xsl:if test="position()!=last()">false</xsl:if>
                                    <xsl:text>));</xsl:text>
                                  </Script>
                                  <td class="TreeNodeTimeBasic">
                                    <xsl:value-of select="@remainDuration" />
                                    <xsl:text>   (</xsl:text>
                                    <xsl:value-of select="@remainPercent" />
                                    <xsl:text>)</xsl:text>
                                  </td>
                                  <td class="TreeValue">Remaining calls</td>
                                  <td class="TreeNodeValue">
                                    <xsl:text>[</xsl:text>
                                    <xsl:value-of select="@remainCalls" />
                                    <xsl:text> call</xsl:text>
                                    <xsl:if test="@remainCalls!='1'">
                                      <xsl:text>s</xsl:text>
                                    </xsl:if>
                                    <xsl:text>]</xsl:text>
                                  </td>
                                </tr>
                              </table>
                            </td>
                          </tr>
                        </xsl:if>
                      </xsl:for-each>
                    </table>
                  </div>
                </xsl:if>
              </div>
              <xsl:call-template name="AVIMOMPCollectionNotes" />
            </td>
          </tr>
        </table>
      </xsl:template>
      <xsl:template name="AVIMOMPCollectionNotes">
        <xsl:if test="(count(properties/add) &gt; 0) or (count(processID) &gt; 0)">

          <table cellpadding="0" cellspacing="0" class="Header">
            <tr>
              <td class="HeaderTitle" onclick="GlobalTreeExpander('collectionNotesH', 'collectionNotes', 'TreeNode');">Collection Notes</td>
              <td id="collectionNotesH" onclick="GlobalTreeExpander('collectionNotesH', 'collectionNotes', 'TreeNode');">
                <xsl:attribute name="class">
                  <xsl:choose>
                    <xsl:when test=" ((count(properties/add[@name='heavyLightStatus' and @value='light']) &gt; 0) or ((count(properties/add[@name='heavyLightStatus']) &gt; 0) and (properties/add[@name='heavyLightStatus']='light'))) or (count(properties/add[@name='maxChainDeep']) &gt; 0) or ((count(properties/add[@name='hasTailcall' and @value='true']) &gt; 0) or ((count(properties/add[@name='hasTailcall']) &gt; 0) and (properties/add[@name='hasTailcall']='true'))) or ((count(properties/add[@name='hasExcludedFunction' and @value='true']) &gt; 0) or ((count(properties/add[@name='hasExcludedFunction']) &gt; 0) and (properties/add[@name='hasExcludedFunction']='true'))) or ((count(properties/add[@name='isTimeonlySuppressed' and @value='true']) &gt; 0) or ((count(properties/add[@name='isTimeonlySuppressed']) &gt; 0) and (properties/add[@name='isTimeonlySuppressed']='true'))) or ((count(properties/add[@name='isStackOverflowed' and @value='true']) &gt; 0) or ((count(properties/add[@name='isStackOverflowed']) &gt; 0) and (properties/add[@name='isStackOverflowed']='true')))                                   ">
                      <xsl:text>TreeNodeMinus</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:text>TreeNodePlus</xsl:text>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:attribute>
                <li />
              </td>
            </tr>
          </table>
          <div id="collectionNotes" style="">
            <xsl:attribute name="style">
              <xsl:choose>
                <xsl:when test=" ((count(properties/add[@name='heavyLightStatus' and @value='light']) &gt; 0) or ((count(properties/add[@name='heavyLightStatus']) &gt; 0) and (properties/add[@name='heavyLightStatus']='light'))) or (count(properties/add[@name='maxChainDeep']) &gt; 0) or ((count(properties/add[@name='hasTailcall' and @value='true']) &gt; 0) or ((count(properties/add[@name='hasTailcall']) &gt; 0) and (properties/add[@name='hasTailcall']='true'))) or ((count(properties/add[@name='hasExcludedFunction' and @value='true']) &gt; 0) or ((count(properties/add[@name='hasExcludedFunction']) &gt; 0) and (properties/add[@name='hasExcludedFunction']='true'))) or ((count(properties/add[@name='isTimeonlySuppressed' and @value='true']) &gt; 0) or ((count(properties/add[@name='isTimeonlySuppressed']) &gt; 0) and (properties/add[@name='isTimeonlySuppressed']='true'))) or ((count(properties/add[@name='isStackOverflowed' and @value='true']) &gt; 0) or ((count(properties/add[@name='isStackOverflowed']) &gt; 0) and (properties/add[@name='isStackOverflowed']='true')))                                   ">
                  <xsl:text>padding: 4px;</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:text>display: none; padding: 4px;</xsl:text>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:attribute>
            <ul class="CollectionNotes">
              <xsl:if test="(count(properties/add[@name='heavyLightStatus' and @value='light']) &gt; 0) or ((count(properties/add[@name='heavyLightStatus']) &gt; 0) and (properties/add[@name='heavyLightStatus']='light'))">
                <li>
                  Some resource calls and runtime information are not collected due to data collection
                  optimization for light requests. The information will be collected in subsequent
                  events for this entrypoint.
                </li>
              </xsl:if>
              <xsl:if test="(count(properties/add[@name='maxChainDeep']) &gt; 0)">
                <li>
                  The limit for the total number of collected functions in the event has been reached.
                  Some functions may not be collected. Increase the sensitivity threshold to
                  limit the number of tracked functions.
                </li>
              </xsl:if>

              <xsl:if test="(count(properties/add[@name='hasTailcall' and @value='true']) &gt; 0) or ((count(properties/add[@name='hasTailcall']) &gt; 0) and (properties/add[@name='hasTailcall']='true'))">
                <li>
                  APM detected that the runtime applied tail call optimization to some of the methods in the call stack.  Caller methods are timed independently from callee methods. As a result, the call stack might be missing methods if the caller function processing time is below the sensitivity threshold and the callee method processing time is not.
		</li>
              </xsl:if>
              <xsl:if test="((count(properties/add[@name='isTimeonlySuppressed' and @value='true']) &gt; 0) or ((count(properties/add[@name='isTimeonlySuppressed']) &gt; 0) and (properties/add[@name='isTimeonlySuppressed']='true')))">
                <li>
                  Some time-only functions cannot be collected due to performance optimizations.
                  Please disable non-interesting namespaces from performance monitoring to prevent this from happening.
                </li>
              </xsl:if>
              <xsl:if test="(count(properties/add[@name='hasExcludedFunction' and @value='true']) &gt; 0) or ((count(properties/add[@name='hasExcludedFunction']) &gt; 0) and (properties/add[@name='hasExcludedFunction']='true'))">
                <li>
                  There was an excluded function(s) in the stack.
                  Time spent in excluded functions is subtracted from total event duration.
                  Excluded functions typically represent time that an application spends
                  waiting for user input.
                </li>
              </xsl:if>
              <xsl:if test="(count(properties/add[@name='isStackOverflowed' and @value='true']) &gt; 0) or ((count(properties/add[@name='isStackOverflowed']) &gt; 0) and (properties/add[@name='isStackOverflowed']='true'))">
                <li>Stack size limit has been reached. Some functions may not be collected.</li>
              </xsl:if>
            </ul>
            <div id="collectionRows" class="ModulesVar">
              <table cellpadding="0" cellspacing="0" class="TreeVar">
                <col class="TreeVarCol1" />
                <col class="TreeVarCol2" />
                <tr>
                  <th class="TreeVarHeader1">Name</th>
                  <th class="TreeVarHeader2">Value</th>
                </tr>
                <xsl:if test="count(properties/add[@name='fullAppPath']) &gt; 0">
                  <tr class="Normal">
                    <td style="width: 32%;">Full Application Path</td>
                    <xsl:element name="td">
                      <xsl:choose>
                        <xsl:when test="count(properties/add[@name='fullAppPath' and @value]) &gt; 0">
                          <xsl:value-of select="properties/add[@name='fullAppPath']/@value" />
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="properties/add[@name='fullAppPath']" />
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                  </tr>
                </xsl:if>
                <xsl:if test="count(processID) &gt; 0">
                  <tr class="Normal">
                    <td style="width: 32%;">Process ID</td>
                    <td>
                      <xsl:value-of select="processID" />
                    </td>
                  </tr>
                </xsl:if>
                <xsl:if test="count(properties/add[@name='threadId']) &gt; 0">
                  <tr class="Normal">
                    <td style="width: 32%;">Thread ID</td>
                    <xsl:element name="td">
                      <xsl:choose>
                        <xsl:when test="count(properties/add[@name='threadId' and @value]) &gt; 0">
                          <xsl:value-of select="properties/add[@name='threadId']/@value" />
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="properties/add[@name='threadId']" />
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                  </tr>
                </xsl:if>
                <xsl:if test="count(properties/add[@name='cpuCores']) &gt; 0">
                  <tr class="Normal">
                    <td style="width: 32%;">CPU Cores</td>
                    <xsl:element name="td">
                      <xsl:value-of select="properties/add[@name='cpuCores']" />
                    </xsl:element>
                  </tr>
                </xsl:if>
              </table>
            </div>
          </div>
        </xsl:if>
      </xsl:template>
      <xsl:template name="AVIMOMPGroupViewContent">
        <td class="TreeNodeTypeFun" />
        <td>
          <!-- if slow -->
          <xsl:if test="count(link)&gt;0">
            <xsl:attribute name="class">TreeNodeTimeHigh</xsl:attribute>
            <xsl:element name="a">
              <xsl:attribute name="name">
                <xsl:text>#</xsl:text>
                <xsl:value-of select="link" />
              </xsl:attribute>
            </xsl:element>
          </xsl:if>
          <!-- else  -->
          <xsl:if test="count(link)=0">
            <xsl:attribute name="class">TreeNodeTime</xsl:attribute>
          </xsl:if>
          <nobr>
            <xsl:value-of select="processTime" />
          </nobr>
        </td>
        <td class="TreeNodeValue">
          <!--value-->
          <xsl:call-template name="AVIMOMPEventValue">
            <xsl:with-param name="id">
              <xsl:value-of select="generate-id(..)" />
            </xsl:with-param>
          </xsl:call-template>
        </td>
      </xsl:template>
      <xsl:template name="AVIMOMPSlowest">
        <table class="SlowestNodes" cellpadding="0" cellspacing="0" id="slowestNodesC" style="table-layout: auto">
          <xsl:for-each select="//event[link]">
            <xsl:sort select="link" data-type="number" />
            <tr>
              <td>
                <xsl:attribute name="description">
                  <xsl:choose>
                    <xsl:when test="count(enter) &gt; 0">
                      <xsl:text>Start time : </xsl:text>
                      <xsl:value-of select="enter" />
                      <xsl:text>&lt;br /&gt;</xsl:text>
                    </xsl:when>
                    <!-- old format support -->
                    <xsl:otherwise>
                      <xsl:if test="count(enterLabel) &gt; 0">
                        <xsl:text>Start time : </xsl:text>
                        <xsl:value-of select="enterLabel" />
                        <xsl:text>&lt;br /&gt;</xsl:text>
                      </xsl:if>
                    </xsl:otherwise>
                  </xsl:choose>
                  <xsl:if test="count(events/event)&gt;0">
                    <xsl:text>Total time : </xsl:text>
                    <xsl:value-of select="processTime" />
                    <xsl:text>&lt;br /&gt;</xsl:text>
                    <xsl:text>Self time : </xsl:text>
                    <xsl:value-of select="selfTime" />
                    <xsl:text>&lt;br /&gt;</xsl:text>
                  </xsl:if>
                </xsl:attribute>
                <a>
                  <xsl:attribute name="href">
                    <xsl:text>#</xsl:text>
                    <xsl:value-of select="link" />
                  </xsl:attribute>
                  <nobr class="TimeLink">
                    <xsl:attribute name="onclick">
                      <xsl:text>OpenNode('</xsl:text>
                      <xsl:value-of select="generate-id(..)" />
                      <xsl:text>','TreeNode');</xsl:text>
                    </xsl:attribute>
                    <xsl:value-of select="processTime" />
                    <span class="processTime">
                      / <xsl:value-of select="selfTime" />
                      ms
                    </span>
                  </nobr>
                </a>
              </td>
              <td class="TreeNodeValue">
                <xsl:call-template name="AVIMOMPEventName" />
              </td>
            </tr>
          </xsl:for-each>
        </table>
      </xsl:template>
      <xsl:template name="AVIMOMPTreeRowInGroupView">
        <xsl:param name="groupType" />
        <xsl:param name="isLastParent" />
        <xsl:param name="isRemainCalls" />
        <xsl:param name="id" />
        <xsl:choose>
          <xsl:when test="count(//professionalLicenseLimitation) &gt; 0">
            <xsl:if test="count(//event[stack/stackPoint[callGroupType=$groupType]]) &gt; 0">

              <!-- The message about restricted mode limitation of this view -->

              <tr id="{$id}.0" style="Display:none;" class="treeRow">
                <td>
                  <table cellpadding="0" cellspacing="0" id="{$id}.0ev" class="TreeNode">
                    <tr>
                      <Script Language="JavaScript">
                        <xsl:text>document.write(GroupViewTree(</xsl:text>
                        <xsl:if test="$isRemainCalls='true'">false,</xsl:if>
                        <xsl:if test="$isRemainCalls='false'">
                          true,
                        </xsl:if>
                        <xsl:value-of select="$isLastParent" />
                        <xsl:text>));</xsl:text>
                      </Script>
                      <td>
                        <table cellpadding="0" cellspacing="0">
                          <tr>
                            <td>
                              <div id="handlerLicenseMessage_ResourceGroupView_{$id}.0" class="handlerLicenseMessage">
                                <li />
                              </div>
                            </td>
                          </tr>
                        </table>
                      </td>
                    </tr>
                  </table>
                </td>
              </tr>
            </xsl:if>
          </xsl:when>
          <xsl:otherwise>
            <xsl:for-each select="//event[stack/stackPoint[callGroupType=$groupType]]">
              <tr id="{$id}.{position()-1}" style="Display:none;" class="treeRow">
                <td>
                  <table cellpadding="0" cellspacing="0" id="{$id}.{position()-1}ev" class="TreeNode">
                    <!--id for open slowest node-->
                    <tr>
                      <Script Language="JavaScript">
                        <xsl:text>document.write(GroupViewTree(</xsl:text>
                        <xsl:if test="$isRemainCalls='true'">false,</xsl:if>
                        <xsl:if test="$isRemainCalls='false'">
                          <xsl:if test="position()=last()">true, </xsl:if>
                          <xsl:if test="position()!=last()">false, </xsl:if>
                        </xsl:if>
                        <xsl:value-of select="$isLastParent" />
                        <xsl:text>));</xsl:text>
                      </Script>
                      <td>
                        <table cellpadding="0" cellspacing="0">
                          <tr>
                            <xsl:call-template name="AVIMOMPGroupViewContent" />
                          </tr>
                        </table>
                      </td>
                    </tr>
                  </table>
                </td>
              </tr>
            </xsl:for-each>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:template>
      <xsl:template name="AVIMOMPTreeRow">
        <xsl:param name="left">0</xsl:param>
        <xsl:param name="type" />
        <xsl:param name="id" />
        <xsl:param name="parent-id" />
        <!--root-->
        <xsl:element name="tr">
          <xsl:attribute name="class">treeRow</xsl:attribute>
          <xsl:attribute name="id">
            <xsl:value-of select="$id" />
          </xsl:attribute>
          <xsl:if test="$parent-id != '1'">
            <xsl:attribute name="style">display:none</xsl:attribute>
          </xsl:if>
          <xsl:element name="td">
            <xsl:attribute name="style">
              <xsl:text>padding-left:</xsl:text>
              <xsl:value-of select="$left" />
            </xsl:attribute>
            <xsl:element name="div">
              <xsl:attribute name="class">TreeRow</xsl:attribute>
              <xsl:attribute name="id">
                <xsl:value-of select="generate-id(..)" />
              </xsl:attribute>
              <xsl:choose>
                <xsl:when test="$type = 'first'">
                  <xsl:element name="div">
                    <xsl:attribute name="class">TreeNodeFirst</xsl:attribute>
                    <xsl:element name="div">
                      <xsl:text disable-output-escaping="yes"> </xsl:text>
                    </xsl:element>
                  </xsl:element>
                </xsl:when>
                <xsl:when test="$type = 'last'">
                  <xsl:element name="div">
                    <xsl:attribute name="class">TreeNodeLast</xsl:attribute>
                    <xsl:element name="div">
                      <xsl:text disable-output-escaping="yes"> </xsl:text>
                    </xsl:element>
                  </xsl:element>
                </xsl:when>
                <xsl:when test="$type = 'sibling'">
                  <xsl:element name="div">
                    <xsl:attribute name="class">TreeNodeSibling</xsl:attribute>
                    <xsl:element name="div">
                      <xsl:text disable-output-escaping="yes"> </xsl:text>
                    </xsl:element>
                  </xsl:element>
                </xsl:when>
                <xsl:when test="$type = 'empty'">
                  <xsl:element name="div">
                    <xsl:attribute name="class">TreeNodeSimple</xsl:attribute>
                    <xsl:element name="div">
                      <xsl:text disable-output-escaping="yes"> </xsl:text>
                    </xsl:element>
                  </xsl:element>
                </xsl:when>
              </xsl:choose>
              <!--else-->
              <xsl:choose>
                <xsl:when test="count(events/event)&gt;0">
                  <xsl:element name="div">
                    <xsl:attribute name="id">
                      <xsl:value-of select="$id" />
                      <xsl:text>sign</xsl:text>
                    </xsl:attribute>
                    <xsl:attribute name="onclick">
                      <xsl:text>TreeExpander('</xsl:text>
                      <xsl:value-of select="$id" />
                      <xsl:text>', 'TreeNode')</xsl:text>
                    </xsl:attribute>
                    <xsl:attribute name="class">
                      <xsl:choose>
                        <xsl:when test="$id = '1'">TreeNodeMinus</xsl:when>
                        <xsl:otherwise>TreeNodePlus</xsl:otherwise>
                      </xsl:choose>
                    </xsl:attribute>
                    <xsl:element name="div">
                      <xsl:text disable-output-escaping="yes"> </xsl:text>
                    </xsl:element>
                  </xsl:element>
                </xsl:when>
                <!--value-->
                <xsl:otherwise>
                  <xsl:element name="div">
                    <xsl:attribute name="class">TreeNodeEmpty</xsl:attribute>
                    <xsl:text disable-output-escaping="yes"> </xsl:text>
                  </xsl:element>
                </xsl:otherwise>
              </xsl:choose>
              <xsl:element name="div">
                <xsl:attribute name="class">TreeNodeTypeFun</xsl:attribute>
                <xsl:text disable-output-escaping="yes"> </xsl:text>
              </xsl:element>
              <xsl:element name="div">
                <!-- if has childs  -->
                <xsl:attribute name="description">
                  <xsl:choose>
                    <xsl:when test="count(enter) &gt; 0">
                      <xsl:text>Start Time : </xsl:text>
                      <xsl:value-of select="enter" />
                      <xsl:text>&lt;br /&gt;</xsl:text>
                    </xsl:when>
                    <!-- old format support -->
                    <xsl:otherwise>
                      <xsl:if test="count(enterLabel) &gt; 0">
                        <xsl:text>Start Time : </xsl:text>
                        <xsl:value-of select="enterLabel" />
                        <xsl:text>&lt;br /&gt;</xsl:text>
                      </xsl:if>
                    </xsl:otherwise>
                  </xsl:choose>
                  <xsl:if test="count(leave) &gt; 0">
                    <xsl:text>End Time : </xsl:text>
                    <xsl:value-of select="leave" />
                    <xsl:text>&lt;br /&gt;</xsl:text>
                  </xsl:if>
                  <xsl:if test="count(events/event)&gt;0">
                    <xsl:text>Total time : </xsl:text>
                    <xsl:value-of select="processTime" />
                    <xsl:text>&lt;br /&gt;</xsl:text>
                    <xsl:text>Self time : </xsl:text>
                    <xsl:value-of select="selfTime" />
                    <xsl:text>&lt;br /&gt;</xsl:text>
                  </xsl:if>
                </xsl:attribute>
                <!-- if not slow  -->
                <xsl:if test="count(link)=0">
                  <xsl:attribute name="class">TreeNodeTime</xsl:attribute>
                </xsl:if>
                <!-- if slow -->
                <xsl:if test="count(link)&gt;0">
                  <xsl:attribute name="class">TreeNodeTimeHigh</xsl:attribute>
                  <xsl:element name="a">
                    <xsl:attribute name="name">
                      <xsl:text>#</xsl:text>
                      <xsl:value-of select="link" />
                    </xsl:attribute>
                  </xsl:element>
                </xsl:if>
                <xsl:element name="nobr">
                  <xsl:value-of select="processTime" />
                  <xsl:text> ms</xsl:text>
                </xsl:element>
              </xsl:element>
              <xsl:element name="div">
                <xsl:attribute name="class">TreeNodeValue</xsl:attribute>
                <!--value-->
                <xsl:call-template name="AVIMOMPEventValue">
                  <xsl:with-param name="id">
                    <xsl:value-of select="$id" />
                  </xsl:with-param>
                </xsl:call-template>
              </xsl:element>
            </xsl:element>
          </xsl:element>
        </xsl:element>
        <xsl:choose>
          <!-- We want to show license error message instead of child nodes
            if there is only professional license for this computer -->
          <xsl:when test="count(//professionalLicenseLimitation) &gt; 0">
            <tr id="1.0">
              <td>
                <div class="handlerLicenseMessage" id="handlerLicenseMessage_ExecutionTreeView_1.0">
                  <li />
                </div>
              </td>
            </tr>
          </xsl:when>
          <xsl:otherwise>
            <!--childs-->
            <xsl:for-each select="events/event">
              <xsl:variable name="pos" select="position()" />
              <xsl:call-template name="AVIMOMPTreeRow">
                <xsl:with-param name="id">
                  <xsl:value-of select="$id" />
                  <xsl:text>.</xsl:text>
                  <xsl:value-of select="position()-1" />
                </xsl:with-param>
                <xsl:with-param name="type">
                  <xsl:choose>
                    <xsl:when test="count(events/event) &gt; 0 or position() = last()">
                      <xsl:choose>
                        <xsl:when test="count(../event[$pos - 1]/events/event) = 0">last</xsl:when>
                        <xsl:otherwise>empty</xsl:otherwise>
                      </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:choose>
                        <xsl:when test="count(../event[$pos - 1]/events/event) &gt; 0">first</xsl:when>
                        <xsl:otherwise>sibling</xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:with-param>
                <xsl:with-param name="left">
                  <xsl:choose>
                    <xsl:when test="$type = 'last' or $type = 'empty'">
                      <xsl:value-of select="$left + 13" />
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="$left" />
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:with-param>
                <xsl:with-param name="parent-id">
                  <xsl:value-of select="$id" />
                </xsl:with-param>
              </xsl:call-template>
            </xsl:for-each>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:template>
      <xsl:template name="AVIMOMPEventValue">
        <xsl:param name="id" />
        <table cellpadding="0" cellspacing="0" class="TreeNode">
          <tr>
            <td id="{$id}sp.{position()}">
              <xsl:choose>
                <xsl:when test="stack/stackPoint/namespace and stack/stackPoint/class and ((stack/stackPoint/parameters/variable or stack/stackPoint/parameters/members or parameters/elements) or (substring-before(stack/stackPoint/description, '.') != substring-before(stack/stackPoint/namespace, '.') and substring-before(stack/stackPoint/description, '.') != stack/stackPoint/namespace))">
                  <xsl:attribute name="onclick">
                    <xsl:text>Expander(this,'</xsl:text>
                    <xsl:value-of select="$id" />
                    <xsl:text>sp.</xsl:text>
                    <xsl:value-of select="position()" />
                    <xsl:text>','TreeNodeDetails','*</xsl:text>
                    <xsl:for-each select="stack/stackPoint">
                      <xsl:value-of select="this" />
                      <xsl:text>',</xsl:text>
                      <!-- Parameters -->
                      <xsl:text>[</xsl:text>
                      <xsl:for-each select="parameters/variable">
                        <xsl:text>'*</xsl:text>
                        <xsl:value-of select="objectID" />
                        <xsl:text>'</xsl:text>
                        <xsl:if test="position()!=last()">
                          <xsl:text>,</xsl:text>
                        </xsl:if>
                      </xsl:for-each>
                      <xsl:for-each select="parameters/members">
                        <xsl:text>'*</xsl:text>
                        <xsl:value-of select="objectID" />
                        <xsl:text>'</xsl:text>
                        <xsl:if test="position()!=last()">
                          <xsl:text>,</xsl:text>
                        </xsl:if>
                      </xsl:for-each>
                      <xsl:for-each select="parameters/elements">
                        <xsl:text>'*</xsl:text>
                        <xsl:value-of select="objectID" />
                        <xsl:text>'</xsl:text>
                        <xsl:if test="position()!=last()">
                          <xsl:text>,</xsl:text>
                        </xsl:if>
                      </xsl:for-each>
                      <xsl:text>],[</xsl:text>
                      <xsl:for-each select="parameters/variable">
                        <xsl:text>'</xsl:text>
                        <xsl:value-of select="name" />
                        <xsl:text>'</xsl:text>
                        <xsl:if test="position()!=last()">
                          <xsl:text>,</xsl:text>
                        </xsl:if>
                      </xsl:for-each>
                      <xsl:for-each select="parameters/members">
                        <xsl:text>'</xsl:text>
                        <xsl:value-of select="name" />
                        <xsl:text>'</xsl:text>
                        <xsl:if test="position()!=last()">
                          <xsl:text>,</xsl:text>
                        </xsl:if>
                      </xsl:for-each>
                      <xsl:for-each select="parameters/elements">
                        <xsl:text>'</xsl:text>
                        <xsl:value-of select="name" />
                        <xsl:text>'</xsl:text>
                        <xsl:if test="position()!=last()">
                          <xsl:text>,</xsl:text>
                        </xsl:if>
                      </xsl:for-each>
                      <xsl:text>],</xsl:text>
                      <xsl:choose>
                        <xsl:when test="source">
                          <xsl:text>true,</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:text>false,</xsl:text>
                        </xsl:otherwise>
                      </xsl:choose>
                      <xsl:choose>
                        <xsl:when test="substring-before(description, '.') != substring-before(namespace, '.') and substring-before(description, '.') != namespace">
                          <xsl:text>true, '</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:text>false,'</xsl:text>
                        </xsl:otherwise>
                      </xsl:choose>
                      <xsl:value-of select="namespace" />
                      <xsl:choose>
                        <xsl:when test="namespace != ''">
                          <xsl:text>.</xsl:text>
                        </xsl:when>
                      </xsl:choose>
                      <xsl:value-of select="class" />
                      <xsl:text>.</xsl:text>
                      <xsl:value-of select="method" />
                      <xsl:text>','</xsl:text>
                      <xsl:value-of select="normalize-space(methodInfo)" />
                      <xsl:text>','</xsl:text>
                      <xsl:value-of select="iPointer" />
                      <xsl:text>');</xsl:text>
                    </xsl:for-each>
                  </xsl:attribute>
                  <xsl:attribute name="class">TreeNodeDetailsPlus</xsl:attribute>
                  <li>
                    <xsl:call-template name="AVIMOMPEventName" />
                  </li>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:attribute name="class">TreeNodeDetails</xsl:attribute>
                  <xsl:call-template name="AVIMOMPEventName" />
                </xsl:otherwise>
              </xsl:choose>
            </td>
            <xsl:if test="count(serverLink) &gt; 0">
              <xsl:element name="td">
                <xsl:attribute name="title">Chain info</xsl:attribute>
                <xsl:attribute name="onclick">
                  <xsl:value-of select="serverLink" />
                </xsl:attribute>
                <xsl:attribute name="class">TreeNodePChainOut</xsl:attribute>
                <xsl:element name="img">
                  <xsl:attribute name="src">Images\AVIcode.DotNet.SystemCenter.Images.empty</xsl:attribute>
                  <xsl:attribute name="width">20</xsl:attribute>
                  <xsl:attribute name="height">15</xsl:attribute>
                </xsl:element>
              </xsl:element>
            </xsl:if>
            <xsl:if test="count(clientLink) &gt; 0">
              <xsl:element name="td">
                <xsl:attribute name="title">Chain info</xsl:attribute>
                <xsl:attribute name="onclick">
                  <xsl:value-of select="clientLink" />
                </xsl:attribute>
                <xsl:attribute name="class">TreeNodePChainIn</xsl:attribute>
                <xsl:element name="img">
                  <xsl:attribute name="src">Images\AVIcode.DotNet.SystemCenter.Images.empty</xsl:attribute>
                  <xsl:attribute name="width">20</xsl:attribute>
                  <xsl:attribute name="height">15</xsl:attribute>
                </xsl:element>
              </xsl:element>
            </xsl:if>
          </tr>
        </table>
      </xsl:template>
      <xsl:template name="AVIMOMPEventName">
        <xsl:for-each select="stack/stackPoint">
          <xsl:value-of select="description" disable-output-escaping="yes" />
          <xsl:if test="(namespace)">
            <xsl:if test="(substring-before(description, '.') = substring-before(namespace, '.') or substring-before(description, '.') = namespace) and (iPointer) and (iPointer != '')">
              <xsl:text> +</xsl:text>
              <xsl:value-of select="iPointer" disable-output-escaping="yes" />
            </xsl:if>
          </xsl:if>
        </xsl:for-each>
      </xsl:template>
      <xsl:template name="AVIMOMPMonitorScript">
        <xsl:element name="script">
          <xsl:comment>
            

function tdcontent(s){
    if (s == undefined || s == '')
        return '&amp;#160;'
    else
        return s;  
}

function TableHead (className){
    return '&lt;table class="' + className + '"  cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;';
}

var spaceImage = '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
var siblingImage = '&lt;td class="TreeNodeSibling"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
var lastImage = '&lt;td class="TreeNodeLast"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
var lineImage = '&lt;td class="TreeNodeLine"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';

///////////////////////////////////////////////////////////////////////////////
// Object processing  
///////////////////////////////////////////////////////////////////////////////
var id = -1; 

function OdId(){
    id ++;   
    return '*' + id;    
}

function OD(ot, ov){
    od[OdId()] = new ObjData(ot, ov);	
}

function Bl(val){
    if (val == 1)
        OD("BOOLEAN", "true");
    else
        OD("BOOLEAN", "false");
}

function OV(Id, Name)
{
    if (typeof(Id) == 'string'){
        this.Id = [Id];
        this.Name = [Name];
    }
    else{
        this.Id = Id;	
        this.Name = Name;	
    }
}

//object data sctructure
function ObjData(ot, ov)
{
    this.ot = ot;
    this.ov = ov;	
    if (typeof(ov) == 'string')
        this.os = 's';
    else
        if (this.ot == t1 || this.ot == t2 || this.ot == t3)
            this.os = 'a';
        else
            this.os = 'c';	
}

var od = new Array(); //full object description                             
                      
//FillObjects(); //This function is described in the C# code and attached to the html


function GetParameterDefinition(id, name){
    value = '';    
    
    if (od[id].os  == 's'){
        value = name + ' = ' + od[id].ov;
        
        if (od[id].ot == 'STRING')
            value = name + ' = \'' + od[id].ov + '\'';
    }                  
            
    type = '';
   flag = true;
    
    for (var i = od[id].ot.length; i &gt;= 0; i=i-1) {
        
        if (od[id].ot.charAt(i) != '.' &amp;&amp; flag)
            type = od[id].ot.charAt(i) + type;
        else flag = false; 	    	          
    }
    
    return  '&lt;span title="' + od[id].ot + ' ' + value  + '"&gt;&lt;span class="TreeNodeValueType"&gt;' + type + '&lt;/span&gt;&lt;span class="TreeNodeValueParam"&gt;' + name + '&lt;/span&gt;&lt;/span&gt;';           
}  


////////////////////variable
 
    //enum
    var stateClosed = "TreeVarNodePlus";
    var stateOpened = "TreeVarNodeMinus";
    var stateEmpty  = "TreeVarNodeSimple";
    var stateCycle  = "TreeVarNodeSimple"; 
    var stateSpace  = "TreeVarNodeSpace";     
    //enum end 
    
    //enum
    var treeEmpty   = '0';
    var treeSibling = '1';
    var treeLine    = '2';    
    var treeLast    = '3';    
    //enum end     
    
    //enum
    var itemSimple			= 'TreeNodeTypeSimple';     
    var itemArray			= 'TreeNodeTypeArray';
    var itemClass			= 'TreeNodeTypeClass';    
    var itemClassCycle		= 'TreeNodeTypeClassCycle';    
    var itemClassNoInfo		= 'TreeNodeTypeClassNoInfo';    
    //enum end 

    var identity = 1;   //for id generation        
    
    function newId(){
        identity ++;
        return identity;
    }
      
    //often used tags
    var tableEnd = '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;';
    
    function switchCycleOn() {
        var obj = event.srcElement;
        
        while (obj.parentElement){
            obj = obj.parentElement;
            if (obj.className=="Normal" &amp;&amp; obj.id != undefined &amp;&amp; obj.tagName == "TR"){
                obj.className = "Alive";
                document.getElementById(obj.cycleObjectId).className = "Alive";
                return;
            }                             
        }        
    }
    
    
    function switchCycleOff() {
        var obj = event.srcElement;
        
        while (obj.parentElement){
            obj = obj.parentElement;
            if (obj.className=="Alive" &amp;&amp; obj.id != undefined &amp;&amp; obj.tagName == "TR"){
                obj.className = "Normal";
                document.getElementById(obj.cycleObjectId).className = "Normal";                
                return;
            }                             
        }  
    }   
    

    function GetItemRow(name, value, info, type, 
                     onclick, itemId, tree, state, itemType, cycleObjId)
    {      
        name = tdcontent(name);
        value = tdcontent(value);
        info = tdcontent(info);        
        
        var cycle = '';     
        if (cycleObjId != ''){      
            cycle += ' onmouseover = "switchCycle(\'"' + itemId + '"\',\'"' + cycleObjId + '"\', 1)" '; 
            cycle += ' onmouseout = "switchCycle(\'"' + itemId + '"\',\'"' + cycleObjId + '"\', 0)" '; 
        }                                     
        
        var s = '&lt;tr class="Normal" id="' + itemId + '" title="' + type + '" &gt;';
        //name td
        s += '&lt;td&gt;' + GetTreeNodeTable(name, onclick, itemId, tree, state, itemType) + '&lt;/td&gt;';        
        //value td  
        s += '&lt;td&gt;' + value + '&lt;/td&gt;';      
        //structure td               
        s += '&lt;td&gt;' + info + '&lt;/td&gt;&lt;/tr&gt;';   
        
        return s;
    }
    
    
    function InsertItem(tableId, index, name, value, info, type, 
                     onclick, itemId, tree, state, itemType, cycleObjId){     
        objTable = document.getElementById(tableId); 
        if (objTable) 
        {      
            name = tdcontent(name);
            value = tdcontent(value);
            info = tdcontent(info);            
                                      
            var s = GetTreeNodeTable(name, onclick, itemId, tree, state, itemType);
            
            var objRow;
            if (index &gt;= 0)
                objRow = objTable.insertRow(index);
            else     
                objRow = objTable.insertRow();
                
            objRow.id = itemId;            
            objRow.title = type;            
            objRow.className = "Normal"; 
                      
            if (cycleObjId != ''){      
          
                objRow.onmouseover = switchCycleOn;
                objRow.onmouseout = switchCycleOff;                
                objRow.cycleObjectId = cycleObjId;
            }
            
            var objCell;
            objCell = objRow.insertCell();
            objCell.innerHTML  = s;
                        
            objCell = objRow.insertCell();  
            objCell.innerHTML  = value;   			
          
            objCell = objRow.insertCell();
            objCell.innerHTML  = info;        
            
            return true;
        } else return false;
    }
    
    function EscapeForHtml(str) {
        var result = str;
        if (result != null &amp;&amp; result != "") {
            result = result.replace(/[&lt;]/g,'&amp;lt;');
            result = result.replace(/[&gt;]/g,'&amp;gt;');
        }
        return result;
    }
    
    function GetTreeNodeTable(name, onclick, itemId, tree, state, itemType){     
          var s = TableHead('TreeNodeValue') + '&lt;td&gt;' + TableHead('TreeNode');                  
            for (var i = 0; len = tree.length, i &lt; len; i++){
                switch (tree.charAt(i)){
                    case treeEmpty:
                        s += spaceImage;                              
                    break; 
                    case treeLast :
                        s += lastImage;                              
                    break; 
                    case treeLine :
                        s += lineImage;
                    break; 
                    case treeSibling:
                        s += siblingImage;                              
                    break; 
                }
            }            
            s += '&lt;td onclick="' + onclick + '" class="' + state + '" id="' + itemId + 'sign"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;&lt;td class="' + itemType + '"&gt;' + tableEnd + '&lt;/td&gt;&lt;td&gt;' + TableHead('TreeNodeValueName') + '&lt;td&gt;' + EscapeForHtml(name) + tableEnd + tableEnd;
            
            return s;                  
    }
    
    function Cycle(path, id){
        var cnt = 1;        
        for (var i = path.length - 1; i &gt;= 0; i=i-1)
           if (path.charAt(i) == '*'){
               f = true;
               for (var j = 1; len = id.length, j &lt; len; j++){
                  if (id.charAt(j) != path.charAt(i+j)) 
                     f = false;
               };             
               if (f &amp;&amp; (path.length &lt;= i + id.length || path.charAt(i + id.length) == '.')) return cnt;
               cnt ++;
           }   
        return -1;           	        
    }
    
    function GetCycleObjId(itemID, cycle){
        if (cycle == -1)
            return '';                       
        
        var p = itemID.lastIndexOf('.');
        while (p &gt;= 0 &amp;&amp; cycle &gt; 0){
            itemID = itemID.substring(0, p);
            cycle = cycle-1;
            p = itemID.lastIndexOf('.');
        }    
        
        return itemID;
    }
    
    function InsertObjectLink(tableId, index, itemId, objId, name, path, tree){
        var cycle = Cycle(path, objId);
        
        if (itemId == '')
            itemId = newId();              
           
        var onclick;
        var state;
       
        if (od[objId].os == 's' || objId == '*0' || typeof(od[objId].ov) == 'undefined' || typeof(od[objId].ov.Id) == 'undefined' || od[objId].ov.Id.length == 0)
        {
            onclick = '';
            if (tree == '')
                state = stateSpace;                
            else              
                state = stateEmpty;
        }else{ 
            if (cycle == -1){          
                var escapedName = name;
                escapedName = escapedName.replace(/\\/g, '\\\\');
                escapedName = escapedName.replace(/'/g, "\\'");      
                onclick = 'OpenLink(\'' + itemId + '\',\''+ objId.replace(/'/g, "\\'") + '\',\''+ escapedName +'\',\''+ path +'\',\''+ tree + '\')';
                state = stateClosed;
            }else{   
                onclick = '';
                state = stateCycle;
            }    
        } 
       
        if (tableId == '')
            return GetItemRow(name,GetValue(objId) , GetInfo(objId, cycle), 
                        od[objId].ot, onclick, itemId, tree, state, 
                        GetItemType(objId, cycle), GetCycleObjId(itemId, cycle));  
        else                
            return InsertItem(tableId, index, name, GetValue(objId), GetInfo(objId, cycle), 
                        od[objId].ot, onclick, itemId, tree, state, 
                       GetItemType(objId, cycle), GetCycleObjId(itemId, cycle));          
        
            
    }     
    
    
    function GetInfo(id, cycle){
        
        if (id == "*0")
            return 'optimized';
        
        if (cycle == 1)         
        return 'Circular reference one level up';  
        
        if (cycle &gt; 1)         
        return 'Circular reference ' + cycle + ' levels up'; 
            
        if (od[id].os == 'a') 
            return 'array';             
            
        if (od[id].os == 'c') 
            if (typeof(od[id].ov) == 'undefined' || typeof(od[id].ov.Id) == 'undefined' || od[id].ov.Id.length == 0)				
                return 'class (members not collected)';                
            else            
                return 'class';           
    
        return "";
    }
    
    function GetItemType(id, cycle){
        
        if (cycle &gt; 0)         
            return itemClassCycle ;       
     
        if (od[id].os == 'a') 
            return itemArray;      
        
        if (od[id].os == 'c'){ 
           if (typeof(od[id].ov) == 'undefined' || typeof(od[id].ov.Id) == 'undefined' || od[id].ov.Id.length == 0)				
                return itemClassNoInfo ;                
           else            
                return itemClass;         
        }
            
        if (od[id].os == 's')               
            return itemSimple;    
    
        return "";
    }  
    
    function GetValue(objId){
        if (od[objId].os == 's')
            return od[objId].ov;                
        else            
            return '';                           
    }   
         
    function OpenLink(itemId, objectId, name, path, tree){ 
        var objRow = document.getElementById(itemId); 
        if (objRow) 
        {
            //Define index and delete row
            var index = objRow.rowIndex;
            var tableId = objRow.parentElement.parentElement.id;                        
            objRow.parentElement.deleteRow(objRow.rowIndex);           
            
            //Insert root
            var onClick = 'TreeExpander(\''+ itemId + '\', \'TreeVarNode\')';        
            InsertItem(tableId, index, name, '', 
                   GetInfo(objectId, -1), od[objectId].ot, onClick, 
                   itemId, tree, stateOpened, GetItemType(objectId, -1), ''); 
            
            //insert children
            var len = od[objectId].ov.Id.length;
            for (var i = 0; i &lt; len; i++){
                var childTree = tree;
                if (childTree.length &gt; 0){
                    if (childTree.charAt(childTree.length - 1) == treeSibling)                    
                        childTree = childTree.substring(0, childTree.length - 1) + treeLine;
                    else      
                        childTree = childTree.substring(0, childTree.length - 1) + treeEmpty;                                        
                }       
                        
                if (i == len-1) 
                    childTree += treeLast;
                else    
                    childTree += treeSibling;                    
                  
                
                InsertObjectLink(tableId, index + i + 1, itemId + '.' + i, '*' +  od[objectId].ov.Id[i], 
                                od[objectId].ov.Name[i], path  + '.' + objectId, childTree);
            }                            
        }               
    }

///////////////////////////////////////////////////////////////////////////////
// Expand
///////////////////////////////////////////////////////////////////////////////

function Expander(obj, child, prefix, thisId, varIds, varNames, isSource, isAliased, 
        functionName, methodInfo, iPointer)
{	
    if (obj.className.indexOf('Minus') &gt; 0)
    {
        obj.className = prefix + 'Plus';
        obj.parentElement.parentElement.rows[1].style.display = 'none';		
    }
    else
    {
        obj.className = prefix + 'Minus';
        var row = obj.parentElement.parentElement.rows[1];				
        if (typeof(row) == 'undefined')
        {
            row = obj.parentElement.parentElement.insertRow();
            var cell = row.insertCell();					
            cell.innerHTML = OpenNodeContent(child, thisId, isSource, varIds, varNames, isAliased,
             functionName, methodInfo, iPointer);
        }
        else
        {
            row.style.display = '';
        }
    }
}

//  25-OCT-2006 ASochenov
//  Expand/Collapse a tree's elements
function ExpandAll (item) 
{
    var resourceView = false;
    if (item.tagName.toLowerCase() != 'tr') {
        resourceView = true;
        item = item.parentNode.parentNode;
    }

    if (item.nextSibling != null) {
        if(item.firstChild.firstChild.firstChild.tagName.toLowerCase() == "div")
        {
            var itm = item.firstChild.firstChild.firstChild;
            if(itm &amp;&amp; itm.className != "TreeNodeEmpty")
                item.firstChild.firstChild.firstChild.className = "TreeNodeMinus";
        }
        else
            item.firstChild.firstChild.firstChild.firstChild.childNodes[0].className = "TreeNodeMinus";
        item = item.nextSibling;
    } else {
        return;
    }
    
    if (resourceView == false) {
        while (item)
        {
            item.style.display = '';
            if(item.firstChild.firstChild.firstChild.tagName.toLowerCase() == "div")
            {
                var itm = item.firstChild.firstChild.firstChild.nextSibling;
                if(itm &amp;&amp; itm.className != "TreeNodeEmpty")
                    item.firstChild.firstChild.firstChild.nextSibling.className = "TreeNodeMinus";
            }
            else
            {
                var child = item.firstChild.firstChild.firstChild.firstChild.childNodes[1];
                if (child.firstChild != null &amp;&amp; child.firstChild.tagName.toLowerCase() == 'li')
                {
                    child.className = "TreeNodeMinus";
                }
            }
            item = item.nextSibling;
        }
    }
    else 
    {	    
        // 09-APR-2008 MShehovtsov
            if (professionalLicenseLimitation)
            {            
                while (item)
                {
                    var candidates = item.getElementsByTagName("DIV");
                    for (var i = 0; i &lt; candidates.length; i++)
                    {
                        if (typeof(candidates[i].id) != undefined)
                        {
                            if (candidates[i].id.indexOf("handlerLicenseMessage_ResourceGroupView") != -1)
                            {
                                if (candidates[i].innerHTML == "")
                                {
                                    candidates[i].innerHTML = GetProfessionalLicenseLimitationMessage("This information");
                                }
                            }
                        }
                    }
                    
                    item.style.display = '';
                    var row = item.childNodes[(item.firstChild.tagName.toLowerCase() == 'td' ? 0 : 1)].firstChild.firstChild.firstChild;
                    for (var i = 0; i &lt; row.childNodes.length; i++) 
                    {
                        if (row.childNodes[i].className == 'TreeNodePlus') {
                            row.childNodes[i].className = "TreeNodeMinus";
                            break;
                        }
                    }
                    item = item.nextSibling;
                }	    
            }
            else
            {
                while (item)
                {    	            
                    item.style.display = '';
                    var row = item.childNodes[(item.firstChild.tagName.toLowerCase() == 'td' ? 0 : 1)].firstChild.firstChild.firstChild;
                    for (var i = 0; i &lt; row.childNodes.length; i++) 
                    {
                        if (row.childNodes[i].className == 'TreeNodePlus') {
                            row.childNodes[i].className = "TreeNodeMinus";
                            break;
                        }
                    }
                    item = item.nextSibling;
                }
            }
        // 09-APR-2008 MShehovtsov END
    }
}
//  25-OCT-2006 ASochenov end

function TreeExpander(itemId, prefix)
{
    var objSign = document.getElementById(itemId + 'sign');  
    if (objSign)
    {
        var i = 0;
        
        if (objSign.className.indexOf('Minus') &gt; 0)
        {
            objSign.className = prefix + 'Plus';
            while (document.getElementById(itemId + '.' + i)){
                ShowHide(0, itemId + '.' + i);
                
                var objSubSign = document.getElementById(itemId + '.' + i + 'sign');
                if (objSubSign)
                    if (objSubSign.className.indexOf('Minus') &gt; 0)
                        TreeExpander(itemId + '.' + i, prefix)
                i ++;
            }			
        }	
        else if (objSign.className.indexOf('Plus') &gt; 0)
        {
            objSign.className = prefix + 'Minus';
            while (document.getElementById(itemId + '.' + i)){
                ShowHide(1, itemId + '.' + i);
                i ++;
            }			
        }
    }
}

function GlobalTreeExpander(itemId, showobj, prefix)
{
    var objSign = document.getElementById(itemId);  
   
    
    if (objSign.className.indexOf('Minus') &gt; 0)
    {
        objSign.className = prefix + 'Plus';		
        ShowHide(0, showobj);	      	
    }	
    else if (objSign.className.indexOf('Plus') &gt; 0)
    {
        objSign.className = prefix + 'Minus';
        ShowHide(1, showobj);	
    }
}

function OpenNodeContent(id, thisId, isSource, varIds, varNames, isAliased, functionName, 
        methodInfo, iPointer)	 
{	
    var s = '';
    //if aliased than display real name with parameters
    if (isAliased){
        s += '&lt;span class="FunctionNameAndParemeters"&gt;' + functionName + '(';		
        if (typeof(methodInfo) != 'undefined')
            s += methodInfo;
        else{
            for (var i = 0; count = varIds.length, i &lt; count; i++){	
                s += GetParameterDefinition(varIds[i], varNames[i]);
                if (i != count - 1)
                    s += ', ';
            }
        }
        s += ')';
        if (iPointer != '')
            s += '  +' + iPointer;
        s += '&lt;/span&gt;';
    }		
    
    if(varIds.length &gt; 0)
    {
      s += '&lt;div&gt;' + TableHead('Tab') + '&lt;td class="TabBookmarkSel" id="' + id + '0" onclick="SetTabValue(\'' + id + '\',0)"&gt;';
    
      //variables tab header
      s += '&lt;nobr&gt;Variables(';
      s += (thisId == '*0') ? varIds.length : (varIds.length + 1);
      s += ')&lt;/nobr&gt;&lt;/td&gt;';
    
    //add new tab for source
    if (isSource)
        s += '&lt;td class="TabSeparator"&gt;&amp;nbsp;&lt;/td&gt;&lt;td class="TabBookmark" id="' + id + '2" onclick="SetTabValue(\'' + id + '\',2)"&gt;&lt;nobr&gt;Source&lt;/nobr&gt;&lt;/td&gt;';
            
    //functionName = TransformToMSDNFormat (functionName);	
    var linkMSDN = '&lt;a href="http://search.msdn.microsoft.com/search/default.aspx?query=' + functionName + '" target="_blank" class="MSDNImg" alt="Search in MSDN" &gt;&lt;/a&gt;';
    s += '&lt;td class="TabBookmarkEmpty"&gt;' + linkMSDN + '&lt;/td&gt;'
    s += '&lt;/tr&gt;&lt;tr&gt;&lt;td class="TabContent" colspan="';
    s += (isSource) ? 4 : 2;
    s += '"&gt;&lt;div id="' + id + 'content0" Style="DISPLAY:block"&gt;';
    s += '&lt;table cellpadding="0" cellspacing="0" class="TreeVar" id="' + id + 'treevar"&gt;';
    
    //table header
    s += '&lt;col class="TreeVarCol1"/&gt;&lt;col class="TreeVarCol2"/&gt;&lt;col class="TreeVarCol3"/&gt;';
    s += '&lt;tr&gt;&lt;th class="TreeVarHeader1"&gt;Name&lt;/th&gt;&lt;th class="TreeVarHeader2"&gt;Value&lt;/th&gt;&lt;th class="TreeVarHeader3"&gt;Structure&lt;/th&gt;&lt;/tr&gt;';
     
    //insert main members 
    if (thisId != '*0')
        s += InsertObjectLink('','','', thisId, 'this', '', '');
    
    //insert parameters	
    for (var i = 0; i &lt; varIds.length; i++){
        s += InsertObjectLink('','','', varIds[i], varNames[i], '', '');
    }
    
    s += '&lt;/table&gt;&lt;/div&gt;' + tableEnd + '&lt;/div&gt;';
}
    return s;	
    }
    
function TransformToMSDNFormat (functionName) 
{
    if (functionName.indexOf ('.ctor') &gt; 0) {
        var regExp = new RegExp("\\.(.[^\.]+)\.\.ctor$", "gi");
        if ((result = regExp.exec (functionName)) != null) {
            functionName = functionName.replace(/\.ctor/, result[1]);
        }
    }
    
    return functionName;
}

function OpenNode(eventsId, prefix){
   var obj = document.getElementById(eventsId);    
   if (obj){
        // Select execution tree view
        document.getElementById("execution").checked = true;
        ChangeView(false);
        // Expand tree
        while (obj.parentElement){
            obj = obj.parentElement;
            if (obj.className=="treeRow" &amp;&amp; obj.id != undefined){            
               //find ids of nodes
               var arrId = obj.id.split("."); 
               var len = arrId.length;                                           
               for (var i = len - 2; i &gt;= 0; i = i-1)
                    for (var j = i + 1; j &lt; len; j ++)
                        arrId[j] = arrId[i] + "." + arrId[j];
                
               //open nodes
               for (var i = 0; i &lt; len; i ++){
                   var objSign = document.getElementById(arrId[i] + 'sign');
                   if (objSign) 
                       if (objSign.className.indexOf('Plus') &gt; 0) 
                           TreeExpander(arrId[i], prefix);
               }                   
                
               return; 
            }                             
        }               
    }
}


function goTo(where)
{
    document.location.replace(where);
    return false;
}

function SetTabValue(tabControlId, value){
    var i = 0;
 
    while (document.getElementById(tabControlId + i)){
        if (i == value){
            document.getElementById(tabControlId + i).className = "TabBookmarkSel";
            ShowHide(1, tabControlId + 'content' + i);
        } else {
            document.getElementById(tabControlId + i).className = "TabBookmark";
            ShowHide(0, tabControlId + 'content' + i);	    
        }    
        i ++;
    }
}

function ChangeView(val, isRestrictedMode){      
    if (val){
        ShowHide(1, 'GroupingByTypeView');  
        ShowHide(0, 'TreeView');      
        if (isRestrictedMode)
        {
            document.getElementById('ExpandAllButton').style.display = 'block';
        }     
    }
    else{
        ShowHide(1, 'TreeView');   
        ShowHide(0, 'GroupingByTypeView');    
        if (isRestrictedMode)
        {
            document.getElementById('ExpandAllButton').style.display = 'none';
        }                
    }
}


function ShowHide(mode, child)
{
    ProcessProfessionalLicenseLimitationMessage(child);    
    
    var objColl = document.all(child);
    if (objColl == null || objColl.length == 0) {
        return false;
    }
    
    if (typeof(objColl.length) == 'undefined'){
        if (mode == 0)
            objColl.style.display = 'none';
        else
            objColl.style.display = '';		
        return true;
    }
    
    for (var i = 0; i &lt; objColl.length; i++){
        if (mode == 0)
            objColl[i].style.display = 'none';
        else
            objColl[i].style.display = '';			
    }
    
    return true;
}

function GroupViewTree(isLast, isLastParent){	
    return (isLastParent ? spaceImage : lineImage) + (isLast ? lastImage : siblingImage) + spaceImage;
}

function GroupRow(name, duration, callCount, isLast, id){	
    var s = '&lt;td&gt;&lt;table cellpadding="0" cellspacing="0" class="TreeNode"&gt;&lt;tr&gt;';
    s += (isLast ? lastImage : siblingImage);
    if (name != 'Internal execution time')	
        s += '&lt;td class="TreeNodePlus" id="' + id + 'sign" onclick="TreeExpander(\'' + id + '\',\'TreeNode\');"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
    else
        s += spaceImage;	
    s += '&lt;td class="TreeNodeFunctionType"&gt;&lt;/td&gt;';
    s += '&lt;td class="TreeNodeTimeBasic"&gt;' + duration + '&lt;/td&gt;';
    s += '&lt;td class="TreeValue"&gt;' + name + '&lt;/td&gt;';
    if (callCount != ''){
        s += '&lt;td class="TreeNodeValue"&gt;[' + callCount + ' call';
        if (callCount != '1') s += 's'
        s += ']&lt;/td&gt;';
    }
    s += '&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;';
 
    return s;
}

function ProcessProfessionalLicenseLimitationMessage(id)
{
    var unabailableInformation = "\"Execution Tree View\" information";
    var elem = document.getElementById('handlerLicenseMessage_ExecutionTreeView_' + id);
    if (!elem)
    {
        unabailableInformation = "This information";        
        elem = document.getElementById('handlerLicenseMessage_ResourceGroupView_' + id);
    }
    
    if (elem)
    {
        if (elem.innerHTML == "")
        {
            elem.innerHTML = GetProfessionalLicenseLimitationMessage(unabailableInformation);
        }
    }
}

function GetProfessionalLicenseLimitationMessage(unavailableInformation)
{
    var message = professionalLicenseLimitationTemplate.replace("#UnavailableInformation", unavailableInformation);
    return message;
}

          </xsl:comment>
        </xsl:element>
      </xsl:template>
      <xsl:template name="AVIMOMPViewerLink">
        <xsl:if test="count(../ViewDetail) &gt; 0">
          <xsl:element name="a">
            <xsl:attribute name="href">
              <xsl:value-of select="../ViewDetail" />
            </xsl:attribute>
            <xsl:text>Click here</xsl:text>
          </xsl:element>
          <xsl:text> for additional Event details.</xsl:text>
        </xsl:if>
      </xsl:template>
      <xsl:template name="AVIMOMPLicenseWizard">
        <xsl:if test="count(licenseWizard) &gt; 0">
          <xsl:value-of select="licenseWizard/licenseWizardText" />
          <xsl:element name="br" />
          <xsl:element name="br" />
          <xsl:text>Please </xsl:text>
          <xsl:element name="a">
            <xsl:attribute name="href">
              <xsl:value-of select="licenseWizard/licenseWizardUrl" />
            </xsl:attribute>
            <xsl:text>click here</xsl:text>
          </xsl:element>
          <xsl:text> to open license management wizard.</xsl:text>
        </xsl:if>
      </xsl:template>
      <!-- end of templates for AVIMOMPMonitorLog -->

      <!-- templates for AVIMOMXMonitorLog -->
      <xsl:template match="EventData" mode="AVIMOMXMonitorLog">
        <xsl:if test="count(notLicense) = 0">
          <xsl:for-each select="*[local-name()='log']">
            <xsl:call-template name="AVIMOMXMain" />
          </xsl:for-each>
        </xsl:if>
        <xsl:call-template name="AVIMOMXLicenseWizard" />
      </xsl:template>
      <xsl:template match="EventData/*[local-name()='log']/Enterprise" mode="AVIMOMXMonitorLog">
        <xsl:if test="count(notLicense) = 0">
          <xsl:for-each select="*[local-name()='log']">
            <xsl:call-template name="AVIMOMXMain" />
          </xsl:for-each>
        </xsl:if>
        <xsl:call-template name="AVIMOMXLicenseWizard" />
      </xsl:template>
      <xsl:template name="AVIMOMXMain">
        <xsl:value-of select="outputScript" disable-output-escaping="yes" />
        <xsl:call-template name="AVIMOMXViewerLink" />
        <table cellpadding="0" cellspacing="0" class="AlignByCompany">
          <tr class="AlignByCompany">
            <td class="AlignByCompany">
              <table cellpadding="0" cellspacing="0" class="Header">
                <tr>
                  <td class="HeaderTitle" onclick="GlobalTreeExpander('exceptionChain','exceptionRows','TreeNode');">Exception Chain</td>
                  <td id="exceptionChain" class="TreeNodeMinus" onclick="GlobalTreeExpander('exceptionChain','exceptionRows','TreeNode');">
                    <li />
                  </td>
                </tr>
              </table>

              <table cellpadding="0" cellspacing="0" id="exceptionRows" class="ExceptionTree">
                <xsl:for-each select="events/event">
                  <xsl:call-template name="AVIMOMXExceptionRow" />
                </xsl:for-each>
              </table>

              <table cellpadding="0" cellspacing="0" class="Header">
                <tr>
                  <td class="HeaderTitle" onclick="GlobalTreeExpander('exceptionDataH','exceptionContent','TreeNode');">Exception Data</td>
                  <td id="exceptionDataH" class="TreeNodeMinus" onclick="GlobalTreeExpander('exceptionDataH','exceptionContent','TreeNode');">
                    <li />
                  </td>
                </tr>
              </table>
              <div id="exceptionContent">
                <xsl:call-template name="AVIMOMXExceptionData" />
              </div>

              <table cellpadding="0" cellspacing="0" class="Header">
                <tr>
                  <td class="HeaderTitle" onclick="GlobalTreeExpander('exceptionStackH','mainTreeFun','TreeNode');">Stack</td>
                  <td id="exceptionStackH" class="TreeNodeMinus" onclick="GlobalTreeExpander('exceptionStackH','mainTreeFun','TreeNode');">
                    <li />
                  </td>
                </tr>
              </table>
              <xsl:call-template name="AVIMOMXFunctionStack" />
              <!--add modules stack-->
              <xsl:if test="count(modules/module) &gt; 0">
                <table cellpadding="0" cellspacing="0" class="Header">
                  <tr>
                    <td class="HeaderTitle" onclick="GlobalTreeExpander('modulesStack','moduleRows','TreeNode');">Modules List</td>
                    <td id="modulesStack" class="TreeNodePlus" onclick="GlobalTreeExpander('modulesStack','moduleRows','TreeNode');">
                      <li />
                    </td>
                  </tr>
                </table>
                <div id="moduleRows" style="Display:none;" class="ModulesVar">
                  <table cellpadding="0" cellspacing="0" class="TreeVar">
                    <col class="TreeVarCol1" />
                    <col class="TreeVarCol2" />
                    <tr>
                      <th class="TreeVarHeader1">Name</th>
                      <th class="TreeVarHeader2">Value</th>
                    </tr>
                    <xsl:for-each select="modules/module">
                      <Script Language="JavaScript">
                        <xsl:text>document.write(ModulesContent('</xsl:text>
                        <xsl:value-of select="position()" />
                        <xsl:text>','</xsl:text>
                        <xsl:value-of select="name" />
                        <xsl:text>','</xsl:text>
                        <xsl:value-of select="version" />
                        <xsl:text>','</xsl:text>
                        <xsl:value-of select="dateModified" />
                        <xsl:text>','</xsl:text>
                        <xsl:value-of select="path" />
                        <xsl:text>','</xsl:text>
                        <xsl:value-of select="pdbPath" />
                        <xsl:text>'));</xsl:text>
                      </Script>
                    </xsl:for-each>
                  </table>
                </div>
              </xsl:if>
              <xsl:call-template name="AVIMOMXCollectionNotes" />
            </td>
          </tr>
        </table>
        <script language="JavaScript" for="document.onLoad()">OpenContentForHigh();</script>
      </xsl:template>
      <xsl:template name="AVIMOMXCollectionNotes">
        <xsl:if test="(count(properties/add) &gt; 0) or (count(processID) &gt; 0)">
          <table cellpadding="0" cellspacing="0" class="Header">
            <tr>
              <td class="HeaderTitle" onclick="GlobalTreeExpander('collectionNotesH', 'collectionNotes', 'TreeNode');">Collection Notes</td>
              <td id="collectionNotesH" class="TreeNodePlus" onclick="GlobalTreeExpander('collectionNotesH', 'collectionNotes', 'TreeNode');">
                <li />
              </td>
            </tr>
          </table>
          <div id="collectionNotes" style="display: none; padding: 4px;">
            <div id="collectionRows" class="ModulesVar">
              <table cellpadding="0" cellspacing="0" class="TreeVar">
                <col class="TreeVarCol1" />
                <col class="TreeVarCol2" />
                <tr>
                  <th class="TreeVarHeader1">Name</th>
                  <th class="TreeVarHeader2">Value</th>
                </tr>
                <xsl:if test="count(properties/add[@name='fullAppPath']) &gt; 0">
                  <tr class="Normal">
                    <td style="width: 32%;">Full Application Path</td>
                    <xsl:element name="td">
                      <xsl:choose>
                        <xsl:when test="count(properties/add[@name='fullAppPath' and @value]) &gt; 0">
                          <xsl:value-of select="properties/add[@name='fullAppPath']/@value" />
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="properties/add[@name='fullAppPath']" />
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                  </tr>
                </xsl:if>
                <xsl:if test="count(processID) &gt; 0">
                  <tr class="Normal">
                    <td style="width: 32%;">Process ID</td>
                    <td>
                      <xsl:value-of select="processID" />
                    </td>
                  </tr>
                </xsl:if>
                <xsl:if test="count(properties/add[@name='threadId']) &gt; 0">
                  <tr class="Normal">
                    <td style="width: 32%;">Thread ID</td>
                    <xsl:element name="td">
                      <xsl:choose>
                        <xsl:when test="count(properties/add[@name='threadId' and @value]) &gt; 0">
                          <xsl:value-of select="properties/add[@name='threadId']/@value" />
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="properties/add[@name='threadId']" />
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                  </tr>
                </xsl:if>
                <xsl:if test="count(properties/add[@name='cpuCores']) &gt; 0">
                  <tr class="Normal">
                    <td style="width: 32%;">CPU Cores</td>
                    <xsl:element name="td">
                      <xsl:value-of select="properties/add[@name='cpuCores']" />
                    </xsl:element>
                  </tr>
                </xsl:if>
              </table>
            </div>
          </div>
        </xsl:if>
      </xsl:template>
      <xsl:template name="AVIMOMXFunctionStack">
        <div id="mainTreeFun">
          <!-- Checkbox line -->
          <table cellpadding="0" cellspacing="0" class="HeaderInput">
            <tr>
              <td class="CheckBox">
                <input id="input" type="checkbox">
                  <xsl:choose>
                    <xsl:when test="count(events/event/stack/stackPoint[style='Low']) &gt; 0">
                      <xsl:attribute name="onclick">ShowLow(this)</xsl:attribute>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:attribute name="disabled">true</xsl:attribute>
                    </xsl:otherwise>
                  </xsl:choose>
                </input>
                <label for="input">Show Complete Stack</label>
              </td>

              <td class="CheckBox">
                <input id="cbShowParameters" type="checkbox" onclick="return ShowFuncParams(this)" />
                <label for="cbShowParameters">Show parameters</label>
              </td>
              <td class="CheckBox">
                <input id="cbShowLines" type="checkbox" checked="1" onclick="ShowFuncLines(this)" />
                <label for="cbShowLines">Show lines</label>
              </td>
              <td> </td>
              <td>
                <a href="javascript: CollapseAll()">Collapse all</a>
              </td>
            </tr>
          </table>

          <xsl:for-each select="events/event">
            <table id="exData" cellspacing="0" cellpadding="0" class="ExceptionData">
              <xsl:attribute name="mainId">
                <xsl:value-of select="position()" />
                <xsl:text>exd</xsl:text>
              </xsl:attribute>
              <xsl:if test="position() != 1">
                <xsl:attribute name="style">display:none</xsl:attribute>
              </xsl:if>
              <tr>
                <td id="1sp{position()}ex" class="TreeNodeDetailsPlus">

                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="position() = 1">
                        <xsl:text>TreeNodeDetailsPlusSelected</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:text>TreeNodeDetailsPlus</xsl:text>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>

                  <xsl:attribute name="onclick">
                    <xsl:text>Expander(this,'TreeNodeDetails',</xsl:text>
                    <xsl:call-template name="AVIMOMXExceptionParameters">
                      <xsl:with-param name="mainId">
                        <xsl:value-of select="position()" />
                        <xsl:text>ex</xsl:text>
                      </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>, false);</xsl:text>
                  </xsl:attribute>
                  <br />
                  <br />
                  <li>
                    <a name="1sp{position()}ex" />
                    <b>
                      <xsl:value-of select="exception/type" />
                      <xsl:text>: </xsl:text>
                    </b>
                    <xsl:value-of select="exception/description" />
                    <i>
                      <xsl:text> thrown at</xsl:text>
                    </i>
                  </li>
                </td>
              </tr>
            </table>

            <div id="stackelem">
              <xsl:attribute name="mainId">
                <xsl:value-of select="position()" />
                <xsl:text>ev</xsl:text>
              </xsl:attribute>
              <xsl:attribute name="Style">
                <xsl:if test="level = 'derived'">DISPLAY:none</xsl:if>
                <xsl:if test="level != 'derived'">DISPLAY:block</xsl:if>
              </xsl:attribute>
              <xsl:call-template name="AVIMOMXStack">
                <xsl:with-param name="mainId">
                  <xsl:value-of select="position()" />
                  <xsl:text>ev</xsl:text>
                </xsl:with-param>
              </xsl:call-template>
            </div>
          </xsl:for-each>
        </div>
      </xsl:template>
      <xsl:template name="AVIMOMXExceptionRow">
        <tr>
          <xsl:if test="position() != 1">
            <xsl:attribute name="id">LowEx</xsl:attribute>
            <xsl:attribute name="style">Display:none;</xsl:attribute>
          </xsl:if>
          <td>
            <table cellpadding="0" cellspacing="0" id="exceptionValue" class="ExceptionTreeVal">
              <tr id="{position()}evexValue">
                <xsl:if test="position() != 1">
                  <xsl:element name="td">
                    <xsl:choose>
                      <xsl:when test="position()!=last()">
                        <xsl:attribute name="class">ExceptionTreeMiddle</xsl:attribute>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:attribute name="class">ExceptionTreeLast</xsl:attribute>
                      </xsl:otherwise>
                    </xsl:choose>
                    <xsl:element name="div" />
                  </xsl:element>
                </xsl:if>
                <xsl:element name="td">
                  <table cellpadding="0" cellspacing="0" id="exceptionName" class="ExceptionTreeName">
                    <tr id="{position()}evexName">
                      <xsl:choose>
                        <xsl:when test="position()=1 and position()!=last()">
                          <td id="showEx" class="TreeNodePlus" onclick="ShowLowEx(this);">
                            <div />
                          </td>
                        </xsl:when>
                        <xsl:when test="position()!=1">
                          <td id="showEx" class="TreeNodeEmpty"> </td>
                        </xsl:when>
                      </xsl:choose>
                      <xsl:element name="td">
                        <xsl:attribute name="class">
                          <xsl:if test="level != 'derived'">FieldNameSelected</xsl:if>
                          <xsl:if test="level = 'derived'">FieldName</xsl:if>
                        </xsl:attribute>
                        <xsl:attribute name="onclick">
                          JavaScript:ChangeExceptionData(<xsl:value-of select="position()" />);
                        </xsl:attribute>
                        <xsl:element name="a">
                          <xsl:attribute name="href">
                            <xsl:text>#1sp</xsl:text>
                            <xsl:value-of select="position()" />
                            <xsl:text>ex</xsl:text>
                          </xsl:attribute>
                          <!--xsl:attribute name="oncontextmenu">
                                                <xsl:text>MSDNContextMenu(this,'</xsl:text>
                                                <xsl:value-of select='exception/type' />
                                                <xsl:text>');</xsl:text>
                                            </xsl:attribute-->
                          <xsl:value-of select="exception/type" />
                          <xsl:text>: </xsl:text>
                        </xsl:element>
                        <xsl:value-of select="exception/description" />
                      </xsl:element>
                    </tr>
                  </table>
                </xsl:element>
              </tr>
            </table>
          </td>
        </tr>
      </xsl:template>
      <xsl:template name="AVIMOMXExceptionData">
        <xsl:for-each select="events/event">
          <div id="exceptiondata">
            <xsl:attribute name="mainId">
              <xsl:value-of select="position()" />
              <xsl:text>ev</xsl:text>
            </xsl:attribute>
            <xsl:attribute name="Style">
              <xsl:if test="level = 'derived'">DISPLAY:none</xsl:if>
              <xsl:if test="level != 'derived'">DISPLAY:block</xsl:if>
            </xsl:attribute>
            <Script Language="JavaScript">
              <xsl:text>document.write(ExceptionExpander('</xsl:text>
              <xsl:value-of select="position()" />
              <xsl:text>exTree','*</xsl:text>
              <xsl:value-of select="exception/id" />
              <xsl:text>'));</xsl:text>
            </Script>
          </div>
        </xsl:for-each>
      </xsl:template>
      <xsl:template name="AVIMOMXStack">
        <xsl:param name="mainId" />
        <table class="TreeFun" cellspacing="0" cellpadding="0">
          <xsl:for-each select="stack/stackPoint">
            <xsl:variable name="pos" select="position()" />
            <xsl:if test="style != 'Low' and ../stackPoint[$pos - 1]/style = 'Low'">
              <tr id="Dots" class="Dots">
                <td colspan="2">...</td>
              </tr>
            </xsl:if>
            <tr>
              <xsl:if test="style='Low'">
                <xsl:attribute name="id">Low</xsl:attribute>
                <xsl:attribute name="style">Display:none;</xsl:attribute>
              </xsl:if>
              <Script Language="JavaScript">
                <xsl:text>document.write(FuncImage(</xsl:text>
                <xsl:if test="style='High'">
                  <xsl:text>true</xsl:text>
                </xsl:if>
                <xsl:text>));</xsl:text>
              </Script>
              <td>
                <table cellspacing="0" cellpadding="0" class="TreeNode">
                  <tr>
                    <xsl:if test="style='High'">
                      <xsl:attribute name="id">High</xsl:attribute>
                    </xsl:if>
                    <td id="{position()}sp{$mainId}" class="TreeNodeDetailsPlus">
                      <xsl:attribute name="onclick">
                        <xsl:text>Expander(this,'TreeNodeDetails',</xsl:text>
                        <xsl:call-template name="AVIMOMXParameters">
                          <xsl:with-param name="mainId" select="$mainId" />
                        </xsl:call-template>
                        <xsl:text>, true);</xsl:text>
                      </xsl:attribute>
                      <li>
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="style='Low'">TreeNodeValueLow</xsl:when>
                            <xsl:otherwise>TreeNodeValue</xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:call-template name="AVIMOMXEventName">
                          <xsl:with-param name="mainId" select="$mainId" />
                        </xsl:call-template>
                      </li>
                    </td>
                    <td style="WIDTH: 16px">
                      <xsl:if test="count(serverLink) &gt; 0">
                        <xsl:attribute name="title">Chain info</xsl:attribute>
                        <xsl:attribute name="onclick">
                          <xsl:value-of select="serverLink" />
                        </xsl:attribute>
                        <xsl:attribute name="class">TreeNodeEChainIn</xsl:attribute>
                      </xsl:if>
                      <xsl:if test="count(clientLink) &gt; 0">
                        <xsl:attribute name="title">Chain info</xsl:attribute>
                        <xsl:attribute name="onclick">
                          <xsl:value-of select="clientLink" />
                        </xsl:attribute>
                        <xsl:attribute name="class">TreeNodeEChainOut</xsl:attribute>
                      </xsl:if>
                    </td>
                  </tr>
                </table>
              </td>
            </tr>
          </xsl:for-each>
        </table>
      </xsl:template>
      <xsl:template name="AVIMOMXFormatParameters">
        <xsl:param name="var" />
        <xsl:param name="val" />
        <xsl:if test="count($var)&gt;0">
          <xsl:text>[</xsl:text>
          <xsl:for-each select="$var">
            <xsl:text>'</xsl:text>
            <xsl:if test="$val = 'objectID'">
              <xsl:text>*</xsl:text>
            </xsl:if>
            <xsl:value-of select="$val" />
            <xsl:text>'</xsl:text>
            <xsl:if test="position()!=last()">
              <xsl:text>,</xsl:text>
            </xsl:if>
          </xsl:for-each>
          <xsl:text>],</xsl:text>
        </xsl:if>
        <xsl:if test="count($var)=0">
          <xsl:text>'',</xsl:text>
        </xsl:if>
      </xsl:template>
      <xsl:template name="AVIMOMXEventName">
        <xsl:param name="mainId" />

        <div class="FuncIcons">
          <xsl:variable name="parameterExist" select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.parameterExist')" />
          <xsl:choose>
            <xsl:when test="count(parameters/variable) &gt; 0">
              <span class="IconSpace">
                <a onclick="ShowTab('{position()}sp{$mainId}', 0)" style="cursor:hand;">
                  <img src="{$parameterExist}" width="12" height="11" border="0" vspace="2" alt="Show parameters" />
                </a>
              </span>
            </xsl:when>
            <xsl:when test="count(//objects/object[objectID = current()/this]/members/variable) &gt; 0">
              <span class="IconSpace">
                <a onclick="ShowTab('{position()}sp{$mainId}', 1)" style="cursor:hand;">
                  <img src="{$parameterExist}" width="12" height="11" border="0" vspace="2" alt="Show members" />
                </a>
              </span>
            </xsl:when>
            <xsl:when test="count(locals/variable) &gt; 0">
              <span class="IconSpace">
                <a onclick="ShowTab('{position()}sp{$mainId}', 2)" style="cursor:hand;">
                  <img src="{$parameterExist}" width="12" height="11" border="0" vspace="2" alt="Show locals" />
                </a>
              </span>
            </xsl:when>
          </xsl:choose>


          <xsl:variable name="sourceExist" select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.sourceExist')" />
          <xsl:if test="source">
            <span class="IconSpace">
              <a onclick="ShowTab('{position()}sp{$mainId}', 3)" style="cursor:hand;">
                <img src="{$sourceExist}" width="12" height="11" border="0" vspace="2" alt="Show source" />
              </a>
            </span>
          </xsl:if>
        </div>

        <div class="FuncName">
          <xsl:choose>
            <xsl:when test="string-length(substring-before(description, '(')) != 0">
              <xsl:value-of select="substring-before(description, '(')" disable-output-escaping="yes" />
              <span id="funcParams" style="display: none">
                <xsl:attribute name="class">
                  <xsl:if test="not(style) or style != 'Low'">
                    <xsl:text>FuncParams</xsl:text>
                  </xsl:if>
                </xsl:attribute>

                <xsl:text>(</xsl:text>
                <xsl:value-of select="substring-after(description, '(')" disable-output-escaping="yes" />
              </span>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="description" disable-output-escaping="yes" />
            </xsl:otherwise>
          </xsl:choose>

          <xsl:if test="(substring-before(description, '.') = substring-before(method, '.') or substring-before(description, '.') = method) and (iPointer) and (iPointer != '')">
            <span id="funcLines">
              <xsl:choose>
                <xsl:when test="count(source/file) &gt; 0">
                  <xsl:text> +</xsl:text>
                  <xsl:value-of select="iPointer" disable-output-escaping="yes" />
                </xsl:when>
                <xsl:otherwise>
                  <xsl:text> +</xsl:text>
                  <span class="EmptySource">
                    <xsl:value-of select="iPointer" disable-output-escaping="yes" />
                  </span>
                </xsl:otherwise>
              </xsl:choose>
              <!--<xsl:text> +</xsl:text>
                    <xsl:value-of select="iPointer" />-->
            </span>
          </xsl:if>

          <span id="funcLines">
            <xsl:if test="source/file">
              <xsl:text> in </xsl:text>
              <xsl:value-of select="source/file" />
              <xsl:text>:</xsl:text>
              <xsl:value-of select="source/line" />
            </xsl:if>
          </span>
        </div>
      </xsl:template>
      <xsl:template name="AVIMOMXExceptionParameters">
        <xsl:param name="mainId" />

        <xsl:text>'</xsl:text>
        <xsl:value-of select="position()" />
        <xsl:text>sp</xsl:text>
        <xsl:value-of select="$mainId" />
        <xsl:text>',</xsl:text>

        <!-- Exception details -->
        <xsl:if test="count(objects/object[objectID = current()/exception/id]/members/variable) &gt; 0">
          <xsl:text>[</xsl:text>
          <xsl:for-each select="objects/object[objectID = current()/exception/id]/members/variable">
            <xsl:if test="position()!= 1">
              <xsl:text>,</xsl:text>
            </xsl:if>
            <xsl:text>'*</xsl:text>
            <xsl:value-of select="objectID" />
            <xsl:text>'</xsl:text>
          </xsl:for-each>
          <xsl:text>],[</xsl:text>
          <xsl:for-each select="objects/object[objectID = current()/exception/id]/members/variable">
            <xsl:if test="position()!= 1">
              <xsl:text>,</xsl:text>
            </xsl:if>
            <xsl:text>'</xsl:text>
            <xsl:value-of select="name" />
            <xsl:text>'</xsl:text>
          </xsl:for-each>
          <xsl:text>],</xsl:text>
        </xsl:if>
        <xsl:if test="count(objects/object[objectID = current()/exception/id]/members/variable) = 0">
          <xsl:text>'','',</xsl:text>
        </xsl:if>

        <!-- MemIds, MemNames -->
        <xsl:text>'','',</xsl:text>

        <!-- LocIds, LocNames -->
        <xsl:text>'','',</xsl:text>

        <!-- 
            isSource, Source 
            We try to find the dipest function which has source code 
        -->
        <xsl:choose>
          <xsl:when test="count(stack/stackPoint[source]) &gt; 0">
            <xsl:for-each select="stack/stackPoint[source][1]">
              <xsl:call-template name="AVIMOMXSourceInfo">
                <xsl:with-param name="exceptionType" select="ancestor::*[name() = 'event']/exception/type" />
              </xsl:call-template>
            </xsl:for-each>
          </xsl:when>
          <!-- if no sorce data collected we'll take module info from the first "High"-stlyle stackPoint -->
          <xsl:when test="count(stack/stackPoint[style='High']) &gt; 0">
            <xsl:for-each select="stack/stackPoint[style='High'][1]">
              <xsl:call-template name="AVIMOMXSourceInfo">
                <xsl:with-param name="exceptionType" select="ancestor::*[name() = 'event']/exception/type" />
              </xsl:call-template>
            </xsl:for-each>
          </xsl:when>
          <!-- if no sorce data collected and no "High"-stlyle stackPoints exist we'll take module info from the first stackPoint element -->
          <xsl:when test="count(stack/stackPoint) &gt; 0">
            <xsl:for-each select="stack/stackPoint[1]">
              <xsl:call-template name="AVIMOMXSourceInfo">
                <xsl:with-param name="exceptionType" select="ancestor::*[name() = 'event']/exception/type" />
              </xsl:call-template>
            </xsl:for-each>
          </xsl:when>
          <!-- Otherwise we just call template in order to generate default stub -->
          <xsl:otherwise>
            <xsl:call-template name="AVIMOMXSourceInfo">
              <xsl:with-param name="exceptionType" select="exception/type" />
            </xsl:call-template>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:template>
      <xsl:template name="AVIMOMXParameters">
        <xsl:param name="mainId" />
        <xsl:text>'</xsl:text>
        <xsl:value-of select="position()" />
        <xsl:text>sp</xsl:text>
        <xsl:value-of select="$mainId" />
        <xsl:text>',</xsl:text>

        <!-- Variables -->
        <xsl:choose>
          <xsl:when test="(count(parameters/variable[substring(name, 1, 2) != '0$']) &gt; 0) and (count(//professionalLicenseLimitation) = 0)">
            <!-- Variables' ids -->
            <xsl:text>[</xsl:text>
            <xsl:for-each select="parameters/variable[substring(name, 1, 2) != '0$']">
              <xsl:text>'*</xsl:text>
              <xsl:value-of select="objectID" />
              <xsl:text>'</xsl:text>
              <xsl:if test="position()!=last()">
                <xsl:text>,</xsl:text>
              </xsl:if>
            </xsl:for-each>
            <xsl:text>],</xsl:text>
            <!-- Variables' names -->
            <xsl:text>[</xsl:text>
            <xsl:for-each select="parameters/variable[substring(name, 1, 2) != '0$']">
              <xsl:text>'</xsl:text>
              <xsl:value-of select="name" />
              <xsl:text>'</xsl:text>
              <xsl:if test="position()!=last()">
                <xsl:text>,</xsl:text>
              </xsl:if>
            </xsl:for-each>
            <xsl:text>],</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>'', '',</xsl:text>
          </xsl:otherwise>
        </xsl:choose>

        <!-- Member variables -->
        <xsl:choose>
          <xsl:when test="this = '0'">
            <xsl:choose>
              <xsl:when test="(count(parameters/variable[substring(name, 1, 2)='0$']) &gt; 0) and (count(//professionalLicenseLimitation) = 0)">
                <xsl:text>[</xsl:text>
                <xsl:for-each select="parameters/variable[substring(name, 1, 2)='0$']">
                  <xsl:text>'*</xsl:text>
                  <xsl:value-of select="objectID" />
                  <xsl:text>'</xsl:text>
                  <xsl:if test="position()!=last()">
                    <xsl:text>,</xsl:text>
                  </xsl:if>
                </xsl:for-each>
                <xsl:text>],</xsl:text>
                <xsl:text>[</xsl:text>
                <xsl:for-each select="parameters/variable[substring(name, 1, 2)='0$']">
                  <xsl:text>'</xsl:text>
                  <xsl:value-of select="substring-after(name, '0$')" />
                  <xsl:text>'</xsl:text>
                  <xsl:if test="position()!=last()">
                    <xsl:text>,</xsl:text>
                  </xsl:if>
                </xsl:for-each>
                <xsl:text>],</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text>'', '',</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="objid" select="this" />
            <xsl:choose>
              <xsl:when test="(count(../../objects/object[objectID=$objid]/members/variable) &gt; 0) and (count(//professionalLicenseLimitation) = 0)">
                <xsl:text>[</xsl:text>
                <xsl:for-each select="../../objects/object[objectID=$objid]/members/variable">
                  <xsl:text>'*</xsl:text>
                  <xsl:value-of select="objectID" />
                  <xsl:text>'</xsl:text>
                  <xsl:if test="position()!=last()">
                    <xsl:text>,</xsl:text>
                  </xsl:if>
                </xsl:for-each>
                <xsl:text>],</xsl:text>
                <xsl:text>[</xsl:text>
                <xsl:for-each select="../../objects/object[objectID=$objid]/members/variable">
                  <xsl:text>'</xsl:text>
                  <xsl:value-of select="name" />
                  <xsl:text>'</xsl:text>
                  <xsl:if test="position()!=last()">
                    <xsl:text>,</xsl:text>
                  </xsl:if>
                </xsl:for-each>
                <xsl:text>],</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text>'','',</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>

        <!-- Local variables -->
        <xsl:choose>
          <xsl:when test="(count(locals/variable) &gt; 0) and (count(//professionalLicenseLimitation) = 0)">
            <xsl:text>[</xsl:text>
            <xsl:for-each select="locals/variable">
              <xsl:text>'*</xsl:text>
              <xsl:value-of select="objectID" />
              <xsl:text>'</xsl:text>
              <xsl:if test="position()!=last()">
                <xsl:text>,</xsl:text>
              </xsl:if>
            </xsl:for-each>
            <xsl:text>],</xsl:text>
            <xsl:text>[</xsl:text>
            <xsl:for-each select="locals/variable">
              <xsl:text>'</xsl:text>
              <xsl:value-of select="name" />
              <xsl:text>'</xsl:text>
              <xsl:if test="position()!=last()">
                <xsl:text>,</xsl:text>
              </xsl:if>
            </xsl:for-each>
            <xsl:text>],</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>'','',</xsl:text>
          </xsl:otherwise>
        </xsl:choose>

        <!-- isSource, Source -->
        <xsl:call-template name="AVIMOMXSourceInfo" />
      </xsl:template>
      <xsl:template name="AVIMOMXSourceInfo">
        <xsl:param name="exceptionType" />
        <xsl:choose>
          <xsl:when test="source">
            <xsl:text>true, '</xsl:text>
            <xsl:value-of select="//source" />
            <xsl:text>', </xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>false,'',</xsl:text>
          </xsl:otherwise>
        </xsl:choose>
        <!-- isAliased, FunctionName -->
        <xsl:choose>
          <xsl:when test="substring-before(description, '.') != substring-before(namespace, '.') and substring-before(description, '.') != namespace">
            <xsl:text>true,'</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>false,'</xsl:text>
          </xsl:otherwise>
        </xsl:choose>

        <xsl:choose>
          <xsl:when test="$exceptionType">
            <xsl:value-of select="$exceptionType" />
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="namespace" />
            <xsl:text>.</xsl:text>
            <xsl:value-of select="class" />
            <xsl:text>.</xsl:text>
            <xsl:value-of select="method" />
          </xsl:otherwise>
        </xsl:choose>
        <xsl:text>','</xsl:text>
        <!-- iPointer -->
        <xsl:value-of select="iPointer" />
        <xsl:text>','</xsl:text>

        <xsl:value-of select="module" />
        <xsl:text>','</xsl:text>
        <xsl:call-template name="AVIMOMXModuleInfo">
          <xsl:with-param name="module">
            <xsl:value-of select="module" />
          </xsl:with-param>
        </xsl:call-template>

        <xsl:value-of select="source/line" />
        <xsl:text>','</xsl:text>
        <xsl:value-of select="source/fileRef" />
        <xsl:text>',</xsl:text>
        <xsl:if test="count(source/code/line) &gt; 0">
          <xsl:text>[</xsl:text>
          <xsl:for-each select="source/code/line">
            <xsl:text>'</xsl:text>
            <xsl:value-of select="." />
            <xsl:text>'</xsl:text>
            <xsl:if test="position()!=last()">
              <xsl:text>,</xsl:text>
            </xsl:if>
          </xsl:for-each>
          <xsl:text>],</xsl:text>
        </xsl:if>
        <xsl:if test="count(source/code/line)= 0">
          <xsl:text>'',</xsl:text>
        </xsl:if>
        <xsl:if test="count(source/code/line) &gt; 0">
          <xsl:text>[</xsl:text>
          <xsl:for-each select="source/code/line">
            <xsl:text>'</xsl:text>
            <xsl:value-of select="@main" />
            <xsl:text>'</xsl:text>
            <xsl:if test="position()!=last()">
              <xsl:text>,</xsl:text>
            </xsl:if>
          </xsl:for-each>
          <xsl:text>]</xsl:text>
        </xsl:if>
        <xsl:if test="count(source/code/line)= 0">
          <xsl:text>''</xsl:text>
        </xsl:if>
        <xsl:text>,'</xsl:text>
        <xsl:value-of select="normalize-space(methodInfo)" />
        <xsl:text>',</xsl:text>
        <xsl:choose>
          <xsl:when test="wrongModule">
            <xsl:text>true</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>false</xsl:text>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:template>
      <xsl:template name="AVIMOMXModuleInfo">
        <xsl:param name="module" />
        <xsl:if test="count(//modules/module[name=$module]) &gt; 0">
          <xsl:variable name="moduleInfo" select="//modules/module[name=$module]" />
          <xsl:value-of select="$moduleInfo/version" />
          <xsl:text>','</xsl:text>
          <xsl:value-of select="$moduleInfo/dateModified" />
          <xsl:text>','</xsl:text>
          <xsl:value-of select="$moduleInfo/path" />
          <xsl:text>','</xsl:text>
          <xsl:value-of select="$moduleInfo/pdbPath" />
          <xsl:text>','</xsl:text>
        </xsl:if>
        <xsl:if test="count(//modules/module[name=$module]) = 0">
          <xsl:text>','','','','','</xsl:text>
        </xsl:if>
      </xsl:template>
      <xsl:template name="AVIMOMXMonitorScript">
        <xsl:element name="script">
          <xsl:comment>
            

function tdcontent(s){
    if (s == undefined || s =='')
        return '&amp;#160;'
    else
        return s;  
}

function TableHead(className){
    return '&lt;table class="' + className + '"  cellpadding="0" cellspacing="0"&gt;';
}
///////////////////////////////////////////////////////////////////////////////
// Object processing  
///////////////////////////////////////////////////////////////////////////////

var id = -1; 

function OdId(){
    id ++;   
    return '*' + id;    
}

function OD(ot, ov){
    od[OdId()] = new ObjData(ot, ov);	
}

function Bl(val){
    if (val == 1)
        OD("BOOLEAN", "true");
    else
        OD("BOOLEAN", "false");
}

function OV(Id, Name)
{
    if (typeof(Id) == 'string'){
        this.Id = [Id];
        this.Name = [Name];
    }
    else{
        this.Id = Id;	
        this.Name = Name;	
    }
}


function ObjData(ot, ov)
{	
    this.ot = ot;
    this.ov = ov;	
    if (typeof(ov) == 'string')
        this.os = 's';
    else
        if (this.ot == t1 || this.ot == t2 || this.ot == t3)
            this.os = 'a';
        else
            this.os = 'c';	
}

var od = new Array(); 
                      
//FillObjects(); //This function is described in the C# code and attached to the html

///////////////////////function

function GetParameterDefinition(id, name){
    value='';
    title = '';
    
    if (od[id].os == 's'){
        value = name + ' = ' + od[id].ov;
        
        if (od[id].ot == 'STRING')
            value = name + ' = \'' + od[id].ov + '\'';
    }                  
            
    type='';
    flag = true;
    for (var i = od[id].ot.length; i &gt;= 0; i=i-1)
        if (od[id].ot.charAt(i) != '.' &amp;&amp; flag)
            type = od[id].ot.charAt(i) + type;
        else flag = false;  
    title = 'title="' + od[id].ot + ' ' + value  + '"'; 	    	          
    
    return  '&lt;span ' + title + '&gt;&lt;span  class="TreeNodeValueType"&gt;' + type + '&lt;/span&gt;&lt;span class="TreeNodeValueParam"&gt;' + name + '&lt;/span&gt;&lt;/span&gt;';           
} 

////////////////////variable

//enum
var stateClosed = "TreeVarNodePlus";
var stateOpened = "TreeVarNodeMinus";
var stateEmpty  = "TreeVarNodeSimple";
var stateCycle  = "TreeVarNodeSimple"; 
var stateSpace  = "TreeVarNodeSpace";     
//enum end 

//enum
var treeEmpty   = '0';
var treeSibling = '1';
var treeLine    = '2';    
var treeLast    = '3';    
//enum end     

//enum
var itemSimple			= 'TreeNodeTypeSimple';       
var itemArray			= 'TreeNodeTypeArray';
var itemClass			= 'TreeNodeTypeClass';    
var itemClassCycle		= 'TreeNodeTypeClassCycle';    
var itemClassNoInfo     = 'TreeNodeTypeClassNoInfo';    
//enum end 

var identity = 1;   //for id generation        

function newId(){
    identity ++;
    return identity;
}


function switchCycleOn() {
    var obj = event.srcElement;
    
    while (obj.parentElement){
        obj = obj.parentElement;
        if (obj.className=="Normal" &amp;&amp; obj.id != undefined &amp;&amp; obj.tagName == "TR"){
            obj.className = "Alive";
            document.getElementById(obj.cycleObjectId).className = "Alive";
            return;
        }                             
    }        
}


function switchCycleOff() {
    var obj = event.srcElement;
    
    while (obj.parentElement){
        obj = obj.parentElement;
        if (obj.className=="Alive" &amp;&amp; obj.id != undefined &amp;&amp; obj.tagName == "TR"){
            obj.className = "Normal";
            document.getElementById(obj.cycleObjectId).className = "Normal";                
            return;
        }                             
    }  
}   


function GetItemRow(name, value, info, type, 
                    onclick, itemId, tree, state, itemType, cycleObjId){            
        
    name = tdcontent(name);
    value = tdcontent(value);
    info = tdcontent(info);            
        
    var cycle = '';     
    if (cycleObjId != ''){      
        cycle += ' onmouseover = "switchCycle(\'"' + itemId + '"\',\'"' + cycleObjId + '"\', 1)" '; 
        cycle += ' onmouseout = "switchCycle(\'"' + itemId + '"\',\'"' + cycleObjId + '"\', 0)" '; 
    }             
    
    var s = '&lt;tr class="Normal" id="' + itemId + '" title="' + type + '"&gt;';
    //name td
    s += '&lt;td&gt;' + GetTreeNodeTable(name, onclick, itemId, tree, state, itemType) + '&lt;/td&gt;';        
    //value td               
    s += '&lt;td&gt;' + value + '&lt;/td&gt;';
    //structure td               
    s += '&lt;td&gt;' + info + '&lt;/td&gt;&lt;/tr&gt;';   
   
    return s;    
}



function InsertItem(tableId, index, name, value, info, type, onclick, itemId, tree, state, 
                    itemType, cycleObjId){   
                        
    objTable = document.getElementById(tableId);   
    
    if (objTable) 
    {      
        name = tdcontent(name);
        value = tdcontent(value);
        info = tdcontent(info);            
                                    
        var s = GetTreeNodeTable(name, onclick, itemId, tree, state, itemType);
        
        var objRow;
        if (index &gt;= 0)
            objRow = objTable.insertRow(index);
        else     
            objRow = objTable.insertRow();
            
        objRow.id = itemId;            
        objRow.title = type;            
        objRow.className = "Normal";
                    
        if (cycleObjId != '')
        {          
            objRow.onmouseover = switchCycleOn;
            objRow.onmouseout = switchCycleOff;                
            objRow.cycleObjectId = cycleObjId;
        }
        
        var objCell;
        objCell = objRow.insertCell();
        objCell.innerHTML  = s;           
        
        objCell = objRow.insertCell();    			
        objCell.innerHTML  = value;   
        
        objCell = objRow.insertCell();
        objCell.innerHTML  = info;               
    } 
}

function EscapeForHtml(str) {
    var result = str;
    if (result != null &amp;&amp; result != "") {
        result = result.replace(/[&lt;]/g,'&amp;lt;');
        result = result.replace(/[&gt;]/g,'&amp;gt;');
    }
    return result;


function GetTreeNodeTable(name, onclick, itemId, tree, state, itemType){                
        var s = '&lt;table class="TreeNodeValue"  cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td&gt;';        
        
        s += '&lt;table class="TreeNode" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;';             
        for (var i = 0; i &lt; tree.length; i++)
            switch (tree.charAt(i)){
                case treeEmpty:
                    s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';                              
                break; 
                case treeLast :
                    s += '&lt;td class="TreeNodeLast"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';                              
                break; 
                case treeLine :
                    s += '&lt;td class="TreeNodeLine"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';                              
                break; 
                case treeSibling:
                    s += '&lt;td class="TreeNodeSibling"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';                              
                break; 
            };
        s += '&lt;td onclick="' + onclick + '" class="' + state + '" id="' + itemId + 'sign"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';                              
        s += '&lt;td class="' + itemType + '"&gt;&amp;#160;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;td&gt;';                        
        
        s += '&lt;table cellpadding="0" cellspacing="0" class="TreeNodeValueName"&gt;&lt;tr&gt;&lt;td&gt;' + EscapeForHtml(name) + '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;';             
        s += '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;';        
        
        return s;                   
}    

function Cycle(path, id){
    cnt = 1;      
    for (var i = path.length - 1; i &gt;= 0; i=i-1)
        if (path.charAt(i) == '*'){
            f = true;
            for (var j = 1; j &lt; id.length; j++){
                if (id.charAt(j) != path.charAt(i+j)) 
                    f = false;
            };              
            if (f &amp;&amp; (path.length &lt;= i + id.length || path.charAt(i + id.length) == '.')) return cnt;
            cnt ++;
        }   
    return -1;           	        
}


function GetCycleObjId(itemID, cycle){
    if (cycle == -1)
        return '';           
                
    var id  = itemID;
    var i = cycle;    
    var p = id.lastIndexOf('.');
    while (p &gt;=0 &amp;&amp; i &gt; 0){
        id = id.substring(0, p);
        i=i-1;
        p = id.lastIndexOf('.');
    }    
    
    return id;
}

function InsertObjectLink(tableId, index, itemId, objId, name, path, tree){

    var cycle = Cycle(path, objId);        
    
    if (itemId == '')
        itemId = newId();          
        
    var onclick;
    var state;
    
    if (od[objId].os == 's' || objId == '*0' || typeof(od[objId].ov) == 'undefined' || typeof(od[objId].ov.Id) == 'undefined' || od[objId].ov.Id.length == 0)
    {
        onclick = '';
        if (tree == '')
            state = stateSpace;                
        else    
            state = stateEmpty;
    }       
    else{ 
        if (cycle == -1){          
            var escapedName = name;
            escapedName = escapedName.replace(/\\/g, '\\\\');
            escapedName = escapedName.replace(/'/g, "\\'");      
            onclick = 'OpenLink(\'' + itemId + '\',\''+ objId.replace(/'/g, "\\'") + '\',\''+ escapedName +'\',\''+ path +'\',\''+ tree + '\')';
            state = stateClosed;
        }else{   
            onclick = '';
            state = stateCycle;
        }
    }   
    
    //13-NOV-2007 AGolovkov
    // moving info for cycle reference into value column
    var info = "";
    var value = ""
    if(cycle &gt; -1)
    {
        value = GetInfo(objId, cycle);
        info = GetValue(objId);
    }
    else
    {
        info = GetInfo(objId, cycle);
        value = GetValue(objId);
    }
        
    if (tableId == '')
        return GetItemRow(name, value, info, 
                    od[objId].ot, onclick, itemId, tree, state, 
                    GetItemType(objId, cycle), GetCycleObjId(itemId, cycle));  
    else                
        InsertItem(tableId, index, name, value, info, 
                    od[objId].ot, onclick, itemId, tree, state, 
                    GetItemType(objId, cycle), GetCycleObjId(itemId, cycle));          
    //13-NOV-2007 AGolovkov End
        
}     


function GetInfo(id, cycle){
    
    if (id == "*0")
        return "optimized";
    
    if (cycle == 1)         
        return 'Circular reference one level up';  
        
    if (cycle &gt; 1)         
        return 'Circular reference ' + cycle + ' levels up';  
        
    if (od[id].os == 'a') 
            return 'array';             
        
    if (od[id].os == 'c' ){
        if (typeof(od[id].ov) == 'undefined' || typeof(od[id].ov.Id) == 'undefined' || od[id].ov.Id.length == 0)				
            return 'class (members not collected)';                
        else            
            return 'class';         
        }   

    return "";
}

function GetItemType(id, cycle){
    
    if (cycle &gt; 0)         
        return itemClassCycle ;  
    
    if (od[id].os == 'a') 
        return itemArray;      
    
    if (od[id].os == 'c'){ 
        if (typeof(od[id].ov) == 'undefined' || typeof(od[id].ov.Id) == 'undefined' || od[id].ov.Id.length == 0)				
            return itemClassNoInfo ;                
        else            
            return itemClass;         
    }
        
    if (od[id].os == 's')            
        return itemSimple;    

    return "";
}
    


function GetValue(objId){
    if (od[objId].os == 's' &amp;&amp; typeof(od[objId].ov) != 'undefined')
        return od[objId].ov;                
    else            
        return '';                           
}

        
function OpenLink(itemId, objectId, name, path, tree){ 
    var objRow = document.getElementById(itemId); 
    if (objRow) 
    {
        //Define index and delete row
        var index = objRow.rowIndex;
        var currTable = objRow.parentElement.parentElement;
        var currTableBody = objRow.parentElement;
        var tableId = currTable.id;  
        currTableBody.deleteRow(objRow.rowIndex);
        
        var s = "";
        //Insert root
        var onClick = 'TreeExpander(\''+ itemId + '\', \'TreeVarNode\')';        
        s += GetItemRow(name, '', GetInfo(objectId, -1), od[objectId].ot,
                    onClick, itemId, tree, stateOpened, GetItemType(objectId, -1),'');
        
            for (var i = 0; i &lt; od[objectId].ov.Id.length; i++){
              var childTree = tree;
              if (childTree.length &gt; 0){
                    if (childTree.charAt(childTree.length - 1) == treeSibling)
                        childTree = childTree.substring(0, childTree.length - 1) + treeLine;
                    else      
                        childTree = childTree.substring(0, childTree.length - 1) + treeEmpty;
            }        
                    
               if (i == od[objectId].ov.Id.length - 1) 
                  childTree += treeLast;
               else    
                  childTree += treeSibling;                    
                
            s += InsertObjectLink('', index + i + 1, itemId + '.' + i, '*' + od[objectId].ov.Id[i], 
                    od[objectId].ov.Name[i], path  + '.' + objectId, childTree);
            }                                  

        var divContainer = currTable.parentElement;
        var signRow = currTableBody.insertRow(index);
        var allTable = currTable.outerHTML;
        var sign = "&lt;TR&gt;&lt;/TR&gt;";
        var allTableArr = allTable.split(sign);
        divContainer.innerHTML = allTableArr[0]+s+allTableArr[1];                                  
    }               
}


///////////////////////////////////////////////////////////////////////////////
// Expand
///////////////////////////////////////////////////////////////////////////////
function CollapseAll () 
{
    var eventCounter = 1;
    var obj = document.getElementById('1sp1ex');
    while (obj != null) 
    {
        //  Close exception info
        var row = obj.parentElement.parentElement.rows[1];
        if (typeof(row) != 'undefined' &amp;&amp; row.style.display == '') {
            obj.fireEvent("onClick");
        }

        //  Close all childs functions
        var funcCounter = 1;
        var obj = document.getElementById('1sp' + eventCounter + 'ev');
        while (obj != null) 
        {            
            var row = obj.parentElement.parentElement.rows[1];
            if (typeof(row) != 'undefined' &amp;&amp; row.style.display == '') {
                obj.fireEvent("onClick");
            }
            
            funcCounter++;
            var obj = document.getElementById(funcCounter + 'sp' + eventCounter + 'ev');            
        }
    
        eventCounter++;
        var obj = document.getElementById('1sp' + eventCounter + 'ex');            
    }  
}

function Expander(obj, prefix, child, varIds, varNames, memIds, memNames, locIds, locNames,
     isSource, source, isAliased, functionName, iPointer, module, version, dateModified, path, 
     pdbPath, line, fileref, codeLines, codeLinesType, methodInfo, wrongModule, isFunction)
{	
    if (obj.className.indexOf('Minus') &gt; 0)
    {
        obj.className = prefix + 'Plus' + (obj.className.indexOf('Selected') &gt; 0 ? 'Selected' : '');
        obj.parentElement.parentElement.rows[1].style.display = 'none';		
    }
    else
    {		
        obj.className = prefix + 'Minus' + (obj.className.indexOf('Selected') &gt; 0 ? 'Selected' : '');
        
        var row = obj.parentElement.parentElement.rows[1];				
        if (typeof(row) == 'undefined')
        {			
            row = obj.parentElement.parentElement.insertRow();			
            var cell = row.insertCell();
            cell.className = isFunction ? 'TabContainer' : 'TabExceptionContainer';
            cell.innerHTML = OpenNodeContent(child, varIds, varNames, memIds,	memNames, locIds, 
                locNames, isSource, source, isAliased, functionName,  module, version, dateModified, 
                path, line, fileref, iPointer, pdbPath, codeLines, codeLinesType, methodInfo, wrongModule, isFunction);						
                
            //  Hide function's parameters if table hadn't been built when "Show Parameters" combo was clicked
            
            if (document.getElementById("cbShowParameters").checked == false) 
            {			   
                ShowFuncParams(document.getElementById("cbShowParameters"));
            }				
        }
        else
            row.style.display = '';			
    }
}

function ExceptionExpander(mainId, exId){
    var s = '&lt;div class="ExceptionVar"&gt;&lt;table cellpadding="0" cellspacing="0" class="TreeVar" id="' + mainId + '"&gt;';
    s += Header() + InsertObjectLink('','1','',exId, 'exception', '', '') + '&lt;/table&gt;&lt;/div&gt;';
    return s;		
}

function TabHeader(id, num, activeTab, type, body){	
    return '&lt;div id="' + id + 'content' + num + '" Style="DISPLAY:' + ((activeTab==num) ? 'block' : 'none') + '"&gt;&lt;table cellpadding="0" cellspacing="0" class="TreeVar" id="' + id + type + '"&gt;' + body + '&lt;/table&gt;&lt;/div&gt;';
}

function Header(){
    return '&lt;col class="TreeVarCol1"/&gt;&lt;col class="TreeVarCol2"/&gt;&lt;col class="TreeVarCol3"/&gt;&lt;tr&gt;&lt;th class="TreeVarHeader1"&gt;Name&lt;/th&gt;&lt;th class="TreeVarHeader2"&gt;Value&lt;/th&gt;&lt;th class="TreeVarHeader3"&gt;Structure&lt;/th&gt;&lt;/tr&gt;';
}


function InsertLinks(varIds, varNames){
    var s = Header();
    for (var i = 0; i &lt; varIds.length; i++){
        s += InsertObjectLink('','','', varIds[i], varNames[i], '', '');
    }
    return s;
}

function TabBookmark(id, num, activeTab, text){
    return  '&lt;td onmouseover="HightLightTab(true)" onmouseout="HightLightTab(false)" class="TabBookmark' + ((activeTab==num) ? 'Sel' : '') + '" id="' + id + num + '" onclick="SetTabValue(\'' + id + '\', ' + num + ')"&gt;&lt;nobr&gt;' + text + '&lt;/nobr&gt;&lt;/td&gt;';
}

function fillTemplate(tpl_string, pattern, rep_string)
{
    tpl = tpl_string.split(pattern);
    return tpl[0]+rep_string+tpl[1];
}

function getResultPdbUploadUrl(pdbUploadUrl, version, module)
{
    return fillTemplate(pdbUploadUrl, '___VERSION_PATTERNS___', escape('&amp;fromStackFrame=true&amp;assemblyVersion='+version+'&amp;assemblyName='+module.replace(/&amp;#39;/g, "'")));
}

function OpenNodeContent(id, varIds, varNames, memIds, memNames, locIds, locNames, isSource, source, isAliased, functionName,
     module, version, dateModified, path, line, fileref, iPointer, pdbPath, codeLines, codeLinesType, methodInfo, wrongModule, isFunction)
{		
    var resultPdbUploadUrl = "";
    var emptySource = '&lt;div class="EmptySource"&gt;You must install PDB files on your monitored system to allow Application Diagnostics to display file names, local variables and line numbers related to a particular defect.&lt;/div&gt;';
    var emptyVariables = '';	
    
    var monitoringEnabled = (methodInfo != "" &amp;&amp; varIds.length == 0 &amp;&amp; memIds.length == 0 &amp;&amp; locIds.length == 0) ? false : true;
        
    var activeTab = 0;
    if (varIds.length == 0)
        if (!isFunction || memIds.length &gt; 0)
            activeTab = 1;
        else
            if (locIds.length &gt; 0)
                activeTab = 2;
    
    var s = '';

    //if aliased than display real name with parameters
    if (isAliased){
//		s += '&lt;a href="javascript:void(null)" oncontextmenu="MSDNContextMenu(this,\''+functionName+'\')" style="text-decoration:none;"&gt;&lt;span class="FunctionNameAndParemeters"&gt;' + functionName + '(';		
        s += '&lt;span class="FunctionNameAndParemeters"&gt;' + functionName + '(';
        if (typeof(methodInfo) != 'undefined')
            s += methodInfo;
        else{
            for (var i = 0; count = varIds.length, i &lt; count; i++){	
                s += GetParameterDefinition(varIds[i], varNames[i]);
                if (i != count - 1)
                    s += ', ';
            }
        }
        s += ')&lt;/span&gt;';
        if (iPointer != '')
            s += '  +' + iPointer;
//		s += '&lt;/span&gt;&lt;/a&gt;';
        s += '&lt;/span&gt;';
    }	
    
    s += TableHead('Tab');
    
    //TabBookmarks	
    s += '&lt;tr&gt;';
    s += '&lt;td&gt;&lt;table class=TableBookmark cellspacing=0 cellpadding=0 border=0&gt;&lt;tr&gt;';
    if (isFunction) {
        s += TabBookmark(id, 0, activeTab, 'Parameters(' + varIds.length + ')');
        s += TabBookmark(id, 1, activeTab, 'Member Variables(' + memIds.length + ')');
        s += TabBookmark(id, 2, activeTab, 'Local Variables(' + locIds.length + ')');
        s += TabBookmark(id, 3, activeTab, 'Source');
        
        functionName = TransformToMSDNFormat (functionName);	    
    } else {
        s += TabBookmark(id, 0, activeTab, 'Exception data(' + varIds.length + ')');	
        s += TabBookmark(id, 1, activeTab, 'Source');    
    }
    s += '&lt;td class=TabBookmarkEmpty&gt;&lt;a href="http://search.msdn.microsoft.com/search/default.aspx?query=' + functionName + '" target="_blank" class="MSDNImg" alt="Search in MSDN"&gt;&lt;/a&gt;&lt;/td&gt;';
    s += '&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;';
    s += '&lt;/tr&gt;';
    
    //Tabs content
    s += '&lt;tr&gt;&lt;td class="TabContent"&gt;';	
    
    if (isFunction) {
        //parameters tab	
        var parametersBody = professionalLicenseLimitation ? ('&lt;tr&gt;&lt;td&gt;' + GetProfessionalLicenseLimitationMessage("Information about parameters") + '&lt;/td&gt;&lt;/tr&gt;') : InsertLinks(varIds, varNames, (!monitoringEnabled ? emptyVariables : ''));
        s += TabHeader(id, 0, activeTab, 'parameters', parametersBody);
        //members tab	
        var memberVariablesBody = professionalLicenseLimitation ? ('&lt;tr&gt;&lt;td&gt;' + GetProfessionalLicenseLimitationMessage("Information about member variables") + '&lt;/td&gt;&lt;/tr&gt;') : InsertLinks(memIds, memNames);
        s += TabHeader(id, 1, activeTab, 'this', memberVariablesBody);		
        //locals tab	
        var localVariablesBody = professionalLicenseLimitation ? ('&lt;tr&gt;&lt;td&gt;' + GetProfessionalLicenseLimitationMessage("Information about local variables") + '&lt;/td&gt;&lt;/tr&gt;') : InsertLinks(locIds, locNames, (!monitoringEnabled ? emptyVariables : ''));
        s += TabHeader(id, 2, activeTab, 'locals', localVariablesBody);
        //s += TabHeader(id, 2, activeTab, 'locals', ((locIds.length &gt; 0) ? InsertLinks(locIds, locNames, (!monitoringEnabled ? emptyVariables : '')) : '&lt;tr height="1px"&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&amp;#160;&lt;/td&gt;&lt;/tr&gt;') );
    } else {
        //exception data
        s += TabHeader(id, 0, activeTab, 'exceptiondata', InsertLinks(varIds, varNames, ''));	
    }
    
    //source tab
    var sourceStyle = (isFunction &amp;&amp; activeTab == 3) || (!isFunction &amp;&amp; activeTab == 1) ? '' : 'Style="DISPLAY:none"';	
    s += '&lt;div id="' + id + 'content' + (isFunction ? 3 : 1) + '" ' + sourceStyle + '&gt;';
    var re = /\\/g;	
    s += '&lt;table cellpadding="0" cellspacing="0" class="TreeVar"&gt;';
    
    //header
    s += '&lt;col style="width: 20%" /&gt;&lt;col style="width: 100%" /&gt;&lt;tr&gt;&lt;th class="TreeVarHeader1"&gt;Name&lt;/th&gt;&lt;th class="TreeVarHeader2"&gt;Value&lt;/th&gt;&lt;/tr&gt;';
    
    //assembly info
    s += ModulesExpandRowContent('Assembly', id + 'assembly', isSource ? 'Plus' : 'Minus');		
    s += ModulesRowContent(false, 'Name', module + ((version != '') ? ', ' + version : ''), id + 'assembly', isSource ? 'none' : 'block'); 	
    s += ModulesRowContent(false, 'Date Modified', dateModified, id + 'assembly', isSource ? 'none' : 'block'); 
    var showPdb = !isRestrictedMode || (isRestrictedMode &amp;&amp; isAdmin);
    s += ModulesRowContent(!showPdb, 'Assembly Path', path, id + 'assembly', isSource ? 'none' : 'block'); 
    
    if (showPdb) 
    {
    if(isSource)
        s += ModulesRowContent(true,  'Symbols Path', pdbPath, id + 'assembly', isSource ? 'none' : 'block');
    else
        {
            var pdbFileArr = path.split("\\");
            var pdbFile = pdbFileArr[pdbFileArr.length-1].replace(/.exe$|.dll$/, ".pdb");
            
            var msg = '';
            if (wrongModule)
            {
                msg = 'There is incorrect version of assembly file in PDB Storage.&lt;/div&gt;';			
            }
            else
            {
                msg = 'File \'' + pdbFile + '\' was not found.&lt;/div&gt;';
            }
            
            s += ModulesRowContent(true,  'Symbols', '&lt;div class="EmptySource"&gt;' + msg, id + 'assembly', isSource ? 'none' : 'block');
        }
    }	
    
    //source code info
    if (professionalLicenseLimitation)
    {
        s += ModulesExpandRowContent('Code', id + 'source', 'Plus');	    
        s += ModulesRowContent(true, 'Empty', GetProfessionalLicenseLimitationMessage("Information about source code"), id + 'source', 'none');
    }
    else
    {	
        if (!isRestrictedMode || (isRestrictedMode &amp;&amp; isAdmin))
        {
    s += ModulesExpandRowContent('Code', id + 'source', isSource ? 'Minus' : 'Plus');	
        }
        
    if (isSource)
    {	
        var file = '';
        if (fileref == '')
            file = '&amp;#160;';
        else
                file = fileref;
        
        //file row
        s += ModulesRowContent(false, 'File', file, id + 'source', isSource ? 'block' : 'none');
        //line row
        s += ModulesRowContent(false, 'Line', tdcontent(line), id + 'source', isSource ? 'block' : 'none');		
    
        var sourceCode = '&lt;table class="SourceContainerCode" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;';
        
        if (codeLines == '')
            sourceCode += '&amp;#160;';
        else{
            for (var i = 0; i &lt; codeLines.length; i ++){
                if (codeLinesType[i] == 'true')
                    sourceCode += '&lt;span class="TreeNodeValueHigh"&gt;' + codeLines[i] + '\n&lt;/span&gt;';
                else
                    sourceCode += codeLines[i] + '\n';
            }		
        }
                
        sourceCode += '&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;';
        //source fragment row
        s += ModulesRowContent(true, 'Fragment', sourceCode, id + 'source', isSource ? 'block' : 'none');
    }
    else	
        {
            if (!isRestrictedMode || (isRestrictedMode &amp;&amp; isAdmin))
            {
        s += ModulesRowContent(true, 'Empty', emptySource, id + 'source', isSource ? 'block' : 'none');
            }
        }
    }
        
    s += '&lt;/table&gt;&lt;/div&gt;';		
    
    return s;	
}

function TransformToMSDNFormat (functionName) 
{
    if (functionName.indexOf ('.ctor') &gt; 0) {
        var regExp = new RegExp("\\.(.[^\.]+)\.\.ctor$", "gi");
        if ((result = regExp.exec (functionName)) != null) {
            functionName = functionName.replace(/\.ctor/, result[1]);
        }
    }
    
    return functionName;
}

function TreeExpander(itemId, prefix)
{
    var objSign = document.getElementById(itemId + 'sign');  
    var i = 0;
    
    if (objSign.className.indexOf('Minus') &gt; 0)
    {
        objSign.className = prefix + 'Plus';
        while (document.getElementById(itemId + '.' + i)){
            ShowHide(0, itemId + '.' + i);
            
            var objSubSign = document.getElementById(itemId + '.' + i + 'sign');
            if (objSubSign)
                if (objSubSign.className.indexOf('Minus') &gt; 0)
                    TreeExpander(itemId + '.' + i, prefix)
            i ++;
        }			
    }	
    else if (objSign.className.indexOf('Plus') &gt; 0)
    {
        objSign.className = prefix + 'Minus';
        while (document.getElementById(itemId + '.' + i)){
            ShowHide(1, itemId + '.' + i);
            i ++;
        }			
    }
}

function GlobalTreeExpander(itemId, showobj, prefix)
{
    var objSign = document.getElementById(itemId);  
   
    
    if (objSign.className.indexOf('Minus') &gt; 0)
    {
        objSign.className = prefix + 'Plus';		
        ShowHide(0, showobj);	      	
    }	
    else if (objSign.className.indexOf('Plus') &gt; 0)
    {
        objSign.className = prefix + 'Minus';
        ShowHide(1, showobj);	
    }
}



function SetTabValue(tabControlId, value){
    var i = 0;
 
    while (document.getElementById(tabControlId + i)){
        if (i == value){
            document.getElementById(tabControlId + i).className = "TabBookmarkSel";
            ShowHide(1, tabControlId + 'content' + i);
        } else {
            document.getElementById(tabControlId + i).className = "TabBookmark";
            ShowHide(0, tabControlId + 'content' + i);	    
        }    
        i ++;
    }
}

function ShowTab (id, tabNumber) {
    var obj = document.getElementById(id); 
    var row = obj.parentElement.parentElement.rows[1];
    if (typeof(row) == 'undefined' || row.style.display == 'none') {
        obj.fireEvent("onClick");
    }
    document.getElementById(id + tabNumber).fireEvent('onClick');    
    window.event.cancelBubble = true;    
}

function ShowFuncLines(val) {      
    if (val.checked)
        ShowHide(1, "funcLines");    
    else    
        ShowHide(0, "funcLines");    
}

function ShowFuncParams(val) 
{     
    ShowHide(val.checked ? 1 : 0, "funcParams");
}

function ShowLow(val){      
    if (val.checked) {
        ShowHide(1, "Low");
        ShowHide(0, "Dots");
    }
    else {
        ShowHide(0, "Low");
        ShowHide(1, "Dots");
    }
}

function ShowLowEx(val){      
    if (val.className.indexOf('Minus') &gt; 0)
    {
        val.className = 'TreeNodePlus';
        ChangeExceptionData('1');
        ShowHide(0, "LowEx");    
    }
    else    
    {
        val.className = 'TreeNodeMinus';
        ShowHide(1, "LowEx");    
    }
}

function ShowHide(mode, child)
{
    var objColl = document.all(child);		
    
    if (typeof(objColl.length) == 'undefined')
    {
        if (mode == 0)
            objColl.style.display = 'none';
        else
            objColl.style.display = '';
        
        return;
    }
    
    for (var i = 0; i &lt; objColl.length; i++)
    {
        if (mode == 0)
            objColl[i].style.display = 'none';
        else
            objColl[i].style.display = '';
            
    }
}

function ModulesExpander(obj, id, prefix){
    if (obj.className.indexOf('Minus') &gt; 0)
    {
        obj.className = 'TreeVarNodePlus';		
        ShowHide(0, id);    
    }
    else    
    {
        obj.className = 'TreeVarNodeMinus';
        ShowHide(1, id);    
    }
}

function ModulesContent(position, name, version, dateModified, path, pdbPath)
{
    var s = ModulesExpandRowContent(name + ', ' + version, position + 'module', 'Plus');
    s += ModulesRowContent(false, 'Date Modified', dateModified, position + 'module', 'none'); 
    var showPdb = !isRestrictedMode || (isRestrictedMode &amp;&amp; isAdmin);
    s += ModulesRowContent(!showPdb, 'Assembly Path', path, position + 'module', 'none');  
    if (showPdb)
    {
        s += ModulesSymbolsPathRowContent(true, pdbPath, version, position + 'module', 'none', path);  
    }
    return s;
}

function ModulesRowContent(isLast, title, value, id, style){
    var s = '&lt;tr id="' + id + '" style="Display:' + style + ';" class="Normal"&gt;';
    s += '&lt;td style="width: 32%"&gt;';
    s += '&lt;table class="TreeNodeValue" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;';
    
    if (isLast)
        s += '&lt;td class="TreeNodeLast"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
    else
        s += '&lt;td class="TreeNodeSibling"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';	
    
    s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
    s += '&lt;td&gt;' + (title == '' ? '&amp;nbsp;' : title)+ '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;';
    s += '&lt;td&gt;' + (value == '' ? '&amp;nbsp;' : value)+ '&lt;/td&gt;&lt;/tr&gt;';
    return s;
}

function ModulesSymbolsPathRowContent(isLast, value, version, id, style, path)
{
    var title = "Symbols Path";
    if(value == "")
    {
        var resultPdbUploadUrl = "";//fillTemplate(pdbUploadUrl, '___VERSION_PATTERNS___', escape('&amp;fromStackFrame=true&amp;assemblyVersion='+version+'&amp;assemblyName='+path));
        title = "Symbols";
        var arrPath = path.split("\\");
        var cPath = arrPath[arrPath.length-1].replace(/\.dll|\.exe/, ".pdb");
        value = '&lt;div class="EmptySource"&gt;'+cPath+' was not found.&lt;/div&gt;';
    }
    return ModulesRowContent(isLast, title, value, id, style);
}

function ModulesExpandRowContent(title, id, sign){
    var s = '&lt;tr class="Normal"&gt;&lt;td style="width: 32%;"&gt;';
    s += '&lt;table class="TreeNodeValue" cellpadding="0" cellspacing="0"&gt;';
    s += '&lt;tr&gt;&lt;td class="TreeVarNode' + sign + '" onclick="ModulesExpander(this, \'' + id + '\');"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
    s += '&lt;td class="TreeNodeAssembly"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
    s += '&lt;td&gt;' + title + '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;';
    return s;
}

function ChangeExceptionData(objId)
{	
    ChangeSelection(objId + 'ev' + 'exName', 'exceptionName', 'Name');
    //ChangeSelection(objId + 'ev'  + 'exValue', 'exceptionValue', 'Value');
    ChangeException(objId + 'exd', 'exData');	
    ChangeException(objId + 'ev', 'stackelem');
    ChangeException(objId + 'ev', 'exceptiondata');
    
    ChangeExceptionHeaderSelection (objId);
}

//  Change selection on the Exception line placed on top of the stack trace
function ChangeExceptionHeaderSelection (objId) 
{
    var counter = 1;
    var obj = document.getElementById('1sp1ex');
    while (obj != null) 
    {
        if (counter == objId) 
        {
            var row = obj.parentElement.parentElement.rows[1];
            if (typeof(row) == 'undefined' || row.style.display == 'none') {
                obj.fireEvent("onClick");
            }
            
            var index = obj.className.indexOf ("Selected");
            if (index == -1) {
                obj.className += "Selected";
            }
        } 
        else 
        {
            var index = obj.className.indexOf ("Selected");
            if (index != -1) {
                obj.className = obj.className.substr (0, index);
            }
        }
        
        counter++;
        var obj = document.getElementById('1sp' + counter + 'ex');
    }
}

function ChangeSelection(objId, tableId, style)
{
    objTable = document.all(tableId);	
    
    for (var i = 0; i &lt; objTable.length; i++)
    {
        objRow = objTable[i].rows[0];		
        objField = objRow.lastChild;			
        
        if (objRow.id == objId)					
            objField.className = "Field" + style + "Selected";		
        else
            objField.className = "Field" + style;			
    }		
    
    return objTable.innerHTML;	
}

function ChangeException(objId, curId)
{	
    arrStacks = document.all(curId);
    for (var i = 0; i &lt; arrStacks.length; i++)
    {		
        if (arrStacks[i].mainId == objId)
            arrStacks[i].style.display = 'block'
        else		
            arrStacks[i].style.display = 'none'			
    }
}

function InsertWhiteSpaces(entryId, isLast)
{	
    var s = '&lt;table cellpadding="0" cellspacing="0" class="ExceptionTreeImage"&gt;&lt;tr&gt;';
    s += '&lt;td class="' + (isLast ? 'TreeNodeLast' : 'TreeNodeMiddle') + '"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;'
    s += '&lt;/table&gt;&lt;/tr&gt;';	
    
    return s;
}

function HightLightTab(flagHightLight)
{
    var el = event.srcElement;
    while(el.tagName != "TD") el = el.parentElement;
    if(el.className != 'TabBookmarkSel')
    {
        if(flagHightLight)
            el.className = 'TabBookmarkActive';
        else
            el.className = 'TabBookmark';
    }
}

function FuncImage(isHi){
    return '&lt;td class="TreeNodeImage"&gt;&lt;li class="TreeNodeTypeFun' + (isHi ? 'Hi' : '') + '"&gt;&lt;/li&gt;&lt;/td&gt;';
}

function OpenContentForHigh(){
    var obj = document.getElementById('High');
    if (obj != null)
        obj.firstChild.onclick();
}


//functions for opening exception source via Intercept Plugin
var defaultPath = 'www.avicode.com';

function OpenSource(sourceName, fileName, lineNumber){	
    try
    {
        var objDteManager = new ActiveXObject("InterceptVSPlugin.Automation.1")
    
        bRes = objDteManager.OpenSource(sourceName, fileName, lineNumber);		
        if(!bRes)
            alert("Application Diagnostics and Visual Studio integration is not properly configured on the system.");	
    }
    catch(e){
        Install();
    }
}	

function Install(){
    
    //AGolovkov
    //detecting if the client system is 32 or 64-bit
    var sysPluginPath = pluginPath;
    if(navigator.appVersion.toUpperCase().indexOf("WOW64") &gt; -1)
        sysPluginPath = plugin64Path;
    
    var displayPath = defaultPath;
    
    if (sysPluginPath != defaultPath)
        displayPath = "Application Diagnostics computer";
        
    if (window.confirm("SCOM Visual Studio Plug-In is not installed. Do you want to install it?"))	
    {
        if (sysPluginPath == defaultPath)
            window.open("http://www.avicode.com/intercept/InterceptV2VSPluginDownload.asp");
        else
            window.open(sysPluginPath);
    }
}

function GetProfessionalLicenseLimitationMessage(unavailableInformation)
{
    var message = professionalLicenseLimitationTemplate.replace("#UnavailableInformation", unavailableInformation);
    message = "&lt;div class=\"handlerLicenseMessage\"&gt;" + message + "&lt;/div&gt;";
    return message;
}

            
          </xsl:comment>
        </xsl:element>
      </xsl:template>
      <xsl:template name="AVIMOMXViewerLink">
        <xsl:if test="count(../ViewDetail) &gt; 0">
          <xsl:element name="a">
            <xsl:attribute name="href">
              <xsl:value-of select="../ViewDetail" />
            </xsl:attribute>
            <xsl:text>Click here</xsl:text>
          </xsl:element>
          <xsl:text> for additional Event details.</xsl:text>
        </xsl:if>
      </xsl:template>
      <xsl:template name="AVIMOMXLicenseWizard">
        <xsl:if test="count(licenseWizard) &gt; 0">
          <xsl:value-of select="licenseWizard/licenseWizardText" />
          <xsl:element name="br" />
          <xsl:element name="br" />
          <xsl:text>Please </xsl:text>
          <xsl:element name="a">
            <xsl:attribute name="href">
              <xsl:value-of select="licenseWizard/licenseWizardUrl" />
            </xsl:attribute>
            <xsl:text>click here</xsl:text>
          </xsl:element>
          <xsl:text> to open license management wizard.</xsl:text>
        </xsl:if>
      </xsl:template>
      <!-- end of templates for AVIMOMXMonitorLog -->

      <!-- templates for AVIMOMCLRXMonitorLog -->
      <xsl:template match="EventData" mode="AVIMOMCLRXMonitorLog">
        <xsl:if test="count(notLicense) = 0">
          <xsl:for-each select="*[local-name()='log']">
            <xsl:call-template name="AVIMOMCLRXMain" />
          </xsl:for-each>
        </xsl:if>
        <xsl:call-template name="AVIMOMCLRXLicenseWizard" />
      </xsl:template>
      <xsl:template match="EventData/*[local-name()='log']/Enterprise" mode="AVIMOMCLRXMonitorLog">
        <xsl:if test="count(notLicense) = 0">
          <xsl:for-each select="*[local-name()='log']">
            <xsl:call-template name="AVIMOMCLRXMain" />
          </xsl:for-each>
        </xsl:if>
        <xsl:call-template name="AVIMOMCLRXLicenseWizard" />
      </xsl:template>
      <xsl:template name="AVIMOMCLRXMain">
        <xsl:value-of select="outputScript" disable-output-escaping="yes" />
        <xsl:call-template name="AVIMOMCLRXViewerLink" />
        <table cellpadding="0" cellspacing="0" class="AlignByCompany">
          <tr class="AlignByCompany">
            <td class="AlignByCompany">
              <xsl:call-template name="AVIMOMCLRXAspects" />
              <table cellpadding="0" cellspacing="0" class="Header">
                <tr>
                  <td class="HeaderTitle" onclick="GlobalTreeExpander('exceptionChain','exceptionRows','TreeNode');">Exception Chain</td>
                  <td id="exceptionChain" onclick="GlobalTreeExpander('exceptionChain','exceptionRows','TreeNode');">
                    <xsl:choose>
                      <xsl:when test="count(aspect) &gt; 0">
                        <xsl:attribute name="class">TreeNodePlus</xsl:attribute>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:attribute name="class">TreeNodeMinus</xsl:attribute>
                      </xsl:otherwise>
                    </xsl:choose>
                    <li />
                  </td>
                </tr>
              </table>
              <table cellpadding="0" cellspacing="0" id="exceptionRows" class="ExceptionTree">
                <xsl:if test="count(aspect) &gt; 0">
                  <xsl:attribute name="style">display:none;</xsl:attribute>
                </xsl:if>
                <xsl:for-each select="events/event">
                  <xsl:call-template name="AVIMOMCLRXExceptionRow" />
                </xsl:for-each>
              </table>
              <table cellpadding="0" cellspacing="0" class="Header">
                <tr>
                  <td class="HeaderTitle" onclick="GlobalTreeExpander('exceptionDataH','exceptionContent','TreeNode');">Exception Data</td>
                  <td id="exceptionDataH" onclick="GlobalTreeExpander('exceptionDataH','exceptionContent','TreeNode');">
                    <xsl:choose>
                      <xsl:when test="count(aspect) &gt; 0">
                        <xsl:attribute name="class">TreeNodePlus</xsl:attribute>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:attribute name="class">TreeNodeMinus</xsl:attribute>
                      </xsl:otherwise>
                    </xsl:choose>
                    <li />
                  </td>
                </tr>
              </table>
              <div id="exceptionContent">
                <xsl:if test="count(aspect) &gt; 0">
                  <xsl:attribute name="style">display:none;</xsl:attribute>
                </xsl:if>
                <xsl:call-template name="AVIMOMCLRXExceptionData" />
              </div>
              <table cellpadding="0" cellspacing="0" class="Header">
                <tr>
                  <td class="HeaderTitle" onclick="GlobalTreeExpander('exceptionStackH','mainTreeFun','TreeNode');">Stack</td>
                  <td id="exceptionStackH" onclick="GlobalTreeExpander('exceptionStackH','mainTreeFun','TreeNode');">
                    <xsl:choose>
                      <xsl:when test="count(aspect) &gt; 0">
                        <xsl:attribute name="class">TreeNodePlus</xsl:attribute>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:attribute name="class">TreeNodeMinus</xsl:attribute>
                      </xsl:otherwise>
                    </xsl:choose>
                    <li />
                  </td>
                </tr>
              </table>
              <xsl:call-template name="AVIMOMCLRXFunctionStack" />
              <!--add modules stack-->
              <xsl:if test="count(modules/module) &gt; 0">
                <table cellpadding="0" cellspacing="0" class="Header">
                  <tr>
                    <td class="HeaderTitle" onclick="GlobalTreeExpander('modulesStack','moduleRows','TreeNode');">Modules List</td>
                    <td id="modulesStack" class="TreeNodePlus" onclick="GlobalTreeExpander('modulesStack','moduleRows','TreeNode');">
                      <li />
                    </td>
                  </tr>
                </table>
                <div id="moduleRows" style="Display:none;" class="ModulesVar">
                  <table cellpadding="0" cellspacing="0" class="TreeVar">
                    <col class="TreeVarCol1" />
                    <col class="TreeVarCol2" />
                    <tr>
                      <th class="TreeVarHeader1">Name</th>
                      <th class="TreeVarHeader2">Value</th>
                    </tr>
                    <xsl:for-each select="modules/module">
                      <Script Language="JavaScript">
                        <xsl:text>document.write(ModulesContent('</xsl:text>
                        <xsl:value-of select="position()" />
                        <xsl:text>','</xsl:text>
                        <xsl:value-of select="name" />
                        <xsl:text>','</xsl:text>
                        <xsl:value-of select="version" />
                        <xsl:text>','</xsl:text>
                        <xsl:value-of select="dateModified" />
                        <xsl:text>','</xsl:text>
                        <xsl:value-of select="path" />
                        <xsl:text>','</xsl:text>
                        <xsl:value-of select="pdbPath" />
                        <xsl:text>'));</xsl:text>
                      </Script>
                    </xsl:for-each>
                  </table>
                </div>
              </xsl:if>
              <xsl:call-template name="AVIMOMCLRXCollectionNotes" />
            </td>
          </tr>
        </table>
        <script language="JavaScript" for="document.onLoad()">OpenContentForHigh();</script>
      </xsl:template>
      <xsl:template name="AVIMOMCLRXCollectionNotes">
        <xsl:if test="(count(properties/add) &gt; 0) or (count(processID) &gt; 0)">
          <table cellpadding="0" cellspacing="0" class="Header">
            <tr>
              <td class="HeaderTitle" onclick="GlobalTreeExpander('collectionNotesH', 'collectionNotes', 'TreeNode');">Collection Notes</td>
              <td id="collectionNotesH" class="TreeNodePlus" onclick="GlobalTreeExpander('collectionNotesH', 'collectionNotes', 'TreeNode');">
                <li />
              </td>
            </tr>
          </table>
          <div id="collectionNotes" style="display: none; padding: 4px;">
            <div id="collectionRows" class="ModulesVar">
              <table cellpadding="0" cellspacing="0" class="TreeVar">
                <col class="TreeVarCol1" />
                <col class="TreeVarCol2" />
                <tr>
                  <th class="TreeVarHeader1">Name</th>
                  <th class="TreeVarHeader2">Value</th>
                </tr>
                <xsl:if test="count(properties/add[@name='fullAppPath']) &gt; 0">
                  <tr class="Normal">
                    <td style="width: 32%;">Full Application Path</td>
                    <xsl:element name="td">
                      <xsl:choose>
                        <xsl:when test="count(properties/add[@name='fullAppPath' and @value]) &gt; 0">
                          <xsl:value-of select="properties/add[@name='fullAppPath']/@value" />
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="properties/add[@name='fullAppPath']" />
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                  </tr>
                </xsl:if>
                <xsl:if test="count(processID) &gt; 0">
                  <tr class="Normal">
                    <td style="width: 32%;">Process ID</td>
                    <td>
                      <xsl:value-of select="processID" />
                    </td>
                  </tr>
                </xsl:if>
                <xsl:if test="count(properties/add[@name='threadId']) &gt; 0">
                  <tr class="Normal">
                    <td style="width: 32%;">Thread ID</td>
                    <xsl:element name="td">
                      <xsl:choose>
                        <xsl:when test="count(properties/add[@name='threadId' and @value]) &gt; 0">
                          <xsl:value-of select="properties/add[@name='threadId']/@value" />
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="properties/add[@name='threadId']" />
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                  </tr>
                </xsl:if>
                <xsl:if test="count(properties/add[@name='cpuCores']) &gt; 0">
                  <tr class="Normal">
                    <td style="width: 32%;">CPU Cores</td>
                    <xsl:element name="td">
                      <xsl:value-of select="properties/add[@name='cpuCores']" />
                    </xsl:element>
                  </tr>
                </xsl:if>
              </table>
            </div>
          </div>
        </xsl:if>
      </xsl:template>
      <xsl:template name="AVIMOMCLRXAspects">
        <xsl:if test="aspect/@type = 'security' or aspect/@type = 'connectivity'">
          <table cellpadding="0" cellspacing="0" class="Header">
            <tr>
              <td class="HeaderTitle" onclick="GlobalTreeExpander('aspectStack','aspectContainer','TreeNode');">Description</td>
              <td id="aspectStack" class="TreeNodeMinus" onclick="GlobalTreeExpander('aspectStack','aspectContainer','TreeNode');">
                <li />
              </td>
            </tr>
          </table>
          <div id="aspectContainer">
            <!-- Exception info -->
            <div style="padding: 0 0 5px 2px;">
              <!--
                <xsl:text>An exception "</xsl:text>
                <b><xsl:value-of select='events/event[1]/variable/type' /><xsl:text>:&#160;</xsl:text><xsl:value-of select="events/event[1]/variable/description"></xsl:value-of></b>
                <xsl:text>"  has been thrown.</xsl:text><br/><xsl:text>This exception belongs to the </xsl:text>
                <b><xsl:value-of select='aspect/@type' /></b>
                <xsl:text> aspect.</xsl:text><br/><xsl:text>The information below will be helpful to find out the root cause of the problem.</xsl:text>
                -->
              <xsl:value-of select="aspect/aspectDescription" />
            </div>
            <!-- Aspect data -->
            <xsl:if test="count(aspect/*[local-name()='target' or local-name()='action' or local-name()='security']) &gt; 0">
              <div id="aspectRows" style="Display:;" class="ModulesVar">
                <table cellpadding="0" cellspacing="0" class="TreeVar">
                  <col class="TreeVarCol1" />
                  <col class="TreeVarCol2" />
                  <tr>
                    <th class="TreeVarHeader1">Name</th>
                    <th class="TreeVarHeader2">Value</th>
                  </tr>
                  <!-- target -->
                  <xsl:if test="count(aspect/target/item) &gt; 0">
                    <tr class="Normal">
                      <td style="width: 32%;">
                        <table class="TreeNodeValue" cellpadding="0" cellspacing="0">
                          <tr>
                            <td class="TreeVarNodeMinus" onclick="AspectsExpander(this, 'target');">
                              <li />
                            </td>
                            <td class="TreeNodeTarget">
                              <li />
                            </td>
                            <td>Target</td>
                          </tr>
                        </table>
                      </td>
                      <td>
                        <img src="Images\AVIcode.DotNet.SystemCenter.Images.empty" width="1" height="1" />
                      </td>
                    </tr>
                  </xsl:if>
                  <xsl:for-each select="aspect/target/item">
                    <xsl:call-template name="AVIMOMCLRXAspectRow">
                      <xsl:with-param name="id">target</xsl:with-param>
                    </xsl:call-template>
                  </xsl:for-each>
                  <!-- action -->
                  <xsl:if test="count(aspect/action/item) &gt; 0">
                    <tr class="Normal">
                      <td style="width: 32%;">
                        <table class="TreeNodeValue" cellpadding="0" cellspacing="0">
                          <tr>
                            <td class="TreeVarNodeMinus" onclick="AspectsExpander(this, 'action');">
                              <li />
                            </td>
                            <td class="TreeNodeAction">
                              <li />
                            </td>
                            <td>Actions</td>
                          </tr>
                        </table>
                      </td>
                      <td>
                        <img src="Images\AVIcode.DotNet.SystemCenter.Images.empty" width="1" height="1" />
                      </td>
                    </tr>
                  </xsl:if>
                  <xsl:for-each select="aspect/action/item">
                    <xsl:call-template name="AVIMOMCLRXAspectRow">
                      <xsl:with-param name="id">action</xsl:with-param>
                    </xsl:call-template>
                  </xsl:for-each>
                  <!-- security context -->
                  <xsl:if test="count(aspect/security/item) &gt; 0">
                    <tr class="Normal">
                      <td style="width: 32%;">
                        <table class="TreeNodeValue" cellpadding="0" cellspacing="0">
                          <tr>
                            <td class="TreeVarNodeMinus" onclick="AspectsExpander(this, 'context');">
                              <li />
                            </td>
                            <td class="TreeNodeSecurity">
                              <li />
                            </td>
                            <td>Security context</td>
                          </tr>
                        </table>
                      </td>
                      <td>
                        <img src="Images\AVIcode.DotNet.SystemCenter.Images.empty" width="1" height="1" />
                      </td>
                    </tr>
                  </xsl:if>
                  <xsl:for-each select="aspect/security/item">
                    <xsl:call-template name="AVIMOMCLRXAspectRow">
                      <xsl:with-param name="id">context</xsl:with-param>
                    </xsl:call-template>
                  </xsl:for-each>
                </table>
              </div>
            </xsl:if>
          </div>
          <br />
          <br />
        </xsl:if>
      </xsl:template>
      <xsl:template name="AVIMOMCLRXAspectRow">
        <xsl:param name="id" />
        <tr id="{$id}" class="Normal">
          <td style="width: 32%;">
            <table class="TreeNodeValue" cellpadding="0" cellspacing="0">
              <tr>
                <td>
                  <xsl:choose>
                    <xsl:when test="position()=last()">
                      <xsl:attribute name="class">TreeNodeLast</xsl:attribute>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:attribute name="class">TreeNodeSibling</xsl:attribute>
                    </xsl:otherwise>
                  </xsl:choose>
                  <li />
                </td>
                <td>
                  <xsl:value-of select="name" />
                </td>
              </tr>
            </table>
          </td>
          <td>
            <xsl:value-of select="value" />
            <xsl:text disable-output-escaping="yes"> </xsl:text>
          </td>
        </tr>
      </xsl:template>
      <xsl:template name="AVIMOMCLRXFunctionStack">
        <div id="mainTreeFun">
          <xsl:if test="count(aspect) &gt; 0">
            <xsl:attribute name="style">display:none;</xsl:attribute>
          </xsl:if>
          <!-- Checkbox line -->
          <table cellpadding="0" cellspacing="0" class="HeaderInput">
            <tr>
              <td class="CheckBox">
                <input id="input" type="checkbox">
                  <xsl:choose>
                    <xsl:when test="count(events/event/stack/stackPoint[style='Low']) &gt; 0 or count(events/handler/stackPoint[style='Low']) &gt; 0">
                      <xsl:attribute name="onclick">ShowLow(this)</xsl:attribute>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:attribute name="disabled">true</xsl:attribute>
                    </xsl:otherwise>
                  </xsl:choose>
                </input>
                <label for="input">Show Complete Stack</label>
              </td>

              <td class="CheckBox">
                <input id="cbShowParameters" type="checkbox" onclick="return ShowFuncParams(this)" />
                <label for="cbShowParameters">Show parameters</label>
              </td>
              <td class="CheckBox">
                <input id="cbShowLines" type="checkbox" checked="1" onclick="ShowFuncLines(this)" />
                <label for="cbShowLines">Show lines</label>
              </td>
              <td> </td>
              <td>
                <a href="javascript: CollapseAll()">Collapse all</a>
              </td>
            </tr>
          </table>
          <br />
          <br />
          <!-- Create exceptions' stack -->
          <xsl:for-each select="events/event">
            <div id="stackelem">
              <xsl:attribute name="mainId">
                <xsl:value-of select="position()" />
                <xsl:text>ev</xsl:text>
              </xsl:attribute>

              <!-- Information about exception current stack belong to -->
              <xsl:if test="position() != 1">
                <br />
                <br />
              </xsl:if>
              <table cellspacing="0" cellpadding="0" class="ExceptionData">
                <tr>
                  <td id="1sp{position()}ex" class="TreeNodeDetailsPlus">

                    <xsl:attribute name="class">
                      <xsl:choose>
                        <xsl:when test="position() = 1">
                          <xsl:text>TreeNodeDetailsPlusSelected</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:text>TreeNodeDetailsPlus</xsl:text>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:attribute>

                    <xsl:attribute name="onclick">
                      <xsl:text>Expander(this,'TreeNodeDetails',</xsl:text>
                      <xsl:call-template name="AVIMOMCLRXExceptionParameters">
                        <xsl:with-param name="mainId">
                          <xsl:value-of select="position()" />
                          <xsl:text>ex</xsl:text>
                        </xsl:with-param>
                      </xsl:call-template>
                      <xsl:text>, false);</xsl:text>
                    </xsl:attribute>

                    <li>
                      <a name="1sp{position()}ex" />
                      <!--xsl:element name="span">
                                        <xsl:attribute name="oncontextmenu">
                                            <xsl:text>MSDNContextMenu(this,'</xsl:text>
                                            <xsl:value-of select="variable/type" />
                                            <xsl:text>');</xsl:text>
                                        </xsl:attribute>
                                        <xsl:value-of select="variable/type" />
                                    </xsl:element-->
                      <xsl:element name="b">
                        <xsl:value-of select="variable/type" />
                        <xsl:text>: </xsl:text>
                      </xsl:element>
                      <xsl:value-of select="variable/description" />
                      <xsl:element name="i">
                        <xsl:text> thrown at</xsl:text>
                      </xsl:element>
                    </li>
                  </td>
                </tr>
              </table>
              <!-- Stack -->
              <xsl:call-template name="AVIMOMCLRXStack">
                <xsl:with-param name="mainId">
                  <xsl:value-of select="position()" />
                  <xsl:text>ev</xsl:text>
                </xsl:with-param>
                <xsl:with-param name="stackPath" select="stack/stackPoint" />
              </xsl:call-template>
            </div>
          </xsl:for-each>
          <!-- Create handler's stack -->
          <xsl:for-each select="events/handler">
            <br />
            <div id="stackelem">
              <xsl:attribute name="mainId">
                <xsl:value-of select="position()" />
                <xsl:text>hev</xsl:text>
              </xsl:attribute>
              <!-- Information about exception current stack belonging to -->
              <br />
              <b>
                <xsl:text>Handled at</xsl:text>
              </b>
              <!-- Stack -->
              <xsl:call-template name="AVIMOMCLRXStack">
                <xsl:with-param name="mainId">
                  <xsl:value-of select="position()" />
                  <xsl:text>hev</xsl:text>
                </xsl:with-param>
                <xsl:with-param name="stackPath" select="stackPoint" />
              </xsl:call-template>
            </div>
          </xsl:for-each>
        </div>
      </xsl:template>
      <xsl:template name="AVIMOMCLRXExceptionRow">
        <tr>
          <xsl:if test="position() != 1">
            <xsl:attribute name="id">LowEx</xsl:attribute>
            <xsl:attribute name="style">Display:none;</xsl:attribute>
          </xsl:if>
          <td>
            <table cellpadding="0" cellspacing="0" id="exceptionValue" class="ExceptionTreeVal">
              <tr id="{position()}evexValue">
                <xsl:if test="position() != 1">
                  <xsl:element name="td">
                    <xsl:choose>
                      <xsl:when test="position()!=last()">
                        <xsl:attribute name="class">ExceptionTreeMiddle</xsl:attribute>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:attribute name="class">ExceptionTreeLast</xsl:attribute>
                      </xsl:otherwise>
                    </xsl:choose>
                    <xsl:element name="div" />
                  </xsl:element>
                </xsl:if>
                <xsl:element name="td">
                  <table cellpadding="0" cellspacing="0" id="exceptionName" class="ExceptionTreeName">
                    <tr id="{position()}evexName">
                      <xsl:choose>
                        <xsl:when test="position()=1 and position()!=last()">
                          <td id="showEx" class="TreeNodePlus" onclick="ShowLowEx(this);">
                            <div />
                          </td>
                        </xsl:when>
                        <xsl:when test="position()!=1">
                          <td id="showEx" class="TreeNodeEmpty"> </td>
                        </xsl:when>
                      </xsl:choose>
                      <xsl:element name="td">
                        <xsl:attribute name="class">
                          <xsl:if test="level != 'derived'">FieldNameSelected</xsl:if>
                          <xsl:if test="level = 'derived'">FieldName</xsl:if>
                        </xsl:attribute>
                        <xsl:attribute name="onclick">
                          JavaScript:ChangeExceptionData(<xsl:value-of select="position()" />);
                        </xsl:attribute>
                        <xsl:element name="a">
                          <xsl:attribute name="href">
                            <xsl:text>#1sp</xsl:text>
                            <xsl:value-of select="position()" />
                            <xsl:text>ex</xsl:text>
                          </xsl:attribute>
                          <!--xsl:attribute name="oncontextmenu">
                                                <xsl:text>MSDNContextMenu(this,'</xsl:text>
                                                <xsl:value-of select="variable/type" />
                                                <xsl:text>');</xsl:text>
                                            </xsl:attribute-->
                          <xsl:value-of select="variable/type" />
                          <xsl:text>: </xsl:text>
                        </xsl:element>
                        <xsl:value-of select="variable/description" />
                      </xsl:element>
                    </tr>
                  </table>
                </xsl:element>
              </tr>
            </table>
          </td>
        </tr>
      </xsl:template>
      <xsl:template name="AVIMOMCLRXExceptionData">
        <xsl:for-each select="events/event">
          <div id="exceptiondata">
            <xsl:attribute name="mainId">
              <xsl:value-of select="position()" />
              <xsl:text>ev</xsl:text>
            </xsl:attribute>
            <xsl:attribute name="Style">
              <xsl:if test="level = 'derived'">DISPLAY:none</xsl:if>
              <xsl:if test="level != 'derived'">DISPLAY:block</xsl:if>
            </xsl:attribute>
            <Script Language="JavaScript">
              <xsl:text>document.write(ExceptionExpander('</xsl:text>
              <xsl:value-of select="position()" />
              <xsl:text>exTree','*</xsl:text>
              <xsl:value-of select="variable/id" />
              <xsl:text>'));</xsl:text>
            </Script>
          </div>
        </xsl:for-each>
      </xsl:template>
      <xsl:template name="AVIMOMCLRXStack">
        <xsl:param name="mainId" />
        <xsl:param name="stackPath" />
        <!-- Stack  -->
        <table class="TreeFun" cellspacing="0" cellpadding="0">
          <xsl:for-each select="$stackPath">
            <xsl:variable name="pos" select="position()" />
            <xsl:if test="style != 'Low' and ../stackPoint[$pos - 1]/style = 'Low'">
              <tr id="Dots" class="Dots">
                <td colspan="2">...</td>
              </tr>
            </xsl:if>
            <tr>
              <xsl:if test="style='Low'">
                <xsl:attribute name="id">Low</xsl:attribute>
                <xsl:attribute name="style">Display:none;</xsl:attribute>
              </xsl:if>
              <Script Language="JavaScript">
                document.write(FuncImage(
                <xsl:if test="style='High'">
                  <xsl:text>true</xsl:text>
                </xsl:if>
                ));
              </Script>
              <td>
                <table cellspacing="0" cellpadding="0" class="TreeNode">
                  <tr>
                    <xsl:if test="style='High'">
                      <xsl:attribute name="id">High</xsl:attribute>
                    </xsl:if>
                    <td id="{position()}sp{$mainId}" class="TreeNodeDetailsPlus">
                      <xsl:attribute name="onclick">
                        <xsl:text>Expander(this,'TreeNodeDetails',</xsl:text>
                        <xsl:call-template name="AVIMOMCLRXParameters">
                          <xsl:with-param name="mainId" select="$mainId" />
                        </xsl:call-template>
                        <xsl:text>, true);</xsl:text>
                      </xsl:attribute>
                      <li>
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="style='Low'">TreeNodeValueLow</xsl:when>
                            <xsl:otherwise>TreeNodeValue</xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:call-template name="AVIMOMCLRXEventName">
                          <xsl:with-param name="mainId" select="$mainId" />
                        </xsl:call-template>
                      </li>
                    </td>
                    <td style="WIDTH: 16px">
                      <xsl:if test="count(serverLink) &gt; 0">
                        <xsl:attribute name="title">Chain info</xsl:attribute>
                        <xsl:attribute name="onclick">
                          <xsl:value-of select="serverLink" />
                        </xsl:attribute>
                        <xsl:attribute name="class">TreeNodeEChainIn</xsl:attribute>
                      </xsl:if>
                      <xsl:if test="count(clientLink) &gt; 0">
                        <xsl:attribute name="title">Chain info</xsl:attribute>
                        <xsl:attribute name="onclick">
                          <xsl:value-of select="clientLink" />
                        </xsl:attribute>
                        <xsl:attribute name="class">TreeNodeEChainOut</xsl:attribute>
                      </xsl:if>
                    </td>
                  </tr>
                </table>
              </td>
            </tr>
          </xsl:for-each>
        </table>
      </xsl:template>
      <xsl:template name="AVIMOMCLRXEventName">
        <xsl:param name="mainId" />

        <div class="FuncIcons">
          <xsl:variable name="parameterExist" select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.parameterExist')" />
          <xsl:choose>
            <xsl:when test="count(parameters/variable[name!='this']) &gt; 0">
              <span class="IconSpace">
                <a onclick="ShowTab('{position()}sp{$mainId}', 0)" style="cursor:hand;">
                  <img src="{$parameterExist}" width="12" height="11" border="0" vspace="2" alt="Show parameters" />
                </a>
              </span>
            </xsl:when>
            <xsl:when test="count(parameters/variable[name='this']/variables/variable) &gt; 0">
              <span class="IconSpace">
                <a onclick="ShowTab('{position()}sp{$mainId}', 1)" style="cursor:hand;">
                  <img src="{$parameterExist}" width="12" height="11" border="0" vspace="2" alt="Show members" />
                </a>
              </span>
            </xsl:when>
          </xsl:choose>



          <xsl:if test="source">
            <span class="IconSpace">
              <xsl:variable name="sourceExist" select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.sourceExist')" />
              <a onclick="ShowTab('{position()}sp{$mainId}', 2)" style="cursor:hand;">
                <img src="{$sourceExist}" width="12" height="11" border="0" vspace="2" alt="Show source" />
              </a>
            </span>
          </xsl:if>


        </div>
        <div class="FuncName">
          <xsl:choose>
            <xsl:when test="string-length(substring-before(description, '(')) != 0">
              <!--xsl:element name="span">
                        <xsl:attribute name="oncontextmenu">
                            <xsl:text>MSDNContextMenu(this,'</xsl:text>
                            <xsl:value-of select="substring-before(description, '(')" />
                            <xsl:text>');</xsl:text>
                        </xsl:attribute-->
              <xsl:value-of select="substring-before(description, '(')" disable-output-escaping="yes" />
              <!--/xsl:element-->
              <span id="funcParams" style="display: none">
                <xsl:attribute name="class">
                  <xsl:if test="not(style) or style != 'Low'">
                    <xsl:text>FuncParams</xsl:text>
                  </xsl:if>
                </xsl:attribute>
                <xsl:text>(</xsl:text>
                <xsl:value-of select="substring-before(substring-after(description, '('), ')')" disable-output-escaping="yes" />
                <xsl:text>)</xsl:text>
              </span>
              <xsl:value-of select="substring-after(description, ')')" disable-output-escaping="yes" />
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="description" disable-output-escaping="yes" />
            </xsl:otherwise>
          </xsl:choose>
          <xsl:if test="(substring-before(description, '.') = substring-before(method, '.') or substring-before(description, '.') = method) and (iPointer) and (iPointer != '')">
            <span id="funcLines">
              <xsl:choose>
                <xsl:when test="count(source/file) &gt; 0">
                  <xsl:text> +</xsl:text>
                  <xsl:value-of select="iPointer" disable-output-escaping="yes" />
                </xsl:when>
                <xsl:otherwise>
                  <xsl:text> +</xsl:text>
                  <span class="EmptySource">
                    <xsl:value-of select="iPointer" disable-output-escaping="yes" />
                  </span>
                </xsl:otherwise>
              </xsl:choose>
              <!--<xsl:text> +</xsl:text>
                    <xsl:value-of select="iPointer" disable-output-escaping="yes" />-->
            </span>
          </xsl:if>
          <span id="funcLines">
            <xsl:if test="source/file">
              <xsl:text> in </xsl:text>
              <xsl:value-of select="source/file" />
              <xsl:text>: </xsl:text>
              <xsl:value-of select="source/line" />
            </xsl:if>
          </span>
        </div>

      </xsl:template>
      <xsl:template name="AVIMOMCLRXExceptionParameters">
        <xsl:param name="mainId" />
        <xsl:text>'</xsl:text>
        <xsl:value-of select="position()" />
        <xsl:text>sp</xsl:text>
        <xsl:value-of select="$mainId" />
        <xsl:text>',</xsl:text>
        <!-- Exception details -->
        <xsl:if test="count(variable/variables/variable) &gt; 0">
          <xsl:text>[</xsl:text>
          <xsl:for-each select="variable/variables/variable">
            <xsl:text>'*</xsl:text>
            <xsl:value-of select="objectID" />
            <xsl:text>'</xsl:text>
            <xsl:if test="position()!= last()">
              <xsl:text>,</xsl:text>
            </xsl:if>
          </xsl:for-each>
          <xsl:text>],[</xsl:text>
          <xsl:for-each select="variable/variables/variable">
            <xsl:text>'</xsl:text>
            <xsl:value-of select="name" />
            <xsl:text>'</xsl:text>
            <xsl:if test="position()!= last()">
              <xsl:text>,</xsl:text>
            </xsl:if>
          </xsl:for-each>
          <xsl:text>],</xsl:text>
        </xsl:if>
        <xsl:if test="count(variable/variables/variable) = 0">
          <xsl:text>'','',</xsl:text>
        </xsl:if>
        <!-- MemIds, MemNames -->
        <xsl:text>'','',</xsl:text>
        <!-- LocIds, LocNames -->
        <xsl:text>'','',</xsl:text>
        <!-- 
            isSource, Source 
            We try to find the deepest function which has the source code 
          -->
        <xsl:choose>
          <xsl:when test="count(stack/stackPoint[source]) &gt; 0">
            <xsl:for-each select="stack/stackPoint[source][1]">
              <xsl:call-template name="AVIMOMCLRXSourceInfo">
                <xsl:with-param name="exceptionType" select="ancestor::*[name() = 'event']/variable/type" />
              </xsl:call-template>
            </xsl:for-each>
          </xsl:when>
          <!-- if no sorce data collected we'll take module info from the first "High"-stlyle stackPoint -->
          <xsl:when test="count(stack/stackPoint[style='High']) &gt; 0">
            <xsl:for-each select="stack/stackPoint[style='High'][1]">
              <xsl:call-template name="AVIMOMCLRXSourceInfo">
                <xsl:with-param name="exceptionType" select="ancestor::*[name() = 'event']/exception/type" />
              </xsl:call-template>
            </xsl:for-each>
          </xsl:when>
          <!-- if no sorce data collected and no "High"-stlyle stackPoints exist we'll take module info from the first stackPoint element -->
          <xsl:when test="count(stack/stackPoint) &gt; 0">
            <xsl:for-each select="stack/stackPoint[1]">
              <xsl:call-template name="AVIMOMCLRXSourceInfo">
                <xsl:with-param name="exceptionType" select="ancestor::*[name() = 'event']/exception/type" />
              </xsl:call-template>
            </xsl:for-each>
          </xsl:when>
          <!-- Otherwise we just call template in order to generate default stub -->
          <xsl:otherwise>
            <xsl:call-template name="AVIMOMCLRXSourceInfo">
              <xsl:with-param name="exceptionType" select="exception/type" />
            </xsl:call-template>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:template>
      <xsl:template name="AVIMOMCLRXParameters">
        <xsl:param name="mainId" />
        <xsl:text>'</xsl:text>
        <xsl:value-of select="position()" />
        <xsl:text>sp</xsl:text>
        <xsl:value-of select="$mainId" />
        <xsl:text>',</xsl:text>
        <!-- VarIds, VarNames -->
        <xsl:choose>
          <xsl:when test="(count(parameters/variable[name!='this']) &gt; 0) and (count(//professionalLicenseLimitation) = 0)">
            <xsl:text>[</xsl:text>
            <xsl:for-each select="parameters/variable[name!='this']">
              <xsl:text>'*</xsl:text>
              <xsl:value-of select="objectID" />
              <xsl:text>'</xsl:text>
              <xsl:if test="position()!=last()">
                <xsl:text>,</xsl:text>
              </xsl:if>
            </xsl:for-each>
            <xsl:text>],[</xsl:text>
            <xsl:for-each select="parameters/variable[name!='this']">
              <xsl:text>'</xsl:text>
              <xsl:value-of select="name" />
              <xsl:text>'</xsl:text>
              <xsl:if test="position()!=last()">
                <xsl:text>,</xsl:text>
              </xsl:if>
            </xsl:for-each>
            <xsl:text>],</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>'','',</xsl:text>
          </xsl:otherwise>
        </xsl:choose>

        <!-- MemIds, MemNames -->
        <xsl:choose>
          <xsl:when test="(count(parameters/variable[name='this']/variables/variable) &gt; 0) and (count(//professionalLicenseLimitation) = 0)">
            <xsl:text>[</xsl:text>
            <xsl:for-each select="parameters/variable[name='this']/variables/variable">
              <xsl:text>'*</xsl:text>
              <xsl:value-of select="objectID" />
              <xsl:text>'</xsl:text>
              <xsl:if test="position()!=last()">
                <xsl:text>,</xsl:text>
              </xsl:if>
            </xsl:for-each>
            <xsl:text>],[</xsl:text>
            <xsl:for-each select="parameters/variable[name='this']/variables/variable">
              <xsl:text>'</xsl:text>
              <xsl:value-of select="name" />
              <xsl:text>'</xsl:text>
              <xsl:if test="position()!=last()">
                <xsl:text>,</xsl:text>
              </xsl:if>
            </xsl:for-each>
            <xsl:text>],</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>'','',</xsl:text>
          </xsl:otherwise>
        </xsl:choose>

        <!-- LocIds, LocNames -->
        <xsl:text>'','',</xsl:text>

        <!-- isSource, Source -->
        <xsl:call-template name="AVIMOMCLRXSourceInfo" />
      </xsl:template>
      <xsl:template name="AVIMOMCLRXSourceInfo">
        <xsl:param name="exceptionType" />
        <xsl:choose>
          <xsl:when test="source">
            <xsl:text>true, '</xsl:text>
            <xsl:value-of select="//source" />
            <xsl:text>', </xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>false,'',</xsl:text>
          </xsl:otherwise>
        </xsl:choose>
        <!-- isAliased, FunctionName -->
        <xsl:choose>
          <xsl:when test="substring-before(description, '.') != substring-before(method, '.') and substring-before(description, '.') != method">
            <xsl:text>true,'</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>false,'</xsl:text>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:choose>
          <xsl:when test="$exceptionType">
            <xsl:value-of select="$exceptionType" />
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="method" />
          </xsl:otherwise>
        </xsl:choose>
        <xsl:text>','</xsl:text>
        <!-- iPointer -->
        <xsl:value-of select="iPointer" />
        <xsl:text>','</xsl:text>
        <!-- module, version, dateModified, path, pdbPath -->
        <xsl:value-of select="module" />
        <xsl:text>','</xsl:text>
        <xsl:call-template name="AVIMOMCLRXModuleInfo">
          <xsl:with-param name="module">
            <xsl:value-of select="module" />
          </xsl:with-param>
        </xsl:call-template>
        <!-- source line, file ref, code lines, code lines type, methodInfo -->
        <xsl:value-of select="source/line" />
        <xsl:text>','</xsl:text>
        <xsl:value-of select="source/fileRef" />
        <xsl:text>',</xsl:text>
        <xsl:if test="count(source/code/line) &gt; 0">
          <xsl:text>[</xsl:text>
          <xsl:for-each select="source/code/line">
            <xsl:text>'</xsl:text>
            <xsl:value-of select="." />
            <xsl:text>'</xsl:text>
            <xsl:if test="position()!=last()">
              <xsl:text>,</xsl:text>
            </xsl:if>
          </xsl:for-each>
          <xsl:text>],</xsl:text>
        </xsl:if>
        <xsl:if test="count(source/code/line)= 0">
          <xsl:text>'',</xsl:text>
        </xsl:if>
        <xsl:if test="count(source/code/line) &gt; 0">
          <xsl:text>[</xsl:text>
          <xsl:for-each select="source/code/line">
            <xsl:text>'</xsl:text>
            <xsl:value-of select="@main" />
            <xsl:text>'</xsl:text>
            <xsl:if test="position()!=last()">
              <xsl:text>,</xsl:text>
            </xsl:if>
          </xsl:for-each>
          <xsl:text>]</xsl:text>
        </xsl:if>
        <xsl:if test="count(source/code/line)= 0">
          <xsl:text>''</xsl:text>
        </xsl:if>
        <xsl:text>,'</xsl:text>
        <xsl:value-of select="normalize-space(methodInfo)" />
        <xsl:text>',</xsl:text>
        <xsl:choose>
          <xsl:when test="wrongModule">
            <xsl:text>true</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>false</xsl:text>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:template>
      <xsl:template name="AVIMOMCLRXModuleInfo">
        <xsl:param name="module" />
        <xsl:if test="count(//modules/module[path=$module]) &gt; 0">
          <xsl:variable name="moduleInfo" select="//modules/module[path=$module]" />
          <xsl:value-of select="$moduleInfo/version" />
          <xsl:text>','</xsl:text>
          <xsl:value-of select="$moduleInfo/dateModified" />
          <xsl:text>','</xsl:text>
          <xsl:value-of select="$moduleInfo/path" />
          <xsl:text>','</xsl:text>
          <xsl:value-of select="$moduleInfo/pdbPath" />
          <xsl:text>','</xsl:text>
        </xsl:if>
        <xsl:if test="count(//modules/module[path=$module]) = 0">
          <xsl:text>','','','','</xsl:text>
        </xsl:if>
      </xsl:template>
      <xsl:template name="AVIMOMCLRXMonitorScript">
        <xsl:element name="script">
          <xsl:comment>
            
            
function tdcontent(s){
    if (s == undefined || s =='')
        return '&amp;#160;'
    else
        return s;  
}

function TableHead(className){
    return '&lt;table class="' + className + '"  cellpadding="0" cellspacing="0"&gt;';
}
///////////////////////////////////////////////////////////////////////////////
// Object processing  
///////////////////////////////////////////////////////////////////////////////

var id = -1; 

function OdId(){
    id ++;   
    return '*' + id;    
}

function OD(ot, ov){
    od[OdId()] = new ObjData(ot, ov);	
}

function Bl(val){
    if (val == 1)
        OD("BOOLEAN", "true");
    else
        OD("BOOLEAN", "false");
}

function OV(Id, Name)
{
    if (typeof(Id) == 'string'){
        this.Id = [Id];
        this.Name = [Name];
    }
    else{
        this.Id = Id;	
        this.Name = Name;	
    }
}


function ObjData(ot, ov)
{	
    this.ot = ot;
    this.ov = ov;	
    if (typeof(ov) == 'string')
        this.os = 's';
    else
        if (this.ot == t1 || this.ot == t2 || this.ot == t3)
            this.os = 'a';
        else
            this.os = 'c';	
}

var od = new Array(); 
                      
//FillObjects(); //This function is described in the C# code and attached to the html

///////////////////////function

function GetParameterDefinition(id, name){
    value='';
    title = '';
    
    if (od[id].os == 's'){
        value = name + ' = ' + od[id].ov;
        
        if (od[id].ot == 'STRING')
            value = name + ' = \'' + od[id].ov + '\'';
    }                  
            
    type='';
    flag = true;
    for (var i = od[id].ot.length; i &gt;= 0; i=i-1)
        if (od[id].ot.charAt(i) != '.' &amp;&amp; flag)
            type = od[id].ot.charAt(i) + type;
        else flag = false;  
    title = 'title="' + od[id].ot + ' ' + value  + '"'; 	    	          
    
    return  '&lt;span ' + title + '&gt;&lt;span  class="TreeNodeValueType"&gt;' + type + '&lt;/span&gt;&lt;span class="TreeNodeValueParam"&gt;' + name + '&lt;/span&gt;&lt;/span&gt;';           
} 

////////////////////variable

//enum
var stateClosed = "TreeVarNodePlus";
var stateOpened = "TreeVarNodeMinus";
var stateEmpty  = "TreeVarNodeSimple";
var stateSpace  = "TreeVarNodeSpace";     
//enum end 

//enum
var treeEmpty   = '0';
var treeSibling = '1';
var treeLine    = '2';    
var treeLast    = '3';    
//enum end     

//enum
var itemSimple			= 'TreeNodeTypeSimple';       
var itemArray			= 'TreeNodeTypeArray';
var itemClass			= 'TreeNodeTypeClass';    
var itemClassNoInfo     = 'TreeNodeTypeClassNoInfo';    
//enum end 

var identity = 1;   //for id generation        

function newId(){
    identity ++;
    return identity;
}



function GetItemRow(name, value, info, type, 
                    onclick, itemId, tree, state, itemType){   
    name = tdcontent(name);
    value = tdcontent(value);
    info = tdcontent(info);            

    var s = '&lt;tr class="Normal" id="' + itemId + '" title="' + type + '"&gt;';
    //name td
    s += '&lt;td&gt;' + GetTreeNodeTable(name, onclick, itemId, tree, state, itemType) + '&lt;/td&gt;';        
    //value td               
    s += '&lt;td&gt;' + value + '&lt;/td&gt;';
    //structure td               
    s += '&lt;td&gt;' + info + '&lt;/td&gt;&lt;/tr&gt;';   
   
    return s;    
}



function InsertItem(tableId, index, name, value, info, type, onclick, itemId, tree, state, 
                    itemType){   
                        
    objTable = document.getElementById(tableId);   
    
    if (objTable) 
    {      
        name = tdcontent(name);
        value = tdcontent(value);
        info = tdcontent(info);            
                                    
        var s = GetTreeNodeTable(name, onclick, itemId, tree, state, itemType);
        
        var objRow;
        if (index &gt;= 0)
            objRow = objTable.insertRow(index);
        else     
            objRow = objTable.insertRow();
            
        objRow.id = itemId;            
        objRow.title = type;            
        objRow.className = "Normal";
        
        var objCell;
        objCell = objRow.insertCell();
        objCell.innerHTML  = s;           
        
        objCell = objRow.insertCell();    			
        objCell.innerHTML  = value;   
        
        objCell = objRow.insertCell();
        objCell.innerHTML  = info;               
    } 
}

function EscapeForHtml(str) {
    var result = str;
    if (result != null &amp;&amp; result != "") {
        result = result.replace(/[&lt;]/g,'&amp;lt;');
        result = result.replace(/[&gt;]/g,'&amp;gt;');
    }
    return result;
}

function GetTreeNodeTable(name, onclick, itemId, tree, state, itemType){  
        var s = '&lt;table class="TreeNodeValue"  cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td&gt;';        
        
        s += '&lt;table class="TreeNode" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;';             
        for (var i = 0; i &lt; tree.length; i++)
            switch (tree.charAt(i)){
                case treeEmpty:
                    s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';                              
                break; 
                case treeLast :
                    s += '&lt;td class="TreeNodeLast"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';                              
                break; 
                case treeLine :
                    s += '&lt;td class="TreeNodeLine"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';                              
                break; 
                case treeSibling:
                    s += '&lt;td class="TreeNodeSibling"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';                              
                break; 
            };
        s += '&lt;td onclick="' + onclick + '" class="' + state + '" id="' + itemId + 'sign"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';                              
        s += '&lt;td class="' + itemType + '"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;td&gt;';                        
        
        s += '&lt;table cellpadding="0" cellspacing="0" class="TreeNodeValueName"&gt;&lt;tr&gt;&lt;td&gt;' + EscapeForHtml(name) + '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;';             
        s += '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;';        
        
        return s;                   
}    

function InsertObjectLink(tableId, index, itemId, objId, name, path, tree){
      
    
    if (itemId == '')
        itemId = newId();          
        
    var onclick;
    var state;
    
    if (od[objId].os == 's' || objId == '*0' || typeof(od[objId].ov) == 'undefined' || typeof(od[objId].ov.Id) == 'undefined' || od[objId].ov.Id.length == 0)
    {
        onclick = '';
        if (tree == '')
            state = stateSpace;                
        else    
            state = stateEmpty;
    }       
    else{ 
            var escapedName = name;
            escapedName = escapedName.replace(/\\/g, '\\\\');
            escapedName = escapedName.replace(/'/g, "\\'");
            onclick = 'OpenLink(\'' + itemId + '\',\''+ objId.replace(/'/g, "\\'") + '\',\''+ escapedName +'\',\''+ path +'\',\''+ tree + '\')';
            state = stateClosed;
    }   
    
        
    if (tableId == '')
        return GetItemRow(name, GetValue(objId), GetInfo(objId), 
                    od[objId].ot, onclick, itemId, tree, state, 
                    GetItemType(objId));  
    else                
        InsertItem(tableId, index, name, GetValue(objId), GetInfo(objId), 
                    od[objId].ot, onclick, itemId, tree, state, 
                    GetItemType(objId));          
    
        
}     


function GetInfo(id){

    if (id == "*0")
        return "optimized";
        
    if (od[id].os == 'a') 
            return 'array';             
        
    if (od[id].os == 'c' ){
        if (typeof(od[id].ov) == 'undefined' || typeof(od[id].ov.Id) == 'undefined' || od[id].ov.Id.length == 0)				
            return 'class (members not collected)';                
        else            
            return 'class';         
        }   

    return "";
}

function GetItemType(id){
    
    if (od[id].os == 'a') 
        return itemArray;      
    
    if (od[id].os == 'c'){ 
        if (typeof(od[id].ov) == 'undefined' || typeof(od[id].ov.Id) == 'undefined' || od[id].ov.Id.length == 0)				
            return itemClassNoInfo ;                
        else            
            return itemClass;         
    }
        
    if (od[id].os == 's')            
        return itemSimple;    

    return "";
}
    


function GetValue(objId){
    if (od[objId].os == 's' &amp;&amp; typeof(od[objId].ov) != 'undefined')
        return od[objId].ov;                
    else            
        return '';                           
}

        
function OpenLink(itemId, objectId, name, path, tree){ 
    var objRow = document.getElementById(itemId); 
    if (objRow) 
    {
        //Define index and delete row
        var index = objRow.rowIndex;
        var currTable = objRow.parentElement.parentElement;
        var currTableBody = objRow.parentElement;
        var tableId = currTable.id;  
        currTableBody.deleteRow(objRow.rowIndex);
        
        var s = "";
        //Insert root
        var onClick = 'TreeExpander(\''+ itemId + '\', \'TreeVarNode\')';
        s += GetItemRow(name, '', GetInfo(objectId, -1), od[objectId].ot,
                    onClick, itemId, tree, stateOpened, GetItemType(objectId, -1),'');
        
        for (var i = 0; i &lt; od[objectId].ov.Id.length; i++){
            var childTree = tree;
            if (childTree.length &gt; 0){
                if (childTree.charAt(childTree.length - 1) == treeSibling)
                    childTree = childTree.substring(0, childTree.length - 1) + treeLine;
                else      
                    childTree = childTree.substring(0, childTree.length - 1) + treeEmpty;
            }        
                    
            if (i == od[objectId].ov.Id.length - 1) 
                childTree += treeLast;
            else    
                childTree += treeSibling;                    
                
            s += InsertObjectLink('', index + i + 1, itemId + '.' + i, '*' + od[objectId].ov.Id[i], 
                        od[objectId].ov.Name[i], path  + '.' + objectId, childTree);
        } 

        var divContainer = currTable.parentElement;
        var signRow = currTableBody.insertRow(index);
        var allTable = currTable.outerHTML;
        var sign = "&lt;TR&gt;&lt;/TR&gt;";
        var allTableArr = allTable.split(sign);
        divContainer.innerHTML = allTableArr[0]+s+allTableArr[1];                               
    }               
}


///////////////////////////////////////////////////////////////////////////////
// Expand
///////////////////////////////////////////////////////////////////////////////

function CollapseAll () 
{
    var eventCounter = 1;
    var obj = document.getElementById('1sp1ex');
    while (obj != null) 
    {
        //  Close exception info
        var row = obj.parentElement.parentElement.rows[1];
        if (typeof(row) != 'undefined' &amp;&amp; row.style.display == '') {
            obj.fireEvent("onClick");
        }

        //  Close all childs functions
        var funcCounter = 1;
        var obj = document.getElementById('1sp' + eventCounter + 'ev');
        while (obj != null) 
        {            
            var row = obj.parentElement.parentElement.rows[1];
            if (typeof(row) != 'undefined' &amp;&amp; row.style.display == '') {
                obj.fireEvent("onClick");
            }
            
            funcCounter++;
            var obj = document.getElementById(funcCounter + 'sp' + eventCounter + 'ev');            
        }
    
        eventCounter++;
        var obj = document.getElementById('1sp' + eventCounter + 'ex');            
    }  
    
    //  Close all handled functions
    var funcCounter = 1;
    var obj = document.getElementById('1sp1hev');
    while (obj != null) 
    {            
        var row = obj.parentElement.parentElement.rows[1];
        if (typeof(row) != 'undefined' &amp;&amp; row.style.display == '') {
            obj.fireEvent("onClick");
        }
        
        funcCounter++;
        var obj = document.getElementById(funcCounter + 'sp1hev');            
    }
      
}

function Expander(obj, prefix, child, varIds, varNames, memIds, memNames, locIds, locNames,
     isSource, source, isAliased, functionName, iPointer, module, version, dateModified, path, 
     pdbPath, line, fileref, codeLines, codeLinesType, methodInfo, wrongModule, isFunction)
{	
    if (obj.className.indexOf('Minus') &gt; 0)
    {
        obj.className = prefix + 'Plus' + (obj.className.indexOf('Selected') &gt; 0 ? 'Selected' : '');
        obj.parentElement.parentElement.rows[1].style.display = 'none';		
    }
    else
    {		
        obj.className = prefix + 'Minus' + (obj.className.indexOf('Selected') &gt; 0 ? 'Selected' : '');
        
        var row = obj.parentElement.parentElement.rows[1];				
        if (typeof(row) == 'undefined')
        {			
            row = obj.parentElement.parentElement.insertRow();			
            var cell = row.insertCell();
            cell.className = isFunction ? 'TabContainer' : 'TabExceptionContainer';
            cell.innerHTML = OpenNodeContent(child, varIds, varNames, memIds,	memNames, locIds, 
                locNames, isSource, source, isAliased, functionName,  module, version, dateModified, 
                path, line, fileref, iPointer, pdbPath, codeLines, codeLinesType, methodInfo, wrongModule, isFunction);						
            
            //  Hide function's parameters if table hadn't been built when "Show Parameters" combo was clicked
            if (document.getElementById("cbShowParameters").checked == false) {
                ShowFuncParams(document.getElementById("cbShowParameters"));
            }
        }
        else
            row.style.display = '';			
    }
}

function ExceptionExpander(mainId, exId){
    var s = '&lt;div class="ExceptionVar"&gt;&lt;table cellpadding="0" cellspacing="0" class="TreeVar" id="' + mainId + '"&gt;';
    s += Header() + InsertObjectLink('','1','',exId, 'exception', '', '') + '&lt;/table&gt;&lt;/div&gt;';
    return s;		
}

function TabHeader(id, num, activeTab, type, body){	
    return '&lt;div id="' + id + 'content' + num + '" Style="DISPLAY:' + ((activeTab==num) ? 'block' : 'none') + '"&gt;&lt;table cellpadding="0" cellspacing="0" class="TreeVar" id="' + id + type + '"&gt;' + body + '&lt;/table&gt;&lt;/div&gt;';
}

function Header(){
    return '&lt;col class="TreeVarCol1"/&gt;&lt;col class="TreeVarCol2"/&gt;&lt;col class="TreeVarCol3"/&gt;&lt;tr&gt;&lt;th class="TreeVarHeader1"&gt;Name&lt;/th&gt;&lt;th class="TreeVarHeader2"&gt;Value&lt;/th&gt;&lt;th class="TreeVarHeader3"&gt;Structure&lt;/th&gt;&lt;/tr&gt;';
}


function InsertLinks(varIds, varNames, msg){
    var s = Header();
    if (varIds.length == 0) {
        s += "&lt;td colspan=3&gt;" + msg + "&lt;/td&gt;";
    } else {
        for (var i = 0; i &lt; varIds.length; i++){
            s += InsertObjectLink('','','', varIds[i], varNames[i], '', '');
        }
    }
    return s;
}

function TabBookmark(id, num, activeTab, text){
    return  '&lt;td onmouseover="HightLightTab(true)" onmouseout="HightLightTab(false)" class="TabBookmark' + ((activeTab==num) ? 'Sel' : '') + '" id="' + id + num + '" onclick="SetTabValue(\'' + id + '\', ' + num + ')"&gt;&lt;nobr&gt;' + text + '&lt;/nobr&gt;&lt;/td&gt;';
}

function fillTemplate(tpl_string, pattern, rep_string)
{
    tpl = tpl_string.split(pattern);
    return tpl[0]+rep_string+tpl[1];
}

function getResultPdbUploadUrl(pdbUploadUrl, version, module)
{
    return fillTemplate(pdbUploadUrl, '___VERSION_PATTERNS___', escape('&amp;fromStackFrame=true&amp;assemblyVersion='+version+'&amp;assemblyName='+module.replace(/&amp;#39;/g, "'")));
}

function OpenNodeContent(id, varIds, varNames, memIds, memNames, locIds, locNames, isSource, source, isAliased, functionName,
     module, version, dateModified, path, line, fileref, iPointer, pdbPath, codeLines, codeLinesType, methodInfo, wrongModule, isFunction)
{
    var resultPdbUploadUrl = "";
    var emptySource = '&lt;div class="EmptySource"&gt;You must install PDB files on your monitored system to allow Application Diagnostics to display file names, local variables and line numbers related to a particular defect. &lt;/div&gt;';
    var emptyVariables = '&lt;div class=EmptySource&gt;To enable collection of values for method parameters and class members, add methods or their containing namespaces to the settings for this application in the “.NET Application Performance Monitoring” template in the Operations Console.&lt;/div&gt;';
    
    var monitoringEnabled = (methodInfo != "" &amp;&amp; varIds.length == 0 &amp;&amp; memIds.length == 0) ? false : true;
    
    var activeTab = 0;
    if (varIds.length == 0)
        if (!isFunction) 
            activeTab = 1;
        else 
            activeTab = memIds.length &gt; 0 ? 1 : 2;

    var s = '';
    
    //if aliased than display real name with parameters
    if (isAliased){
//		s += '&lt;a href="javascript:void(null)" oncontextmenu="MSDNContextMenu(this,\''+functionName+'\')" style="text-decoration:none;"&gt;&lt;span class="FunctionNameAndParemeters"&gt;' + functionName + '&lt;span id="funcParams"&gt;(';		
        s += '&lt;span class="FunctionNameAndParemeters"&gt;' + functionName + '(';				
        if (typeof(methodInfo) != 'undefined')
            s += methodInfo;
        else{
            for (var i = 0; count = varIds.length, i &lt; count; i++){	
                s += GetParameterDefinition(varIds[i], varNames[i]);
                if (i != count - 1)
                    s += ', ';
            }
        }
//		s += ')&lt;/span&gt;&lt;/a&gt;';
        s += ')&lt;/span&gt;';
        if (iPointer != '')
            s += '  +' + iPointer;
        s += '&lt;/span&gt;';
    }	
    
    s += TableHead('Tab');
    
    //TabBookmarks	
    s += '&lt;tr&gt;';
    s += '&lt;td&gt;&lt;table class=TableBookmark cellspacing=0 cellpadding=0 border=0&gt;&lt;tr&gt;';
    if (isFunction) {
        s += TabBookmark(id, 0, activeTab, 'Parameters(' + varIds.length + ')');
        s += TabBookmark(id, 1, activeTab, 'Member Variables(' + memIds.length + ')');
        s += TabBookmark(id, 2, activeTab, 'Source');

        functionName = TransformToMSDNFormat (functionName);
    } else {
        s += TabBookmark(id, 0, activeTab, 'Exception data(' + varIds.length + ')');	
        s += TabBookmark(id, 1, activeTab, 'Source');
    }

  s += '&lt;td class=TabBookmarkEmpty&gt;&lt;a href="http://search.msdn.microsoft.com/search/default.aspx?query=' + functionName + '" target="_blank" class="MSDNImg" alt="Search in MSDN"&gt;&lt;/a&gt;&lt;/td&gt;';
    s += '&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;';
    s += '&lt;/tr&gt;';
    
    //Tabs content
    s += '&lt;tr&gt;&lt;td class="TabContent"&gt;';	
    
    if (isFunction) {
        //parameters tab	
        
        var parametersBody = professionalLicenseLimitation ? ('&lt;tr&gt;&lt;td&gt;' + GetProfessionalLicenseLimitationMessage("Information about parameters") + '&lt;/td&gt;&lt;/tr&gt;') : InsertLinks(varIds, varNames, (!monitoringEnabled ? emptyVariables : ''));
        s += TabHeader(id, 0, activeTab, 'parameters', parametersBody);
        //members tab	
        var memberVariablesBody = professionalLicenseLimitation ? ('&lt;tr&gt;&lt;td&gt;' + GetProfessionalLicenseLimitationMessage("Information about parameters") + '&lt;/td&gt;&lt;/tr&gt;') : InsertLinks(memIds, memNames, (!monitoringEnabled ? emptyVariables : ''));
        s += TabHeader(id, 1, activeTab, 'this', memberVariablesBody);		
    } else {    
        //exception data
        s += TabHeader(id, 0, activeTab, 'exceptiondata', InsertLinks(varIds, varNames, ''));
    }
    
    //source tab
    var sourceStyle = (isFunction &amp;&amp; activeTab == 2) || (!isFunction &amp;&amp; activeTab == 1) ? '' : 'Style="DISPLAY:none"';
    s += '&lt;div id="' + id + 'content' + (isFunction ? 2 : 1) + '" ' + sourceStyle + '&gt;';
    var re = /\\/g;	
    s += '&lt;table cellpadding="0" cellspacing="0" class="TreeVar"&gt;';
    
    //header
    s += '&lt;col style="width: 20%" /&gt;&lt;col style="width: 100%" /&gt;&lt;tr&gt;&lt;th class="TreeVarHeader1"&gt;Name&lt;/th&gt;&lt;th class="TreeVarHeader2"&gt;Value&lt;/th&gt;&lt;/tr&gt;';
    
    //assembly info
    s += ModulesExpandRowContent('Assembly', id + 'assembly', isSource ? 'Plus' : 'Minus');		
    s += ModulesRowContent(false, 'Name', module + ((version != '') ? ', ' + version : ''), id + 'assembly', isSource ? 'none' : 'block'); 	
    s += ModulesRowContent(false, 'Date Modified', dateModified, id + 'assembly', isSource ? 'none' : 'block'); 
    // Note: CLRX events don't contain PDB path.
    // So, if there are needed assembly and .pdb files we don't show 'Symbols Path' node
    // and therefore 'Assembly Path' node should be the last in 'Assembly' node.
    s += ModulesRowContent(isSource ? true : false, 'Assembly Path', path, id + 'assembly', isSource ? 'none' : 'block'); 

    // Error message if there are not needed assembly and .pdb files in PDB Stroage
    if(isSource)
    {
        s += ModulesRowContent(true,  'Symbols Path', pdbPath, id + 'assembly', isSource ? 'none' : 'block');
    }
    else
    {
        var pdbFileArr = path.split("\\");
        var pdbFile = pdbFileArr[pdbFileArr.length-1].replace(/.exe$|.dll$/, ".pdb");
            
        var msg = '';
        if (wrongModule)
        {
            msg = 'There is incorrect version of assembly file in PDB Storage.&lt;/div&gt;';			
        }
        else
        {
            msg = 'File \'' + pdbFile + '\' was not found. &lt;/div&gt;';
        }
        
        s += ModulesRowContent(true,  'Symbols', '&lt;div class="EmptySource"&gt;' + msg, id + 'assembly', isSource ? 'none' : 'block');
    }
    
    /*
    //  CLRX events don't contain PDB path
    if(isSource)
        s += ModulesRowContent(true,  'Symbols Path', pdbPath, id + 'assembly', isSource ? 'none' : 'block');
    else
        s += ModulesRowContent(true,  'Symbols', 'File \'' + pdbPath + '\' was not found', id + 'assembly', isSource ? 'none' : 'block');
    */
    //source code info
    
    if (professionalLicenseLimitation)
    {
        s += ModulesExpandRowContent('Code', id + 'source', 'Plus');			
        s += ModulesRowContent(true, 'Empty', GetProfessionalLicenseLimitationMessage("Information about source code"), id + 'source', 'none');	
    }
    else
    {
        if (!isRestrictedMode || (isRestrictedMode &amp;&amp; isAdmin))
        {
            s += ModulesExpandRowContent('Code', id + 'source', isSource ? 'Minus' : 'Plus');
        }
            
        if (isSource)
        {	
            var file = '';
            if (fileref == '')
                file = '&amp;#160;';
            else
                file = '&amp;#160;' + fileref;
            
            //file row
            s += ModulesRowContent(false, 'File', file, id + 'source', isSource ? 'block' : 'none');
            //line row
            s += ModulesRowContent(false, 'Line', tdcontent(line), id + 'source', isSource ? 'block' : 'none');		
        
            var sourceCode = '&lt;table class="SourceContainerCode" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;';
            
            if (codeLines == '')
                sourceCode += '&amp;#160;';
            else{
                for (var i = 0; i &lt; codeLines.length; i ++){
                    if (codeLinesType[i] == 'true')
                        sourceCode += '&lt;span class="TreeNodeValueHigh"&gt;' + codeLines[i] + '\n&lt;/span&gt;';
                    else
                        sourceCode += codeLines[i] + '\n';
                }		
            }
                    
            sourceCode += '&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;';
            //source fragment row
            s += ModulesRowContent(true, 'Fragment', sourceCode, id + 'source', isSource ? 'block' : 'none');
        }
        else
        {
            if (!isRestrictedMode || (isRestrictedMode &amp;&amp; isAdmin))
            {
                s += ModulesRowContent(true, 'Empty', emptySource, id + 'source', isSource ? 'block' : 'none');
            }
            
        }
    }
        
    s += '&lt;/table&gt;&lt;/div&gt;';		
    
    return s;	
}

function TransformToMSDNFormat (functionName) 
{
    if (functionName.indexOf ('.ctor') &gt; 0) {
        var regExp = new RegExp("\\.(.[^\.]+)\.\.ctor$", "gi");
        if ((result = regExp.exec (functionName)) != null) {
            functionName = functionName.replace(/\.ctor/, result[1]);
        }
    }
    
    return functionName;
}

function TreeExpander(itemId, prefix)
{
    var objSign = document.getElementById(itemId + 'sign');  
    var i = 0;
    
    if (objSign.className.indexOf('Minus') &gt; 0)
    {
        objSign.className = prefix + 'Plus';
        while (document.getElementById(itemId + '.' + i)){
            ShowHide(0, itemId + '.' + i);
            
            var objSubSign = document.getElementById(itemId + '.' + i + 'sign');
            if (objSubSign)
                if (objSubSign.className.indexOf('Minus') &gt; 0)
                    TreeExpander(itemId + '.' + i, prefix)
            i ++;
        }			
    }	
    else if (objSign.className.indexOf('Plus') &gt; 0)
    {
        objSign.className = prefix + 'Minus';
        while (document.getElementById(itemId + '.' + i)){
            ShowHide(1, itemId + '.' + i);
            i ++;
        }			
    }
}

function GlobalTreeExpander(itemId, showobj, prefix)
{
    var objSign = document.getElementById(itemId);  
   
    
    if (objSign.className.indexOf('Minus') &gt; 0)
    {
        objSign.className = prefix + 'Plus';		
        ShowHide(0, showobj);	      	
    }	
    else if (objSign.className.indexOf('Plus') &gt; 0)
    {
        objSign.className = prefix + 'Minus';
        ShowHide(1, showobj);	
    }
}


function SetTabValue(tabControlId, value){
    var i = 0;
 
    while (document.getElementById(tabControlId + i)){
        if (i == value){
            document.getElementById(tabControlId + i).className = "TabBookmarkSel";
            ShowHide(1, tabControlId + 'content' + i);
        } else {
            document.getElementById(tabControlId + i).className = "TabBookmark";
            ShowHide(0, tabControlId + 'content' + i);	    
        }    
        i ++;
    }
}


function ShowTab (id, tabNumber) {
    var obj = document.getElementById(id); 
    var row = obj.parentElement.parentElement.rows[1];
    if (typeof(row) == 'undefined' || row.style.display == 'none') {
        obj.fireEvent("onClick");
    }
    document.getElementById(id + tabNumber).fireEvent('onClick');    
    window.event.cancelBubble = true;    
}

function ShowFuncLines(val) {      
    if (val.checked)
        ShowHide(1, "funcLines");    
    else    
        ShowHide(0, "funcLines");    
}

function ShowFuncParams(val) 
{  
    ShowHide(val.checked ? 1 : 0, "funcParams");
}

function ShowLow(val)
{      
    if (val.checked) {
        ShowHide(1, "Low");
        ShowHide(0, "Dots");
    }
    else {
        ShowHide(0, "Low");
        ShowHide(1, "Dots");
    }
}

function ShowLowEx(val){      
    if (val.className.indexOf('Minus') &gt; 0)
    {
        val.className = 'TreeNodePlus';
        ChangeExceptionData('1');
        ShowHide(0, "LowEx");    
    }
    else    
    {
        val.className = 'TreeNodeMinus';
        ShowHide(1, "LowEx");    
    }
}

function ShowHide(mode, child)
{
    var objColl = document.all(child);	
        
    if(objColl == null) return;
    
    if (typeof(objColl.length) == 'undefined')
    {
        if (mode == 0)
            objColl.style.display = 'none';
        else
            objColl.style.display = '';
        
        return;
    }
    
    for (var i = 0; i &lt; objColl.length; i++)
    {
        if (mode == 0)
            objColl[i].style.display = 'none';
        else
            objColl[i].style.display = '';
            
    }
}

function ModulesExpander(obj, id, prefix){
    if (obj.className.indexOf('Minus') &gt; 0)
    {
        obj.className = 'TreeVarNodePlus';		
        ShowHide(0, id);    
    }
    else    
    {
        obj.className = 'TreeVarNodeMinus';
        ShowHide(1, id);    
    }
}

function ModulesContent(position, name, version, dateModified, path, pdbPath)
{
    var s = ModulesExpandRowContent(name + ', ' + version, position + 'module', 'Plus');
    s += ModulesRowContent(false, 'Date Modified', dateModified, position + 'module', 'none'); 
    s += ModulesRowContent(true, 'Assembly Path', path, position + 'module', 'none');  
//  CLRX events don't contain PDB path	
//	s += ModulesRowContent(true, 'Symbols Path', pdbPath, position + 'module', 'none');  
    return s;
}

function ModulesRowContent(isLast, title, value, id, style){
    var s = '&lt;tr id="' + id + '" style="Display:' + style + ';" class="Normal"&gt;';
    s += '&lt;td style="width: 32%"&gt;';
    s += '&lt;table class="TreeNodeValue" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;';
    
    if (isLast)
        s += '&lt;td class="TreeNodeLast"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
    else
        s += '&lt;td class="TreeNodeSibling"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';	
    
    s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
    s += '&lt;td&gt;' + (title == '' ? '&amp;nbsp;' : title) + '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;';
    s += '&lt;td&gt;' + (value == '' ? '&amp;nbsp;' : value) + '&lt;/td&gt;&lt;/tr&gt;';
    return s;
}

function ModulesExpandRowContent(title, id, sign){
    var s = '&lt;tr class="Normal"&gt;&lt;td style="width: 32%;"&gt;';
    s += '&lt;table class="TreeNodeValue" cellpadding="0" cellspacing="0"&gt;';
    s += '&lt;tr&gt;&lt;td class="TreeVarNode' + sign + '" onclick="ModulesExpander(this, \'' + id + '\');"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
    s += '&lt;td class="TreeNodeAssembly"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
    s += '&lt;td&gt;' + title + '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;';
    return s;
}

//2007-01-15, A.Golovkov
//script for aspects expander
function AspectsExpander(obj, id, prefix){
    if (obj.className.indexOf('Minus') &gt; 0)
    {
        obj.className = 'TreeVarNodePlus';		
        ShowHide(0, id);    
    }
    else    
    {
        obj.className = 'TreeVarNodeMinus';
        ShowHide(1, id);    
    }
}
//2007-01-15, A.Golovkov

function ChangeExceptionData(objId)
{	
    ChangeSelection(objId + 'ev' + 'exName', 'exceptionName', 'Name');
    //ChangeSelection(objId + 'ev'  + 'exValue', 'exceptionValue', 'Value');
//	ChangeException(objId, 'stackelem');
    ChangeException(objId + 'ev', 'exceptiondata');
    
    ChangeExceptionHeaderSelection (objId);
}

//  Change selection on the Exception line placed on top of the stack trace
function ChangeExceptionHeaderSelection (objId) 
{
    var counter = 1;
    var obj = document.getElementById('1sp1ex');
    while (obj != null) 
    {
        if (counter == objId) 
        {
            var row = obj.parentElement.parentElement.rows[1];
            if (typeof(row) == 'undefined' || row.style.display == 'none') {
                obj.fireEvent("onClick");
            }
            
            var index = obj.className.indexOf ("Selected");
            if (index == -1) {
                obj.className += "Selected";
            }
        } 
        else 
        {
            var index = obj.className.indexOf ("Selected");
            if (index != -1) {
                obj.className = obj.className.substr (0, index);
            }
        }
        
        counter++;
        var obj = document.getElementById('1sp' + counter + 'ex');
    }
}

function ChangeSelection(objId, tableId, style)
{
    objTable = document.all(tableId);	
    
    for (var i = 0; i &lt; objTable.length; i++)
    {
        objRow = objTable[i].rows[0];		
        objField = objRow.lastChild;			
        
        if (objRow.id == objId)					
            objField.className = "Field" + style + "Selected";		
        else
            objField.className = "Field" + style;			
    }		
    
    return objTable.innerHTML;	
}

function ChangeException(objId, curId)
{	
    arrStacks = document.all(curId);
    for (var i = 0; i &lt; arrStacks.length; i++)
    {		
        if (arrStacks[i].mainId == objId)
            arrStacks[i].style.display = 'block'
        else		
            arrStacks[i].style.display = 'none'			
    }
}

function InsertWhiteSpaces(entryId, isLast)
{	
    var s = '&lt;table cellpadding="0" cellspacing="0" class="ExceptionTreeImage"&gt;&lt;tr&gt;';
    s += '&lt;td class="' + (isLast ? 'TreeNodeLast' : 'TreeNodeMiddle') + '"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;'
    s += '&lt;/table&gt;&lt;/tr&gt;';	
    
    return s;
}

function HightLightTab(flagHightLight)
{
    var el = event.srcElement;
    while(el.tagName != "TD") el = el.parentElement;
    if(el.className != 'TabBookmarkSel')
    {
        if(flagHightLight)
            el.className = 'TabBookmarkActive';
        else
            el.className = 'TabBookmark';
    }
}

function FuncImage(isHi){
    return '&lt;td class="TreeNodeImage"&gt;&lt;li class="TreeNodeTypeFun' + (isHi ? 'Hi' : '') + '"&gt;&lt;/li&gt;&lt;/td&gt;';
}

function OpenContentForHigh(){
    var obj = document.getElementById('High');
    if (obj != null)
        obj.firstChild.onclick();
}


//functions for opening exception source via Intercept Plugin
var defaultPath = 'www.avicode.com';

function OpenSource(sourceName, fileName, lineNumber){	
    try
    {
        var objDteManager = new ActiveXObject("InterceptVSPlugin.Automation.1")
    
        bRes = objDteManager.OpenSource(sourceName, fileName, lineNumber);		
        if(!bRes)
            alert("Application Diagnostics and Visual Studio integration is not properly configured on the system.");	
    }
    catch(e){
        Install();
    }
}	

function Install(){
    
    //AGolovkov
    //detecting if the client system is 32 or 64-bit
    var sysPluginPath = pluginPath;
    if(navigator.appVersion.toUpperCase().indexOf("WOW64") &gt; -1)
        sysPluginPath = plugin64Path;
    
    var displayPath = defaultPath;
    
    if (sysPluginPath != defaultPath)
        displayPath = "Application Diagnostics computer";
        
    if (window.confirm("SCOM Visual Studio Plug-In is not installed. Do you want to install it?"))	
    {
        if (sysPluginPath == defaultPath)
            window.open("http://www.avicode.com/intercept/InterceptV2VSPluginDownload.asp");
        else
            window.open(sysPluginPath);
    }
}

function GetProfessionalLicenseLimitationMessage(unavailableInformation)
{
    var message = professionalLicenseLimitationTemplate.replace("#UnavailableInformation", unavailableInformation);
    message = "&lt;div class=\"handlerLicenseMessage\"&gt;" + message + "&lt;/div&gt;";
    return message;
}
            
          </xsl:comment>
        </xsl:element>
      </xsl:template>
      <xsl:template name="AVIMOMCLRXViewerLink">
        <xsl:if test="count(../ViewDetail) &gt; 0">
          <xsl:element name="a">
            <xsl:attribute name="href">
              <xsl:value-of select="../ViewDetail" />
            </xsl:attribute>
            <xsl:text>Click here</xsl:text>
          </xsl:element>
          <xsl:text> for additional Event details.</xsl:text>
        </xsl:if>
      </xsl:template>
      <xsl:template name="AVIMOMCLRXLicenseWizard">
        <xsl:if test="count(licenseWizard) &gt; 0">
          <xsl:value-of select="licenseWizard/licenseWizardText" />
          <xsl:element name="br" />
          <xsl:element name="br" />
          <xsl:text>Please </xsl:text>
          <xsl:element name="a">
            <xsl:attribute name="href">
              <xsl:value-of select="licenseWizard/licenseWizardUrl" />
            </xsl:attribute>
            <xsl:text>click here</xsl:text>
          </xsl:element>
          <xsl:text> to open license management wizard.</xsl:text>
        </xsl:if>
      </xsl:template>
      <!-- end of templates for AVIMOMCLRXMonitorLog -->


      <!-- templates for AVIMOMCSMPMonitorLog -->
      <xsl:template match="EventData" mode="AVIMOMCSMPMonitorLog">
        <xsl:if test="count(notLicense) = 0">
          <xsl:for-each select="*[local-name()='log']">
            <xsl:call-template name="AVIMOMCSMPMain" />
          </xsl:for-each>
        </xsl:if>
        <xsl:call-template name="AVIMOMCSMPLicenseWizard" />
      </xsl:template>
      <xsl:template match="EventData/*[local-name()='log']/Enterprise" mode="AVIMOMCSMPMonitorLog">
        <xsl:if test="count(notLicense) = 0">
          <xsl:for-each select="*[local-name()='log']">
            <xsl:call-template name="AVIMOMCSMPMain" />
          </xsl:for-each>
        </xsl:if>
        <xsl:call-template name="AVIMOMCSMPLicenseWizard" />
      </xsl:template>
      <xsl:template name="AVIMOMCSMPMain">
        <xsl:value-of select="outputScript" disable-output-escaping="yes" />
        <xsl:call-template name="AVIMOMCSMPViewerLink" />
        <xsl:call-template name="AVIMOMCSMPPageInfo" />
        <xsl:call-template name="AVIMOMCSMPPerformanceMetrics" />
        <xsl:call-template name="AVIMOMCSMPHeaviestResources" />
        <xsl:call-template name="AVIMOMCSMPAjaxesInformation" />
        <xsl:call-template name="AVIMOMCSMPContentInformation" />
        <xsl:call-template name="AVIMOMCSMPBrowserCapabilities" />
        <xsl:call-template name="AVIMOMCSMPEndUserInformation" />
        <xsl:call-template name="AVIMOMCSMPCollectionNotes" />
      </xsl:template>
      <xsl:template name="AVIMOMCSMPViewerLink">
        <xsl:if test="count(../ViewDetail) &gt; 0">
          <xsl:element name="a">
            <xsl:attribute name="href">
              <xsl:value-of select="../ViewDetail" />
            </xsl:attribute>
            <xsl:text>Click here</xsl:text>
          </xsl:element>
          <xsl:text> for additional Event details.</xsl:text>
        </xsl:if>
      </xsl:template>
      <xsl:template name="AVIMOMCSMPPageInfo">
        <script type="text/javascript">
          <xsl:text>
            
        var pageInfoBuilded = false;
        
        function BuildPageInfo()
        {
            GlobalTreeExpander('pageInfo','pageInfoContent','TreeNode');
            if(!pageInfoBuilded)
            {
                var oPageInfo = document.getElementById('pageInfoContent');
                var params = new Array();
                params[0] = ['queryString', '</xsl:text>
          <xsl:value-of select="eventInformation/pageQueryString" />
          <xsl:text>'];
                params[1] = ['sessionID', '</xsl:text>
          <xsl:value-of select="eventCorrelationInfo/sessionId" />
          <xsl:text>'];
                params[2] = ['urlReferrer', '</xsl:text>
          <xsl:value-of select="eventCorrelationInfo/refererUrl" />
          <xsl:text>'];
                params[3] = ['status', '</xsl:text>
          <xsl:value-of select="rsStatus" />
          <xsl:text>'];
                params[4] = ['content-type', '</xsl:text>
          <xsl:value-of select="rsContentType" />
          <xsl:text>'];
        </xsl:text>
          <!-- Insert additional parameters if request was to MVC .Net Application-->
          <xsl:variable name="smallcase" select="'abcdefghijklmnopqrstuvwxyz'" />
          <xsl:variable name="uppercase" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'" />
          <xsl:variable name="isMvcRequest" select="properties/property[name = 'IsMvcRequest']/value" />
          <xsl:if test="translate($isMvcRequest, $smallcase, $uppercase) = 'TRUE'">
            <xsl:text>
                    params[5] = ['MVC Controller', '</xsl:text>
            <xsl:value-of select="properties/property[name = 'mvc_Controller']/value" />
            <xsl:text>'];
                    params[6] = ['MVC Action', '</xsl:text>
            <xsl:value-of select="properties/property[name = 'mvc_Action']/value" />
            <xsl:text>'];
				</xsl:text>
          </xsl:if>
          <!-- END -->

          <xsl:text>
                oPageInfo.innerHTML = buildPageInfo(params);
                pageInfoBuilded = true;
            }
        }
        
        var _csm_PageIntervals = {
            dom: -1,
            peripheral: -1
        };
                    
        var _csm_PageUrl = '</xsl:text>
          <xsl:value-of select="eventInformation/pageUrl" />
          <xsl:text>';</xsl:text>

          <xsl:if test="metrics/domLoadingDuration != -1">
            <xsl:text>_csm_PageIntervals.dom = </xsl:text>
            <xsl:value-of select="metrics/domLoadingDuration" />
            <xsl:text> ;</xsl:text>
          </xsl:if>

          <xsl:if test="metrics/afterDomLoadingDuration != -1">
            <xsl:text>_csm_PageIntervals.peripheral = </xsl:text>
            <xsl:value-of select="metrics/afterDomLoadingDuration" />
            <xsl:text> ;</xsl:text>
          </xsl:if>

        </script>
        <div class="PageInfoContainer">
          <table cellspacing="0" cellpadding="0" class="PageInfoHeader">
            <tr>
              <td id="pageInfo" class="TreeNodePlus" onclick="BuildPageInfo();">
                <div class="PageUrl">
                  <span class="PageUrlLabel">Page Url: </span>
                  <span class="PageUrlName">
                    <xsl:attribute name="title">
                      <xsl:value-of select="eventInformation/pageUrl" />
                    </xsl:attribute>
                    <xsl:value-of select="eventInformation/pageUrl" />
                  </span>
                </div>
              </td>
              <xsl:if test="count(clientLink) &gt; 0">
                <xsl:element name="td">
                  <xsl:attribute name="title">Chain info</xsl:attribute>
                  <xsl:attribute name="onclick">
                    <xsl:value-of select="clientLink" />
                  </xsl:attribute>
                  <xsl:attribute name="class">TreeNodePChainIn</xsl:attribute>
                  <xsl:element name="img">
                    <xsl:attribute name="src">
                      <xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.empty')" />
                    </xsl:attribute>
                    <xsl:attribute name="width">20</xsl:attribute>
                    <xsl:attribute name="height">15</xsl:attribute>
                  </xsl:element>
                </xsl:element>
              </xsl:if>
            </tr>
          </table>
          <div id="pageInfoContent" class="PageInfoContent" style="display:none;">
            <li />
          </div>
        </div>
      </xsl:template>
      <xsl:template name="AVIMOMCSMPPerformanceMetrics">
        <table cellpadding="0" cellspacing="0" class="Header">
          <tr>
            <td class="HeaderTitle" onclick="GlobalTreeExpander('performanceMetrics','performanceMetricsContent','TreeNode');">Performance Metrics</td>
            <td id="performanceMetrics" onclick="GlobalTreeExpander('performanceMetrics','performanceMetricsContent','TreeNode');">
              <xsl:attribute name="class">TreeNodeMinus</xsl:attribute>
              <li />
            </td>
          </tr>
        </table>
        <div id="performanceMetricsContent">
          <table border="0" cellpadding="0" cellspacing="0" width="700">
            <tr>
              <td class="ChartTitleLeft">
                <span class="ChartHeader">Page Load Time</span>
                <br />
                <span class="ChartSummary">
                  <xsl:text>Total Time: </xsl:text>
                  <xsl:value-of select="metrics/totalSize" />
                  <xsl:text> ms</xsl:text>
                </span>
              </td>
              <td class="ChartTitleRigth">
                <span class="ChartHeader">Page Content Size</span>
                <br />
                <span class="ChartSummary">
                  <xsl:text>Total Size: </xsl:text>
                  <xsl:value-of select="contentInformation/totalSize" />
                  <xsl:text> KB</xsl:text>
                </span>
                <div>
                  <span class="ChartSummary">
                    <xsl:text>Network Latency: </xsl:text>
                    <xsl:choose>
                      <xsl:when test="latencyString != 'n/a'">
                        <xsl:value-of select="latencyString" />
                        <xsl:text> ms</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="latencyString" />
                      </xsl:otherwise>
                    </xsl:choose>
                  </span>
                </div>
                <div>
                  <span class="ChartSummary">
                    <xsl:text>Channel Quality: </xsl:text>
                    <xsl:value-of select="qualityOfChannel" />
                  </span>
                </div>
              </td>
            </tr>
            <tr>
              <td valign="top" width="400px" height="300px">
                <xsl:value-of select="metrics/chartImage" disable-output-escaping="yes" />
              </td>
              <td valign="top" width="300px" height="300px" style="padding-top:55px">
                <xsl:value-of select="contentInformation/chartImage" disable-output-escaping="yes" />
              </td>
            </tr>
          </table>
        </div>
      </xsl:template>
      <xsl:template name="AVIMOMCSMPHeaviestResources">
        <xsl:if test="//heaviestResources">

          <table cellpadding="0" cellspacing="0" class="Header">
            <tr>
              <td class="HeaderTitle" onclick="GlobalTreeExpander('heaviestResources','heaviestResourcesContent','TreeNode');">
                <span class="HeaviestResourcesTitle">Heaviest Resources</span>
              </td>
              <td id="heaviestResources" onclick="GlobalTreeExpander('heaviestResources','heaviestResourcesContent','TreeNode');">
                <xsl:attribute name="class">TreeNodeMinus</xsl:attribute>
                <li />
              </td>
            </tr>
          </table>
          <div id="heaviestResourcesContent" style="text-align: left;">
            <table cellpadding="0" cellspacing="0" class="HeaviestResourcesTable">
              <xsl:for-each select="//heaviestResources/heaviestResource">
                <tr>
                  <td class="HeaviestResourceValue">
                    <xsl:value-of select="@value" />
                    <xsl:text> ms</xsl:text>
                  </td>
                  <td class="HeaviestResourceName">
                    <xsl:choose>
                      <xsl:when test="@eventLink and (@eventLink != '')">
                        <xsl:element name="a">
                          <xsl:attribute name="href">
                            <xsl:text>javascript:void(null)</xsl:text>
                          </xsl:attribute>
                          <xsl:attribute name="onclick">
                            <xsl:value-of select="@eventLink" />
                          </xsl:attribute>
                          <xsl:value-of select="substring(@name, 1, 100)" />
                        </xsl:element>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:choose>
                          <xsl:when test="@metric='Server Response Time' and //clientLink!=''">
                            <xsl:element name="a">
                              <xsl:attribute name="href">
                                <xsl:text>javascript:void(null)</xsl:text>
                              </xsl:attribute>
                              <xsl:attribute name="onclick">
                                <xsl:value-of select="//clientLink" />
                              </xsl:attribute>
                              <xsl:value-of select="substring(@name, 1, 100)" />
                            </xsl:element>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="substring(@name, 1, 100)" />
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:otherwise>
                    </xsl:choose>
                  </td>
                </tr>
              </xsl:for-each>
            </table>
          </div>

        </xsl:if>
      </xsl:template>

      <xsl:template name="AVIMOMCSMPCallParams">
        <xsl:param name="showRequestUrl" />

        <xsl:variable name="smallcase" select="'abcdefghijklmnopqrstuvwxyz'" />
        <xsl:variable name="uppercase" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'" />

        <xsl:variable name="abortedMessage">
          <b>Ajax call was aborted</b>
        </xsl:variable>
        <xsl:variable name="isNetworkRequestAborted" select="count(times/networkRequest[@isAborted='true' or @isAborted='True'])" />
        <xsl:variable name="isServerProcessingAborted" select="count(times/serverProcessing[@isAborted='true' or @isAborted='True'])" />
        <xsl:variable name="isResponseReceivingAborted" select="count(times/responseReceiving[@isAborted='true' or @isAborted='True'])" />
        <xsl:variable name="isInternalExecutionAborted" select="count(times/internalExecution[@isAborted='true' or @isAborted='True'])" />
        <xsl:variable name="showNetworkRequest" select="(times/networkRequest &gt; -1) or ($isNetworkRequestAborted &gt; 0)" />
        <xsl:variable name="showServerProcessing" select="(times/serverProcessing &gt; -1) or ($isServerProcessingAborted &gt; 0)" />
        <xsl:variable name="showNetworkResponse" select="(times/responseReceiving &gt; -1) or ($isResponseReceivingAborted &gt; 0)" />
        <xsl:text>[</xsl:text>

        <!--<xsl:if test="(times/networkRequest > -1) or ($isNetworkRequestAborted > 0)">-->
        <xsl:if test="$showNetworkRequest = 'true'">
          <xsl:text>['Network Request </xsl:text>
          <xsl:if test="times/networkRequest &gt; -1 and translate(@isCompleted, $smallcase, $uppercase) = 'TRUE'">
            <xsl:text>(</xsl:text>
            <xsl:value-of select="times/networkRequestString" />
            <xsl:text> ms)</xsl:text>
          </xsl:if>

          <xsl:text>', '</xsl:text>
          <xsl:choose>
            <xsl:when test="$isNetworkRequestAborted &gt; 0">
              <xsl:copy-of select="$abortedMessage" />
            </xsl:when>
            <xsl:otherwise>
              <xsl:if test="@isCached and @isCached='true'">
                <xsl:text>Cache detection</xsl:text>
              </xsl:if>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:text>', '', [</xsl:text>
          <xsl:if test="$showRequestUrl = 'true'">
            <xsl:text>['Requested URL', '</xsl:text>
            <xsl:value-of select="requestedUrl" />
            <xsl:text>', ''], </xsl:text>
          </xsl:if>

          <!-- Request Method: -->
          <xsl:text>['Request Method', '</xsl:text>
          <xsl:value-of select="requestMethod" />
          <xsl:text>', '']</xsl:text>

          <!-- Request Length: -->
          <xsl:text>, ['Request Length', '</xsl:text>
          <xsl:choose>
            <xsl:when test="requestLength and (requestLength != '')">
              <xsl:value-of select="requestLengthString" />
              <xsl:text> bytes</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <i>
                <xsl:text>n/a</xsl:text>
              </i>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:text>', 'Length of Sent Request Data</xsl:text>
          <xsl:choose>
            <xsl:when test="requestMethod = 'POST'">
              <xsl:text> (including Post Data and Request Headers)']</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <xsl:text>']</xsl:text>
            </xsl:otherwise>
          </xsl:choose>

          <!-- Request Text (Post Data): -->
          <xsl:text>,['Post Data', </xsl:text>
          <xsl:choose>
            <xsl:when test="requestText and (requestText != '')">
              <xsl:text>StrDecoder('</xsl:text>
              <xsl:value-of select="requestText" />
              <xsl:text>'), 'Post Data</xsl:text>
              <xsl:choose>
                <xsl:when test="translate(isRequestTrunc, $smallcase, $uppercase) = 'TRUE'">
                  <xsl:text> (truncated)']</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:text>']</xsl:text>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:text>'</xsl:text>
              <i>
                <xsl:text>n/a</xsl:text>
              </i>
              <xsl:text>', 'n/a']</xsl:text>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:text>]]</xsl:text>
        </xsl:if>

        <xsl:if test="$isNetworkRequestAborted = 0">
          <xsl:if test="$showServerProcessing = 'true'">
            <xsl:if test="$showNetworkRequest = 'true'">
              <xsl:text>,</xsl:text>
            </xsl:if>

            <xsl:text>['Server Response Time </xsl:text>
            <xsl:if test="times/serverProcessing &gt; -1 and translate(@isCompleted, $smallcase, $uppercase) = 'TRUE'">
              <xsl:text>(</xsl:text>
              <xsl:value-of select="times/serverProcessingString" />
              <xsl:text> ms)</xsl:text>
            </xsl:if>
            <!-- /xsl:element -->
            <xsl:text>','</xsl:text>
            <xsl:if test="$isServerProcessingAborted &gt; 0">
              <xsl:copy-of select="$abortedMessage" />
            </xsl:if>
            <xsl:text>', '']</xsl:text>
          </xsl:if>

          <xsl:if test="$isServerProcessingAborted = 0">

            <xsl:if test="$showNetworkResponse = 'true'">

              <xsl:if test="($showNetworkRequest = 'true') or ($showServerProcessing = 'true')">
                <xsl:text>,</xsl:text>
              </xsl:if>

              <!-- xsl:element name="b" -->
              <xsl:text>['Network Response </xsl:text>
              <xsl:if test="times/responseReceiving &gt; -1 and translate(@isCompleted, $smallcase, $uppercase) = 'TRUE'">
                <xsl:text>(</xsl:text>
                <xsl:choose>
                  <xsl:when test="times/responseReceiving &gt; 0">
                    <xsl:value-of select="times/responseReceivingString" />
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text>&amp;lt; 0.5</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:text> ms)</xsl:text>
              </xsl:if>
              <!-- /xsl:element -->
              <xsl:text>', '</xsl:text>
              <xsl:choose>
                <xsl:when test="$isResponseReceivingAborted &gt; 0">
                  <xsl:copy-of select="$abortedMessage" />
                </xsl:when>
                <xsl:otherwise>
                  <xsl:if test="@isCached and @isCached='true'">
                    <xsl:text>Read from cache</xsl:text>
                  </xsl:if>
                </xsl:otherwise>
              </xsl:choose>
              <xsl:text>', '', [</xsl:text>

              <!-- Result Code: -->
              <xsl:text>['Result Code', '</xsl:text>
              <xsl:choose>
                <xsl:when test="resultCode and (resultCode != '')">
                  <xsl:value-of select="resultCode" />
                  <xsl:text>', '']</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <i>
                    <xsl:text>n/a</xsl:text>
                  </i>
                  <xsl:text>', '']</xsl:text>
                </xsl:otherwise>
              </xsl:choose>

              <!-- Content Type: -->
              <xsl:text>, ['Content Type', '</xsl:text>
              <xsl:choose>
                <xsl:when test="responseContentType and (responseContentType != '')">
                  <xsl:value-of select="responseContentType" />
                  <xsl:text>', '']</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <i>
                    <xsl:text>n/a</xsl:text>
                  </i>
                  <xsl:text>', '']</xsl:text>
                </xsl:otherwise>
              </xsl:choose>

              <!-- Compressed: -->
              <xsl:text>, ['Compressed', '</xsl:text>
              <xsl:choose>
                <xsl:when test="responseContentEncoding and (responseContentEncoding != '')">
                  <xsl:text>Yes (</xsl:text>
                  <xsl:value-of select="responseContentEncoding" />
                  <xsl:text>)', '']</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:choose>
                    <xsl:when test="responseContentType and (responseContentType != '')">
                      <xsl:text>No', '']</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                      <i>
                        <xsl:text>n/a</xsl:text>
                      </i>
                      <xsl:text>', '']</xsl:text>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>

              <!-- Response Length: -->
              <xsl:text>, ['Response Length', '</xsl:text>
              <xsl:choose>
                <xsl:when test="responseLengthString and (responseLengthString != '') and (responseLengthString != '-1')">
                  <xsl:value-of select="responseLengthString" />
                  <xsl:text> bytes', 'Length of Received Response (including Response Text and Response Headers)']</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <i>
                    <xsl:text>n/a</xsl:text>
                  </i>
                  <xsl:text>', '']</xsl:text>
                </xsl:otherwise>
              </xsl:choose>

              <!-- Response Text: -->
              <xsl:text>, ['Response Text', </xsl:text>
              <xsl:choose>
                <xsl:when test="responseText and (responseText != '')">
                  <xsl:text>StrDecoder('</xsl:text>
                  <xsl:value-of select="responseText" />
                  <xsl:text>'), 'Response Text</xsl:text>
                  <xsl:choose>
                    <xsl:when test="translate(isResponseTrunc, $smallcase, $uppercase) = 'TRUE'">
                      <xsl:text> (truncated)']</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:text>']</xsl:text>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:text>'</xsl:text>
                  <i>
                    <xsl:text>n/a</xsl:text>
                  </i>
                  <xsl:text>', '']</xsl:text>
                </xsl:otherwise>
              </xsl:choose>

              <xsl:text>]]</xsl:text>
            </xsl:if>

          </xsl:if>
          <!-- End of isServerProcessingAborted = 0-->

        </xsl:if>
        <!-- End of isNetworkRequestAborted = 0-->

        <xsl:if test="isAsync = 'true'">
          <xsl:if test="((times/internalExecution &gt; -1) or ($isInternalExecutionAborted &gt; 0)) and $isResponseReceivingAborted = 0">
            <xsl:if test="($showNetworkRequest = 'true') or ($showServerProcessing = 'true') or ($showNetworkResponse = 'true')">
              <xsl:text>,</xsl:text>
            </xsl:if>

            <xsl:text>['Internal Execution </xsl:text>
            <xsl:if test="times/internalExecution &gt; -1 and translate(@isCompleted, $smallcase, $uppercase) = 'TRUE'">
              <xsl:text>(</xsl:text>
              <xsl:value-of select="times/internalExecutionString" />
              <xsl:text> ms)</xsl:text>
            </xsl:if>
            <!-- /xsl:element -->
            <xsl:text>', '</xsl:text>
            <xsl:if test="$isInternalExecutionAborted &gt; 0">
              <xsl:copy-of select="$abortedMessage" />
            </xsl:if>
            <xsl:text>', ''</xsl:text>

            <!-- Java Script: -->
            <xsl:text>, [['JavaScript', </xsl:text>
            <xsl:choose>
              <xsl:when test="scriptSubscription and (scriptSubscription != '')">
                <xsl:text>StrDecoder('</xsl:text>
                <xsl:value-of select="scriptSubscription" />
                <xsl:text>'), 'Script Code, Subscribed on ONREADYSTATECHANGE Event of AJAX Object']]</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text>'</xsl:text>
                <i>
                  <xsl:text>n/a</xsl:text>
                </i>
                <xsl:text>', '']]</xsl:text>
              </xsl:otherwise>
            </xsl:choose>

            <xsl:text>]</xsl:text>
          </xsl:if>

        </xsl:if>

        <xsl:text>]</xsl:text>

      </xsl:template>
      <xsl:template name="AVIMOMCSMPCallInfoScript">
        <xsl:variable name="smallcase" select="'abcdefghijklmnopqrstuvwxyz'" />
        <xsl:variable name="uppercase" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'" />
        <xsl:variable name="incompleteMessage">This call did not finish before page was fully loaded.</xsl:variable>
        <script type="text/javascript">
          function BuildAjaxesInformation()
          {
          var oSyncCalls = document.getElementById("syncCallsTitle");
          var oAsyncCalls = document.getElementById("asyncCallsTitle");
          if(oSyncCalls)
          {
          oSyncCalls.fireEvent("onclick");
          }
          if(oAsyncCalls)
          {
          oAsyncCalls.fireEvent("onclick");
          }
          }

          var syncCallsBuilded = false;
          var asyncCallsBuilded = false;
          function BuildAsyncCalls()
          {
          if (!asyncCallsBuilded)
          {
          asyncCallsBuilded = true;
          <xsl:text>BuilSectionList('asyncCallsContent', [</xsl:text>

          <xsl:for-each select="pageLoadingScopeInfo/ajaxCalls/ajaxCall[isAsync = 'true']">
            <xsl:if test="position() &gt; 1">
              <xsl:text>, </xsl:text>
            </xsl:if>
            <xsl:text>['</xsl:text>
            <xsl:choose>
              <xsl:when test="translate(@isCompleted, $smallcase, $uppercase) = 'TRUE'">
                <xsl:value-of select="requestedUrl" />
                <xsl:text>', "</xsl:text>
                <xsl:if test="clientLink and clientLink != ''">
                  <xsl:value-of select="clientLink" />
                </xsl:if>
                <xsl:text>", '</xsl:text>
                <xsl:value-of select="times/totalSizeString" />
                <xsl:text> ms', "</xsl:text>
                <xsl:call-template name="AVIMOMCSMPCallParams" />
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="requestedUrl" />
                <xsl:text>', "</xsl:text>
                <xsl:if test="clientLink and clientLink != ''">
                  <xsl:value-of select="clientLink" />
                </xsl:if>
                <xsl:text>", '</xsl:text>
                <span style="color: SlateGray">
                  <xsl:attribute name="title">
                    <xsl:value-of select="$incompleteMessage" />
                  </xsl:attribute>
                  <xsl:text>≥</xsl:text>
                  <xsl:value-of select="elapsedTime" />
                  <xsl:text> ms*</xsl:text>
                </span>
                <xsl:text> ', "</xsl:text>
                <xsl:call-template name="AVIMOMCSMPCallParams" />
              </xsl:otherwise>
            </xsl:choose>
            <xsl:text>"]</xsl:text>
          </xsl:for-each>

          <xsl:text>]);</xsl:text>
          }
          }

          function BuildSyncCalls()
          {
          if (!syncCallsBuilded)
          {
          syncCallsBuilded = true;
          <xsl:text>BuilSectionList('syncCallsContent', [</xsl:text>

          <xsl:for-each select="pageLoadingScopeInfo/ajaxCalls/ajaxCall[isAsync = 'false']">
            <xsl:if test="position() &gt; 1">
              <xsl:text>, </xsl:text>
            </xsl:if>
            <xsl:text>['</xsl:text>
            <xsl:value-of select="requestedUrl" />
            <xsl:text>', "</xsl:text>
            <xsl:if test="clientLink and clientLink != ''">
              <xsl:value-of select="clientLink" />
            </xsl:if>
            <xsl:text>", '</xsl:text>
            <xsl:value-of select="times/totalSizeString" />
            <xsl:text> ms (</xsl:text>
            <xsl:value-of select="times/totalSize/@percent" />
            <xsl:text>%)', "</xsl:text>
            <xsl:call-template name="AVIMOMCSMPCallParams" />
            <xsl:text>"]</xsl:text>
          </xsl:for-each>

          <xsl:if test="pageLoadingScopeInfo/lowPriorityCallsSummary/count &gt; 0">
            <xsl:if test="count(pageLoadingScopeInfo/ajaxCalls/ajaxCall[isAsync = 'false']) &gt; 0">
              <xsl:text>, </xsl:text>
            </xsl:if>
            <xsl:text>['Other Calls (</xsl:text>
            <xsl:value-of select="pageLoadingScopeInfo/lowPriorityCallsSummary/count" />
            <xsl:choose>
              <xsl:when test="pageLoadingScopeInfo/lowPriorityCallsSummary/count = 1">
                <xsl:text> call</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text> calls</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
            <xsl:text>)', '', '</xsl:text>
            <xsl:value-of select="pageLoadingScopeInfo/lowPriorityCallsSummary/times/totalSizeString" />
            <xsl:text> ms (</xsl:text>
            <xsl:value-of select="pageLoadingScopeInfo/lowPriorityCallsSummary/times/totalSize/@percent" />
            <xsl:text>%)', "[</xsl:text>

            <xsl:text>['</xsl:text>
            <!-- xsl:element name="b" -->
            <xsl:text>Network Request (</xsl:text>
            <xsl:value-of select="pageLoadingScopeInfo/lowPriorityCallsSummary/times/networkRequestString" />
            <xsl:text> ms)</xsl:text>
            <!-- /xsl:element -->
            <xsl:text>', '', '', [</xsl:text>
            <xsl:text>['Summary Request Length', '</xsl:text>
            <xsl:value-of select="pageLoadingScopeInfo/lowPriorityCallsSummary/requestLengthString" />
            <xsl:text> bytes','']]]</xsl:text>
            <xsl:text>, ['</xsl:text>
            <!-- xsl:element name="b" -->
            <xsl:text>Server Response Time (</xsl:text>
            <xsl:value-of select="pageLoadingScopeInfo/lowPriorityCallsSummary/times/serverProcessingString" />
            <xsl:text> ms)</xsl:text>
            <!-- /xsl:element -->
            <xsl:text>', '','']</xsl:text>
            <xsl:text>, ['</xsl:text>
            <!-- xsl:element name="b" -->
            <xsl:text>Network Response (</xsl:text>
            <xsl:value-of select="pageLoadingScopeInfo/lowPriorityCallsSummary/times/responseReceivingString" />
            <xsl:text> ms)</xsl:text>
            <!-- /xsl:element -->
            <xsl:text>', '', '', [</xsl:text>
            <xsl:text>['Summary Response Length', '</xsl:text>
            <xsl:value-of select="pageLoadingScopeInfo/lowPriorityCallsSummary/responseLengthString" />
            <xsl:text> bytes','']]]</xsl:text>
            <xsl:text>, ['</xsl:text>
            <!-- xsl:element name="b" -->
            <xsl:text>Internal Execution (</xsl:text>
            <xsl:value-of select="pageLoadingScopeInfo/lowPriorityCallsSummary/times/internalExecutionString" />
            <xsl:text> ms)</xsl:text>
            <!-- /xsl:element -->
            <xsl:text>', '','']</xsl:text>
            <xsl:text>]"]</xsl:text>
          </xsl:if>

          <xsl:text>]);</xsl:text>
          }
          }
        </script>
      </xsl:template>
      <xsl:template name="AVIMOMCSMPAjaxesInformation">
        <xsl:variable name="syncAjaxesCount">
          <xsl:value-of select="count(pageLoadingScopeInfo/ajaxCalls/ajaxCall[isAsync = 'false'])+pageLoadingScopeInfo/lowPriorityCallsSummary/count" />
        </xsl:variable>
        <xsl:variable name="asyncAjaxesCount">
          <xsl:value-of select="count(pageLoadingScopeInfo/ajaxCalls/ajaxCall[isAsync = 'true'])" />
        </xsl:variable>
        <xsl:call-template name="AVIMOMCSMPScriptSubscription" />
        <table cellpadding="0" cellspacing="0" class="Header">
          <tr>
            <td class="HeaderTitle" onclick="GlobalTreeExpander('scriptSubscription','scriptSubscriptionContent','TreeNode'); BuildScriptSubscription();">
              JavaScript
            </td>
            <td id="scriptSubscription" onclick="GlobalTreeExpander('scriptSubscription','scriptSubscriptionContent','TreeNode'); BuildScriptSubscription();">
              <xsl:attribute name="class">TreeNodePlus</xsl:attribute>
              <li />
            </td>
          </tr>
        </table>
        <div id="scriptSubscriptionContent" style="display: none">
          <li />
        </div>
        <!-- JavaScript function that provide dynamic building of the content information -->
        <xsl:call-template name="AVIMOMCSMPCallInfoScript" />
        <table cellpadding="0" cellspacing="0" class="Header">
          <tr>
            <td class="HeaderTitle" onclick="GlobalTreeExpander('ajaxesInformation','ajaxesInformationContent','TreeNode'); BuildAjaxesInformation();">AJAX Calls Information</td>
            <td id="ajaxesInformation" onclick="GlobalTreeExpander('ajaxesInformation','ajaxesInformationContent','TreeNode'); BuildAjaxesInformation();">
              <xsl:attribute name="class">TreeNodePlus</xsl:attribute>
              <li />
            </td>
          </tr>
        </table>
        <table cellpadding="0" cellspacing="0" border="0" width="100%" id="ajaxesInformationContent" style="display: none">
          <tr>
            <td id="ajaxesInformationTables">
              <div id="asyncCalls" class="CallSection">
                <xsl:choose>
                  <xsl:when test="$asyncAjaxesCount = 0">
                    <div id="asyncCallsTitle" class="CallSectionTitleEmpty">
                      <xsl:text>Asynchronous AJAX Calls (0 calls)</xsl:text>
                    </div>
                  </xsl:when>
                  <xsl:otherwise>
                    <div id="asyncCallsTitle" class="CallSectionTitlePlus" onclick="ExpandSection(this); BuildAsyncCalls();">
                      <xsl:text>Asynchronous AJAX Calls (</xsl:text>
                      <xsl:value-of select="$asyncAjaxesCount" />
                      <xsl:choose>
                        <xsl:when test="$asyncAjaxesCount = 1">
                          <xsl:text> call)</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:text> calls)</xsl:text>
                        </xsl:otherwise>
                      </xsl:choose>
                    </div>
                  </xsl:otherwise>
                </xsl:choose>
                <div id="asyncCallsContent" class="CallSectionContent" style="display: none;">
                  <li />
                </div>
              </div>
              <div id="syncCalls" class="CallSection">
                <xsl:choose>
                  <xsl:when test="$syncAjaxesCount = 0">
                    <div id="syncCallsTitle" class="CallSectionTitleEmpty">
                      <xsl:text>Synchronous AJAX Calls (0 calls)</xsl:text>
                    </div>
                  </xsl:when>
                  <xsl:otherwise>
                    <div id="syncCallsTitle" class="CallSectionTitlePlus" onclick="ExpandSection(this); BuildSyncCalls();">
                      <xsl:text>Synchronous AJAX Calls (</xsl:text>
                      <xsl:value-of select="$syncAjaxesCount" />
                      <xsl:choose>
                        <xsl:when test="$syncAjaxesCount = 1">
                          <xsl:text> call, </xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:text> calls, </xsl:text>
                        </xsl:otherwise>
                      </xsl:choose>
                      <xsl:value-of select="pageLoadingScopeInfo/times/totalWOExecutionString" />
                      <xsl:text> ms</xsl:text>
                      <xsl:text>)</xsl:text>
                    </div>
                  </xsl:otherwise>
                </xsl:choose>
                <div id="syncCallsContent" class="CallSectionContent" style="display: none;">
                  <li />
                </div>
              </div>
            </td>
            <td style="padding: 5px;" valign="top">
            </td>
          </tr>
        </table>
      </xsl:template>
      <xsl:template name="AVIMOMCSMPContentInformation">
        <!-- JavaScript function that provide dynamic building of the content information -->
        <script type="text/javascript">
          var contentInformationBuilded = false;
          function BuildContentInformation()
          {
          if (!contentInformationBuilded)
          {
          contentInformationBuilded = true;

          <!-- Page Parameters -->
          <xsl:text>ContentCreator('contentInformationTables', 0, 'PageParameters', </xsl:text>
          <xsl:value-of select="contentInformation/html" />
          <xsl:text>, '', [], [], [], [], [], [], [</xsl:text>
          <xsl:text>['Html', </xsl:text>
          <xsl:value-of select="contentInformation/html" />
          <xsl:text>]</xsl:text>
          <xsl:text>, ['Viewstate', </xsl:text>
          <xsl:value-of select="contentInformation/viewstate" />
          <xsl:text>]</xsl:text>
          <xsl:text>]);</xsl:text>

          <xsl:if test="not((//serverProcessingDuration[@isAborted = 'True']) or (//networkDuration[@isAborted = 'True']) or (//domLoadingDuration[@isAborted = 'True']))">
            <!-- Images table -->
            <xsl:text>ContentCreator('contentInformationTables', 0, 'Images', </xsl:text>
            <xsl:value-of select="contentInformation/imagesTotalSize" />
            <xsl:text>, </xsl:text>
            <xsl:value-of select="contentInformation/imagesTotalCount" />
            <xsl:text>, </xsl:text>
            <xsl:text> [</xsl:text>
            <xsl:for-each select="contentInformation/images/image">
              <xsl:call-template name="AVIMOMCSMPBuildSrcSizeArray" />
            </xsl:for-each>
            <xsl:text>], </xsl:text>
            <xsl:text>[], [], [], [], [], null, []</xsl:text>
            <xsl:text>, </xsl:text>
            <xsl:value-of select="contentInformation/imagesBeforeDomCount" />
            <xsl:text>, </xsl:text>
            <xsl:value-of select="contentInformation/imagesBeforeDomSize" />
            <xsl:text>);</xsl:text>

            <!-- JavaScripts table -->
            <xsl:text>ContentCreator('contentInformationTables', 0, 'Scripts', </xsl:text>
            <xsl:value-of select="contentInformation/scriptsTotalSize" />
            <xsl:text>, </xsl:text>
            <xsl:value-of select="contentInformation/scriptsTotalCount" />
            <xsl:text>, [], [</xsl:text>
            <xsl:for-each select="contentInformation/scripts/script">
              <xsl:call-template name="AVIMOMCSMPBuildSrcSizeArray" />
            </xsl:for-each>
            <xsl:text>], </xsl:text>
            <xsl:text>[], [], [], [], null);</xsl:text>

            <!-- Cascading Style Sheets table -->
            <xsl:text>ContentCreator('contentInformationTables', 0, 'CSS', </xsl:text>
            <xsl:value-of select="contentInformation/cssTotalSize" />
            <xsl:text>, </xsl:text>
            <xsl:value-of select="contentInformation/cssTotalCount" />
            <xsl:text>, [], [], [</xsl:text>
            <xsl:for-each select="contentInformation/cssStyles/cssStyle">
              <xsl:call-template name="AVIMOMCSMPBuildSrcSizeArray" />
            </xsl:for-each>
            <xsl:text>], </xsl:text>
            <xsl:text>[], [], [], null);</xsl:text>

            <!-- HTC Behaviors table -->
            <xsl:text>ContentCreator('contentInformationTables', 0, 'HTC', </xsl:text>
            <xsl:value-of select="contentInformation/htcTotalSize" />
            <xsl:text>, </xsl:text>
            <xsl:value-of select="contentInformation/htcTotalCount" />
            <xsl:text>, [], [], [], [</xsl:text>
            <xsl:for-each select="contentInformation/htcBehaviors/htc">
              <xsl:call-template name="AVIMOMCSMPBuildSrcSizeArray" />
            </xsl:for-each>
            <xsl:text>], </xsl:text>
            <xsl:text>[], [], null);</xsl:text>
          </xsl:if>
          }
          }
        </script>
        <table cellpadding="0" cellspacing="0" class="Header">
          <tr>
            <td class="HeaderTitle" onclick="GlobalTreeExpander('contentInformation','contentInformationContent','TreeNode'); BuildContentInformation();">Content Information</td>
            <td id="contentInformation" onclick="GlobalTreeExpander('contentInformation','contentInformationContent','TreeNode'); BuildContentInformation();">
              <xsl:attribute name="class">TreeNodePlus</xsl:attribute>
              <li />
            </td>
          </tr>
        </table>
        <table cellpadding="0" cellspacing="0" border="0" id="contentInformationContent" style="display: none">
          <tr>
            <td>
              <div id="contentInformationTables">
                <li />
              </div>
            </td>
            <td style="padding: 5px;" valign="top">
            </td>
          </tr>
        </table>
      </xsl:template>
      <xsl:template name="AVIMOMCSMPBuildSrcSizeArray">
        <xsl:text>[</xsl:text>
        <xsl:text>'</xsl:text>
        <xsl:value-of select="shortSrc" />
        <xsl:text>'</xsl:text>
        <xsl:text>,</xsl:text>
        <xsl:value-of select="size" />
        <xsl:text>,</xsl:text>
        <xsl:text>'</xsl:text>
        <xsl:value-of select="src" />
        <xsl:text>'</xsl:text>

        <xsl:if test="loadingTime">
          <xsl:text>,'</xsl:text>
          <xsl:value-of select="loadingTime" />
          <xsl:text>'</xsl:text>
        </xsl:if>

        <xsl:if test="startTime">
          <xsl:text>,'</xsl:text>
          <xsl:value-of select="startTime" />
          <xsl:text>'</xsl:text>
        </xsl:if>

        <xsl:if test="loadingMask">
          <xsl:text>,'</xsl:text>
          <xsl:value-of select="loadingMask" />
          <xsl:text>'</xsl:text>
        </xsl:if>

        <xsl:if test="endTime">
          <xsl:text>,'</xsl:text>
          <xsl:value-of select="endTime" />
          <xsl:text>'</xsl:text>
        </xsl:if>

        <xsl:text>]</xsl:text>
        <xsl:if test="position()!=last()">
          <xsl:text>,</xsl:text>
        </xsl:if>
      </xsl:template>
      <xsl:template name="AVIMOMCSMPBrowserCapabilities">
        <!-- JavaScript function that provide dynamic building of the browser capabilities -->
        <script type="text/javascript">
          var browserCapabilitiesBuilded = false;
          function BuildBrowserCapabilities()
          {
          if (!browserCapabilitiesBuilded)
          {
          browserCapabilitiesBuilded = true;
          <xsl:text>ContentCreator('browserCapabilitiesContent', 0, 'Browser Capabilities', '', '', [], [], [], [], </xsl:text>
          <xsl:text>[</xsl:text>
          <xsl:for-each select="browserCapabilities/variables/variable">
            <xsl:text>[</xsl:text>
            <xsl:text>'</xsl:text>
            <xsl:value-of select="name" />
            <xsl:text>','</xsl:text>
            <xsl:value-of select="value" />
            <xsl:text>','</xsl:text>
            <xsl:value-of select="type" />
            <xsl:text>']</xsl:text>
            <xsl:if test="position()!=last()">
              <xsl:text>,</xsl:text>
            </xsl:if>
          </xsl:for-each>
          <xsl:text>], </xsl:text>
          <xsl:text>[]);</xsl:text>
          }
          }
        </script>
        <table cellpadding="0" cellspacing="0" class="Header">
          <tr>
            <td class="HeaderTitle" onclick="GlobalTreeExpander('browserCapabilities','browserCapabilitiesContent','TreeNode'); BuildBrowserCapabilities();">Browser Capabilities</td>
            <td id="browserCapabilities" onclick="GlobalTreeExpander('browserCapabilities','browserCapabilitiesContent','TreeNode'); BuildBrowserCapabilities();">
              <xsl:attribute name="class">TreeNodePlus</xsl:attribute>
              <li />
            </td>
          </tr>
        </table>
        <div id="browserCapabilitiesContent" style="display: none">
          <li />
        </div>
      </xsl:template>
      <xsl:template name="AVIMOMCSMPScriptSubscription">
        <script type="text/javascript">
          var scriptSubscriptionBuilded = false;
          function BuildScriptSubscription()
          {
          if (!scriptSubscriptionBuilded)
          {
          scriptSubscriptionBuilded = true;
          <xsl:text>ContentCreator('scriptSubscriptionContent', 0, 'JavaScript', '', '', [], [], [], [], [], [], [],</xsl:text>
          <xsl:text>[</xsl:text>
          <xsl:text>[</xsl:text>
          <xsl:text>'window.onload'</xsl:text>
          <xsl:text>,</xsl:text>
          <xsl:choose>
            <xsl:when test="pageLoadingScopeInfo/scriptSubscription and pageLoadingScopeInfo/scriptSubscription != ''">
              <xsl:text>StrDecoder('</xsl:text>
              <xsl:value-of select="pageLoadingScopeInfo/scriptSubscription" />
              <xsl:text>')</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <xsl:text>'</xsl:text>
              <i>
                <xsl:text>n/a</xsl:text>
              </i>
              <xsl:text>'</xsl:text>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:text>,</xsl:text>
          <xsl:text>'User-Defined Script Code, Subscribed on ....'</xsl:text>
          <xsl:text>]</xsl:text>
          <xsl:text>]);</xsl:text>
          }
          }
        </script>

      </xsl:template>
      <xsl:template name="AVIMOMCSMPEndUserInformation">
        <!-- JavaScript function that provide dynamic building of the end user information -->
        <script type="text/javascript">
          var endUserInformationBuilded = false;
          function BuildEndUserInformation()
          {
          if (!endUserInformationBuilded)
          {
          endUserInformationBuilded = true;
          <xsl:text>ContentCreator('endUserInformationContent', 0, 'End User Information', '', '', [], [], [], [], [], </xsl:text>
          <xsl:text>[</xsl:text>
          <xsl:if test="count(userInfo/variables) &gt; 0">
            <xsl:for-each select="userInfo/variables/variable">
              <xsl:text>[</xsl:text>
              <xsl:text>'</xsl:text>
              <xsl:value-of select="name" />
              <xsl:text>',</xsl:text>

              <xsl:choose>
                <xsl:when test="@type = 'simple'">
                  <xsl:text>'</xsl:text>
                  <xsl:value-of select="value" />
                  <xsl:text>','</xsl:text>
                  <xsl:value-of select="type" />
                  <xsl:text>'</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:text> , '</xsl:text>
                  <xsl:value-of select="type" />
                  <xsl:text>', [</xsl:text>
                  <xsl:for-each select="variables/variable">
                    <xsl:text>[</xsl:text>
                    <xsl:text>'</xsl:text>
                    <xsl:value-of select="name" />
                    <xsl:text>','</xsl:text>
                    <xsl:value-of select="value" />
                    <xsl:text>','</xsl:text>
                    <xsl:value-of select="type" />
                    <xsl:text>']</xsl:text>
                    <xsl:if test="position()!=last()">
                      <xsl:text>,</xsl:text>
                    </xsl:if>
                  </xsl:for-each>
                  <xsl:text>]</xsl:text>
                </xsl:otherwise>
              </xsl:choose>

              <xsl:text>]</xsl:text>
              <xsl:if test="position()!=last()">
                <xsl:text>,</xsl:text>
              </xsl:if>
            </xsl:for-each>
          </xsl:if>
          <xsl:text>]);</xsl:text>
          }
          }
        </script>
        <table cellpadding="0" cellspacing="0" class="Header">
          <tr>
            <td class="HeaderTitle" onclick="GlobalTreeExpander('endUserInformation','endUserInformationContent','TreeNode'); BuildEndUserInformation();">End User Information</td>
            <td id="endUserInformation" onclick="GlobalTreeExpander('endUserInformation','endUserInformationContent','TreeNode'); BuildEndUserInformation();">
              <xsl:attribute name="class">TreeNodePlus</xsl:attribute>
              <li />
            </td>
          </tr>
        </table>
        <div id="endUserInformationContent" style="display: none">
          <li />
        </div>
      </xsl:template>
      <xsl:template name="AVIMOMCSMPCollectionNotes">
        <xsl:if test="collectionNotes/note">
          <table cellpadding="0" cellspacing="0" class="Header">
            <tr>
              <td class="HeaderTitle" onclick="GlobalTreeExpander('collectionNotesH', 'collectionNotes', 'TreeNode');">Collection Notes</td>
              <td id="collectionNotesH" onclick="GlobalTreeExpander('collectionNotesH', 'collectionNotes', 'TreeNode');">
                <xsl:attribute name="class">
                  <xsl:choose>
                    <xsl:when test="count(collectionNotes/note) = 0">
                      TreeNodePlus
                    </xsl:when>
                    <xsl:otherwise>TreeNodeMinus</xsl:otherwise>
                  </xsl:choose>
                </xsl:attribute>
                <li />
              </td>
            </tr>
          </table>
          <div id="collectionNotes">
            <xsl:if test="count(collectionNotes/note) = 0">
              <xsl:attribute name="style">display: none</xsl:attribute>
            </xsl:if>
            <ul class="CollectionNotes">
              <xsl:for-each select="collectionNotes/note">
                <li>
                  <xsl:value-of select="." />
                </li>
              </xsl:for-each>
            </ul>
          </div>
        </xsl:if>
      </xsl:template>
      <xsl:template name="AVIMOMCSMPMonitorScript">
        <xsl:element name="script">
          <xsl:comment>
            
                
function tdcontent(s){
    if (s == undefined || s =='')
        return '&amp;#160;'
    else
        return s;  
}

function TableHead(className){
    return '&lt;table class="' + className + '"  cellpadding="0" cellspacing="0"&gt;';
}
///////////////////////////////////////////////////////////////////////////////
// Object processing  
///////////////////////////////////////////////////////////////////////////////

var id = -1; 

function OdId(){
    id ++;   
    return '*' + id;    
}

function OD(ot, ov){
    od[OdId()] = new ObjData(ot, ov);	
}

function Bl(val){
    if (val == 1)
        OD("BOOLEAN", "true");
    else
        OD("BOOLEAN", "false");
}

function OV(Id, Name)
{
    if (typeof(Id) == 'string'){
        this.Id = [Id];
        this.Name = [Name];
    }
    else{
        this.Id = Id;	
        this.Name = Name;	
    }
}


function ObjData(ot, ov)
{	
    this.ot = ot;
    this.ov = ov;	
    if (typeof(ov) == 'string')
        this.os = 's';
    else
        if (this.ot == t1 || this.ot == t2 || this.ot == t3)
            this.os = 'a';
        else
            this.os = 'c';	
}

var od = new Array(); 
                      
//FillObjects(); //This function is described in the C# code and attached to the html

///////////////////////function

function GetParameterDefinition(id, name){
    value='';
    title = '';
    
    if (od[id].os == 's'){
        value = name + ' = ' + od[id].ov;
        
        if (od[id].ot == 'STRING')
            value = name + ' = \'' + od[id].ov + '\'';
    }                  
            
    type='';
    flag = true;
    for (var i = od[id].ot.length; i &gt;= 0; i=i-1)
        if (od[id].ot.charAt(i) != '.' &amp;&amp; flag)
            type = od[id].ot.charAt(i) + type;
        else flag = false;  
    title = 'title="' + od[id].ot + ' ' + value  + '"'; 	    	          
    
    return  '&lt;span ' + title + '&gt;&lt;span  class="TreeNodeValueType"&gt;' + type + '&lt;/span&gt;&lt;span class="TreeNodeValueParam"&gt;' + name + '&lt;/span&gt;&lt;/span&gt;';           
} 

////////////////////variable

//enum
var stateClosed = "TreeVarNodePlus";
var stateOpened = "TreeVarNodeMinus";
var stateEmpty  = "TreeVarNodeSimple";
var stateSpace  = "TreeVarNodeSpace";     
//enum end 

//enum
var treeEmpty   = '0';
var treeSibling = '1';
var treeLine    = '2';    
var treeLast    = '3';    
//enum end     

//enum
var itemSimple			= 'TreeNodeTypeSimple';       
var itemArray			= 'TreeNodeTypeArray';
var itemClass			= 'TreeNodeTypeClass';    
var itemClassNoInfo     = 'TreeNodeTypeClassNoInfo';    
//enum end 

var identity = 1;   //for id generation        

function newId(){
    identity ++;
    return identity;
}



function GetItemRow(name, value, info, type, 
                    onclick, itemId, tree, state, itemType){   
    name = tdcontent(name);
    value = tdcontent(value);
    info = tdcontent(info);            

    var s = '&lt;tr class="Normal" id="' + itemId + '" title="' + type + '"&gt;';
    //name td
    s += '&lt;td&gt;' + GetTreeNodeTable(name, onclick, itemId, tree, state, itemType) + '&lt;/td&gt;';        
    //value td               
    s += '&lt;td&gt;' + value + '&lt;/td&gt;';
    //structure td               
    s += '&lt;td&gt;' + info + '&lt;/td&gt;&lt;/tr&gt;';   
   
    return s;    
}



function InsertItem(tableId, index, name, value, info, type, onclick, itemId, tree, state, 
                    itemType){   
                        
    objTable = document.getElementById(tableId);   
    
    if (objTable) 
    {      
        name = tdcontent(name);
        value = tdcontent(value);
        info = tdcontent(info);            
                                    
        var s = GetTreeNodeTable(name, onclick, itemId, tree, state, itemType);
        
        var objRow;
        if (index &gt;= 0)
            objRow = objTable.insertRow(index);
        else     
            objRow = objTable.insertRow();
            
        objRow.id = itemId;            
        objRow.title = type;            
        objRow.className = "Normal";
        
        var objCell;
        objCell = objRow.insertCell();
        objCell.innerHTML  = s;           
        
        objCell = objRow.insertCell();    			
        objCell.innerHTML  = value;   
        
        objCell = objRow.insertCell();
        objCell.innerHTML  = info;               
    } 
}


function GetTreeNodeTable(name, onclick, itemId, tree, state, itemType){  
        var s = '&lt;table class="TreeNodeValue"  cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td&gt;';        
        
        s += '&lt;table class="TreeNode" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;';             
        for (var i = 0; i &lt; tree.length; i++)
            switch (tree.charAt(i)){
                case treeEmpty:
                    s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';                              
                break; 
                case treeLast :
                    s += '&lt;td class="TreeNodeLast"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';                              
                break; 
                case treeLine :
                    s += '&lt;td class="TreeNodeLine"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';                              
                break; 
                case treeSibling:
                    s += '&lt;td class="TreeNodeSibling"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';                              
                break; 
            };
        s += '&lt;td onclick="' + onclick + '" class="' + state + '" id="' + itemId + 'sign"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';                              
        s += '&lt;td class="' + itemType + '"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;td&gt;';                        
        
        s += '&lt;table cellpadding="0" cellspacing="0" class="TreeNodeValueName"&gt;&lt;tr&gt;&lt;td&gt;' + name + '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;';             
        s += '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;';        
        
        return s;                   
}    

function InsertObjectLink(tableId, index, itemId, objId, name, path, tree){
      
    
    if (itemId == '')
        itemId = newId();          
        
    var onclick;
    var state;
    
    if (od[objId].os == 's' || objId == '*0' || typeof(od[objId].ov) == 'undefined' || typeof(od[objId].ov.Id) == 'undefined' || od[objId].ov.Id.length == 0)
    {
        onclick = '';
        if (tree == '')
            state = stateSpace;                
        else    
            state = stateEmpty;
    }       
    else{ 
            var escapedName = name;
            escapedName = escapedName.replace(/\\/g, '\\\\');
            escapedName = escapedName.replace(/'/g, "\\'");
            onclick = 'OpenLink(\'' + itemId + '\',\''+ objId.replace(/'/g, "\\'") + '\',\''+ escapedName +'\',\''+ path +'\',\''+ tree + '\')';
            state = stateClosed;
    }   
    
        
    if (tableId == '')
        return GetItemRow(name, GetValue(objId), GetInfo(objId), 
                    od[objId].ot, onclick, itemId, tree, state, 
                    GetItemType(objId));  
    else                
        InsertItem(tableId, index, name, GetValue(objId), GetInfo(objId), 
                    od[objId].ot, onclick, itemId, tree, state, 
                    GetItemType(objId));          
    
        
}     


function GetInfo(id){

    if (id == "*0")
        return "optimized";
        
    if (od[id].os == 'a') 
            return 'array';             
        
    if (od[id].os == 'c' ){
        if (typeof(od[id].ov) == 'undefined' || typeof(od[id].ov.Id) == 'undefined' || od[id].ov.Id.length == 0)				
            return 'class (members not collected)';                
        else            
            return 'class';         
        }   

    return "";
}

function GetItemType(id){
    
    if (od[id].os == 'a') 
        return itemArray;      
    
    if (od[id].os == 'c'){ 
        if (typeof(od[id].ov) == 'undefined' || typeof(od[id].ov.Id) == 'undefined' || od[id].ov.Id.length == 0)				
            return itemClassNoInfo ;                
        else            
            return itemClass;         
    }
        
    if (od[id].os == 's')            
        return itemSimple;    

    return "";
}
    


function GetValue(objId){
    if (od[objId].os == 's' &amp;&amp; typeof(od[objId].ov) != 'undefined')
        return od[objId].ov;                
    else            
        return '';                           
}

        
function OpenLink(itemId, objectId, name, path, tree){ 
    var objRow = document.getElementById(itemId); 
    if (objRow) 
    {
        //Define index and delete row
        var index = objRow.rowIndex;
        var currTable = objRow.parentElement.parentElement;
        var currTableBody = objRow.parentElement;
        var tableId = currTable.id;  
        currTableBody.deleteRow(objRow.rowIndex);
        
        var s = "";
        //Insert root
        var onClick = 'TreeExpander(\''+ itemId + '\', \'TreeVarNode\')';
        s += GetItemRow(name, '', GetInfo(objectId, -1), od[objectId].ot,
                    onClick, itemId, tree, stateOpened, GetItemType(objectId, -1),'');
        
        for (var i = 0; i &lt; od[objectId].ov.Id.length; i++){
            var childTree = tree;
            if (childTree.length &gt; 0){
                if (childTree.charAt(childTree.length - 1) == treeSibling)
                    childTree = childTree.substring(0, childTree.length - 1) + treeLine;
                else      
                    childTree = childTree.substring(0, childTree.length - 1) + treeEmpty;
            }        
                    
            if (i == od[objectId].ov.Id.length - 1) 
                childTree += treeLast;
            else    
                childTree += treeSibling;                    
                
            s += InsertObjectLink('', index + i + 1, itemId + '.' + i, '*' + od[objectId].ov.Id[i], 
                        od[objectId].ov.Name[i], path  + '.' + objectId, childTree);
        } 

        var divContainer = currTable.parentElement;
        var signRow = currTableBody.insertRow(index);
        var allTable = currTable.outerHTML;
        var sign = "&lt;TR&gt;&lt;/TR&gt;";
        var allTableArr = allTable.split(sign);
        divContainer.innerHTML = allTableArr[0]+s+allTableArr[1];                               
    }               
}


///////////////////////////////////////////////////////////////////////////////
// Expand
///////////////////////////////////////////////////////////////////////////////

function CollapseAll () 
{
    var eventCounter = 1;
    var obj = document.getElementById('1sp1ex');
    while (obj != null) 
    {
        //  Close exception info
        var row = obj.parentElement.parentElement.rows[1];
        if (typeof(row) != 'undefined' &amp;&amp; row.style.display == '') {
            obj.fireEvent("onClick");
        }

        //  Close all childs functions
        var funcCounter = 1;
        var obj = document.getElementById('1sp' + eventCounter + 'ev');
        while (obj != null) 
        {            
            var row = obj.parentElement.parentElement.rows[1];
            if (typeof(row) != 'undefined' &amp;&amp; row.style.display == '') {
                obj.fireEvent("onClick");
            }
            
            funcCounter++;
            var obj = document.getElementById(funcCounter + 'sp' + eventCounter + 'ev');            
        }
    
        eventCounter++;
        var obj = document.getElementById('1sp' + eventCounter + 'ex');            
    }  
    
    //  Close all handled functions
    var funcCounter = 1;
    var obj = document.getElementById('1sp1hev');
    while (obj != null) 
    {            
        var row = obj.parentElement.parentElement.rows[1];
        if (typeof(row) != 'undefined' &amp;&amp; row.style.display == '') {
            obj.fireEvent("onClick");
        }
        
        funcCounter++;
        var obj = document.getElementById(funcCounter + 'sp1hev');            
    }
      
}

function Expander(obj, prefix, child, tabName, htmlSize, stub, images, javaScripts, cssStyles, htcBehaviors,
    browserCapabilitiesParameters, endUserInformationParameters, beforeDomCount, beforeDomSize)
{	
    if (obj.className.indexOf('Minus') &gt; 0)
    {
        obj.className = prefix + 'Plus' + (obj.className.indexOf('Selected') &gt; 0 ? 'Selected' : '');
        obj.parentElement.parentElement.rows[1].style.display = 'none';		
    }
    else
    {		
        obj.className = prefix + 'Minus' + (obj.className.indexOf('Selected') &gt; 0 ? 'Selected' : '');
        
        var row = obj.parentElement.parentElement.rows[1];
        if (typeof(row) == 'undefined')
        {
            row = obj.parentElement.parentElement.insertRow();
            var cell = row.insertCell();
            cell.className = 'TabExceptionContainer';
            cell.innerHTML = OpenNodeContent(child, tabName, htmlSize, stub, images, javaScripts, cssStyles, htcBehaviors,
                                browserCapabilitiesParameters, endUserInformationParameters, beforeDomCount, beforeDomSize);

        }
        else
            row.style.display = '';
    }
}

function ExceptionExpander(mainId, exId){
    var s = '&lt;div class="ExceptionVar"&gt;&lt;table cellpadding="0" cellspacing="0" class="TreeVar" id="' + mainId + '"&gt;';
    s += Header() + InsertObjectLink('','1','',exId, 'exception', '', '') + '&lt;/table&gt;&lt;/div&gt;';
    return s;		
}

function TabHeader(id, num, activeTab, type, body){	
    return '&lt;div id="' + id + 'content' + num + '" Style="DISPLAY:' + ((activeTab==num) ? 'block' : 'none') + '"&gt;&lt;table cellpadding="0" cellspacing="0" class="TreeVar" id="' + id + type + '"&gt;' + body + '&lt;/table&gt;&lt;/div&gt;';
}

function Header(){
    return '&lt;col class="TreeVarCol1"/&gt;&lt;col class="TreeVarCol2"/&gt;&lt;col class="TreeVarCol3"/&gt;&lt;tr&gt;&lt;th class="TreeVarHeader1"&gt;Name&lt;/th&gt;&lt;th class="TreeVarHeader2"&gt;Value&lt;/th&gt;&lt;th class="TreeVarHeader3"&gt;Structure&lt;/th&gt;&lt;/tr&gt;';
}


function InsertLinks(varIds, varNames, msg){
    var s = Header();
    if (varIds.length == 0) {
        s += "&lt;td colspan=3&gt;" + msg + "&lt;/td&gt;";
    } else {
        for (var i = 0; i &lt; varIds.length; i++){
            s += InsertObjectLink('','','', varIds[i], varNames[i], '', '');
        }
    }
    return s;
}

function TabBookmark(id, num, activeTab, text){
    return  '&lt;td onmouseover="HightLightTab(true)" onmouseout="HightLightTab(false)" class="TabBookmark' + ((activeTab==num) ? 'Sel' : '') + '" id="' + id + num + '" onclick="SetTabValue(\'' + id + '\', ' + num + ')"&gt;&lt;nobr&gt;' + text + '&lt;/nobr&gt;&lt;/td&gt;';
}

function fillTemplate(tpl_string, pattern, rep_string)
{
    tpl = tpl_string.split(pattern);
    return tpl[0]+rep_string+tpl[1];
}

function getResultPdbUploadUrl(pdbUploadUrl, version, module)
{ 
    // Replace "&amp;#39;" with "'" symbol. 
    // Encode module for "&amp;" symbol.
    var assemblyName = module.replace(/&amp;#39;/g, "'").replace(/&amp;/g, "%26");
    return fillTemplate(pdbUploadUrl, '___VERSION_PATTERNS___', escape('&amp;fromStackFrame=true&amp;assemblyVersion='+version+'&amp;assemblyName='+assemblyName));
}

function ModulesRowContent(rowType, title, value, id, style, tooltipTexts, fileType, value2, value3, value4, value5){
    var s = '&lt;tr id="' + id + '" style="Display:' + style + ';" class="Normal"&gt;';
    s += '&lt;td style="width: 32%"&gt;';
    s += '&lt;table class="TreeNodeValueNameFixed" cellpadding="0" cellspacing="0" width="100%"&gt;&lt;tr&gt;';
    
    var totalStyle = '';
    rowType = rowType.toLowerCase();
    var prefix = "2spaces_";
    if (rowType.indexOf(prefix) == 0) {
        s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
        //s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
        rowType = rowType.substring(prefix.length);
    }
    switch (rowType) {
        case 'last':
            // Last node picture.
            s += '&lt;td class="TreeNodeLast"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
        case 'middle':
            // Middle node picture.
            s += '&lt;td class="TreeNodeSibling"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
        case 'simple':
            // Simple node picture.
            s += '&lt;td class="TreeNodeTypeSimple"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
        case 'total':
            // Style for 'total' row.
            totalStyle = ' style="text-align: right; font-weight: bold; padding-right: 10px;"';
            break;
        case 'low':
            // Style for 'low' row.
            //totalStyle = ' style="text-align: center; font-style: italic; color: rgb(100, 100, 100); padding-right: 10px;"';
            totalStyle = ' style="font-style: italic; color: rgb(100, 100, 100);"';
            s += '&lt;td class="TreeNodeLast"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
        case 'nonodespace':
            // Without node space and node picture.
            break;
        default:
            // Node space without picture.
            s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
    }
    
    var titleHint = '';
    var valueHint = '';
    var mouseHandler = '';
    if (typeof(tooltipTexts) != 'undefined') {
        if (typeof(tooltipTexts[0]) != 'undefined') {
            titleHint = ' description="' + tooltipTexts[0] + '"';
            if (typeof(fileType) != "undefined") 
            {
                if (fileType == 'image' || fileType == 'text') 
                    title = '&amp;nbsp; &lt;a href="' + ResourceBrowser.encodeResourceUrl(tooltipTexts[0]) + '" title="' + ResourceBrowser.encodeResourceUrl(tooltipTexts[0]) + '" target="blank"&gt;' + title + '&lt;/a&gt;';				
            }
        }
        if (typeof(tooltipTexts[1]) != 'undefined') {
            valueHint = ' title="' + tooltipTexts[1] + '"';
        }
    }
    
    //s += '&lt;td' + totalStyle + mouseHandler + titleHint + '&gt;&amp;nbsp; ' + title + '&lt;/td&gt;';
    //s += '&lt;td' + totalStyle + mouseHandler + titleHint + '&gt;&amp;nbsp; &lt;a href="' + tooltipTexts[0] + '" target="blank"&gt;' + title + '&lt;/a&gt;&lt;/td&gt;';
    s += '&lt;td' + totalStyle + mouseHandler + titleHint + '&gt;' + title + '&lt;/td&gt;';
    
    s += '&lt;/tr&gt;';
    s += '&lt;/table&gt;';
    s += '&lt;/td&gt;';
    s += '&lt;td' + valueHint + '&gt;' + value + '&amp;nbsp;&lt;/td&gt;';
    
    if (value4 != null &amp;&amp; value4 != "undefined") {
        s += '&lt;td title="' + value4 + '"&gt;' + value4 + '&amp;nbsp;&lt;/td&gt;'
    }
    
    var value3Description = "Displays the interval during \nwhich the image loaded and \nthe elapsed time in ms between \nTTFB and the load completion.";
    
    if (value2 != null &amp;&amp; typeof(value2) != 'undefined') {
        if (value3 != null &amp;&amp; typeof(value3) != 'undefined') {
        
            function buildComplexImage(mask, time){
                var height = 5;
                var segmentsCount = mask.length - 1;/*do not take into account splitter stick*/;
                var segmentWidth = 4;

                var stickIndex = mask.indexOf("s");
                var letter ="d";
                
                var firstRowWidth = segmentWidth * stickIndex + stickIndex + 2;
                
                var resultTable;
                var firstRow = '&lt;div style="height: 5px; overflow:hidden; border: 0px; border-right: solid 1px #FF7E00; width: '+ firstRowWidth + 'px; margin:0 0 1px 0; padding: 0;" &gt;&lt;/div&gt;';
                
                var secondRow = '&lt;div class="uxGlovalDiv"&gt;';
                
                // First Square:                
                var firstColor = mask.substring(0, 1);
                if (firstColor = "0") {
                    secondRow += '&lt;b class="whiteFirstProgressBar"&gt;&amp;nbsp;&lt;/b&gt;';
                }
                else {
                    secondRow += '&lt;b class="violetFirstProgressBar"&gt;&amp;nbsp;&lt;/b&gt;';
                }
                            
                
                var file;
                for(var i=1; i &lt; mask.length; i++){				    
                    if(i == stickIndex){
                        letter = "p";
                        continue;
                    }                    
                    var digitFromMask = mask.substring(i, i + 1);
                    file = (digitFromMask == "0") ? "0.png" : "1" + letter + ".png";
                    switch (file){
                       case '0.png':
                            secondRow += '&lt;b class="whiteProgressBar"&gt;&amp;nbsp;&lt;/b&gt;';
                            break;
                       case '1p.png':
                            secondRow += '&lt;b class="orangeProgressBar"&gt;&amp;nbsp;&lt;/b&gt;';
                            break;
                       case '1d.png':
                            secondRow += '&lt;b class="violetProgressBar"&gt;&amp;nbsp;&lt;/b&gt;';
                            break;
                    }
                }
                
                resultTable = '&lt;table class="TabStyle"&gt;&lt;tr&gt;&lt;td&gt;';
                resultTable += firstRow + secondRow + '&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;';
                resultTable += '&lt;tr&gt;&lt;td style="font-style:normal; font-size:8px; font-weight:lighter; line-height:8px; padding: 0; margin: 0; vertical-align:middle; text-align:right;"&gt;' + time + '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;';
                return resultTable;
            }
            
            var _hint = ' title="' + value3Description + '"';
            var image = "";
                       
            image = buildComplexImage(value3.img, value3.time);
            s += '&lt;td' + _hint + '&gt;' + image + '&lt;/td&gt;';
        }
        else
        {
            s += '&lt;td&gt;&amp;nbsp;&lt;/td&gt;';
        }
        s += '&lt;td&gt;' + value2 + '&amp;nbsp;&lt;/td&gt;';
    }
    
    if (value5 != null &amp;&amp; value5 != "undefined") {
        s += '&lt;td&gt;' + value5 + '&amp;nbsp;&lt;/td&gt;'
    }
    
    s += '&lt;/tr&gt;';
    return s;
}

function ModulesExpandRowContent(title, id, sign, value, omitExpander, hint, style, entityClass, value2, value3, value4, value5){
    var s = '&lt;tr class="Normal"&gt;';
    s += '&lt;td style="width: 32%;"&gt;';
    s += '&lt;table class="TreeNodeValue" cellpadding="0" cellspacing="0"&gt;';
    s += '&lt;tr&gt;';
    
    if (omitExpander)
    {
        s += '&lt;td&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
    }
    else
    {
        s += '&lt;td class="TreeVarNode' + sign + '" onclick="ModulesExpander(this, \'' + id + '\');"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
    }
    
    if (typeof(style) == "undefined" || style == null || style == '')
    {
        style = 'font-weight: bold;';
    }
    if (typeof(hint) == "undefined" || hint == null)
    {
        hint = '';
    }
    
    var classForBGImg = '';
    switch (entityClass)
    {
        case 'simple':
            classForBGImg = 'TreeNodeTypeSimple';
        case 'class':
            classForBGImg = 'TreeNodeTypeClass';
            break;
        default:
            break;
    }
    
    s += '&lt;td class="' + classForBGImg + '"&gt;&lt;/td&gt;';
    s += '&lt;td&gt;&lt;span style="' + style + '" title="' + hint + '"&gt;' + title + '&lt;/span&gt;&lt;/td&gt;';
    s += '&lt;/tr&gt;';
    s += '&lt;/table&gt;';
    s += '&lt;/td&gt;';
    
    if (typeof(value) == 'undefined')
    {
        value = '';
    }
    
    if(value == "Cache detection" || value == "Read from cache")
        value = '&lt;i style="font-weight: normal; color: #888888;"&gt;'+value+'&lt;/i&gt;';
    
    s += '&lt;td title="' + hint + '"&gt;&lt;b&gt;' + value + '&lt;/b&gt;&amp;nbsp;&lt;/td&gt;';
    
    if (value4 != null &amp;&amp; typeof(value4) != 'undefined')
    {
        s += '&lt;td&gt;&lt;b&gt;' + value4 + '&lt;/b&gt;&amp;nbsp;&lt;/td&gt;';
    }
    
    if (value2 != null &amp;&amp; typeof(value2) != 'undefined')
    {
        s += '&lt;td&gt;&lt;b&gt;' + value2 + '&lt;/b&gt;&amp;nbsp;&lt;/td&gt;';
        if (value3 != null &amp;&amp; typeof(value3) != 'undefined')
        {
            s += '&lt;td&gt;&lt;b&gt;' + value3 + '&lt;/b&gt;&amp;nbsp;&lt;/td&gt;';
        }
    }
    if (value5 != null &amp;&amp; typeof(value5) != 'undefined')
    {
        s += '&lt;td&gt;&lt;b&gt;' + value5 + '&lt;/b&gt;&amp;nbsp;&lt;/td&gt;';
    }
    s += '&lt;/tr&gt;';
    return s;
}




/// METHOD USED for images ONLY!!!
function buildByteResourcesEx(resources, totalSize, firstColName, secondColName, totalCount, id, fileType, thirdColName, imagesBeforeDomCount, imagesBeforeDomSize, forthColName){
    //var badRowHint = 'Resource file size hasn\'t been calculated because browser has abilities limitations or file cannot be accessed.';
    var badRowHint = 'Resource file size has not been collected due to browser or access restrictions.';
    var badTotalRowHint = '"More than" estimate used because some Resource file(s)\'s size has not been calculated (see appropriate row(s) for details).';
    var theWorstTotalRowHint = 'Total size has not been calculated because All Resource files\' size has not been calculated (see row(s) for details).';
    
    // ------------------ Operate with data:
    
    // Split images on groups:
    var beforeDom = [];
    var afterDom = [];
    for (var i = 0; i &lt; resources.length; i++) {
        var image = resources[i];
        var scopeMask = "000000" + "000000" + "s" + "000000" + "000000"; // 20 sections + 1 for Splitter Stick
        if (typeof(image[5]) != "undefined") {
            scopeMask = image[5];
        }
        var splitterIndex = scopeMask.indexOf("s");
        var firstOneIndex = scopeMask.indexOf("1");
        var afterSplitterDigit = "0";
        if(splitterIndex == (scopeMask.length - 1))// no peripheral loading interval for this event
        {
            afterSplitterDigit = "0";
        }
        else{
            afterSplitterDigit = scopeMask.substring(splitterIndex + 1, splitterIndex + 2);
        }
        
        if ((firstOneIndex &gt; -1) &amp;&amp; (splitterIndex &gt; firstOneIndex) &amp;&amp; (afterSplitterDigit == "0") &amp;&amp; (parseFloat(image[6]) &gt; -1)) {
            // Load completed before DOM:
            beforeDom.push(image);
        }
        else {
            afterDom.push(image);
        }
    }
    
    //debugger;	
    var imagesAfterDomCount = totalCount - imagesBeforeDomCount;

    var imagesAfterDomSize = Math.abs(totalSize) - Math.abs(imagesBeforeDomSize);
    if (totalSize &lt; 0) {
        imagesAfterDomSize = (-1) * imagesAfterDomSize;
    }

    totalSize = Math.abs(totalSize);
    if ((imagesAfterDomSize &lt; 0) || (imagesBeforeDomSize &lt; 0))
    {
        totalSize *= (-1);
    }
    
    totalSize = Math.abs(totalSize);
    if ((imagesAfterDomSize &lt; 0) || (imagesBeforeDomSize &lt; 0))
    {
        totalSize *= (-1);
    }
    
    var domHasOtherRow = false;
    if (imagesBeforeDomCount &gt; beforeDom.length) {
        domHasOtherRow = true;
    }
    
    var peripheralHasOtherRow = false;
    if (imagesAfterDomCount &gt; afterDom.length) {
        peripheralHasOtherRow = true;
    }
    
    var totalSizeParam = '';
    
    var domTotalCount = imagesBeforeDomCount;
    var domTotalSize = imagesBeforeDomSize;
    
    var peripheralTotalCount = imagesAfterDomCount;
    var peripheralTotalSize = imagesAfterDomSize;
    
    var domTotalSizeParam = '';
    var domHasOtherRowParam = null;
    
    var peripheralTotalSizeParam = '';
    var peripheralHasOtherRowParam = null;
    
    // DOM Parameters:
    //debugger;
    if (domTotalCount &gt; 0) {
        if (domTotalSize &lt; 0) {
            domTotalSizeParam = '&gt; ' + addCommas((domTotalSize * (-1)));
        }
        else 
            if (domTotalSize == 0) {
                domTotalSizeParam = 'n/a';
            }
            else {
                domTotalSizeParam = addCommas(domTotalSize);
            }
    }
    else {
        domTotalSizeParam = '0';
        domHasOtherRowParam = !domHasOtherRow;
    }
    
    // Peripheral parameters:	
    if (peripheralTotalCount &gt; 0) {
        if (peripheralTotalSize &lt; 0) {
            peripheralTotalSizeParam = '&gt; ' + addCommas((peripheralTotalSize * (-1)));
        }
        else 
            if (peripheralTotalSize == 0) {
                peripheralTotalSizeParam = 'n/a';
            }
            else {
                peripheralTotalSizeParam = addCommas(peripheralTotalSize);
            }
    }
    else {
        peripheralTotalSizeParam = '0';
        peripheralHasOtherRowParam = !peripheralHasOtherRow;
    }
    
    // TOTAL Parameters:
    if (totalCount &gt; 0) {
        if (totalSize &lt; 0) {
            totalSizeParam = '&gt; ' + addCommas((totalSize * (-1)));
        }
        else 
            if (totalSize == 0) {
                totalSizeParam = 'n/a';
            }
            else {
                totalSizeParam = addCommas(totalSize);
            }
    }
    else {
        totalSizeParam = '0';
    }
    
    
    function FillCollection(collection, hasOtherRow, totalSize, totalCount, id){
    
        //debugger;
        var result = ""
        
        var listedFilesSize = 0;
        var hasNA = false;
        
        var pageDomain = "";
            if(_csm_PageUrl &amp;&amp; _csm_PageUrl != null)
            {
                pageDomain = ExtractDomainFromURL(_csm_PageUrl);
            }
            
        for (var i = 0; i &lt; collection.length; i++) {
            var rowType = 'middle';
            
            if ((i == (collection.length - 1)) &amp;&amp; (!hasOtherRow)) {
                rowType = 'last';
            }
            
            var resource = collection[i];
            
            var domain = "";

            if(pageDomain.length &gt; 0 &amp;&amp; resource[2])
            {
                domain = ExtractDomainFromURL(resource[2]);
                if(domain.toLowerCase() == pageDomain.toLowerCase())
                {
                    domain = "";
                }
            }
            
            if (resource[1] &gt; 0) {
                resource1Param = addCommas(resource[1]);
                resource2HintParam = resource[resource.length]/*undefined*/;
                listedFilesSize += parseInt(resource[1]);
            }
            else if(domain.length &gt; 0)
            {   
                resource1Param = 'n/a (&lt;span style="color: Gray"&gt;&lt;i&gt;[' + domain + ']&lt;/i&gt;&lt;/span&gt;)';
                resource2HintParam = badRowHint;
                hasNA = true;
            }
            else {
                resource1Param = 'n/a';
                resource2HintParam = badRowHint;
                hasNA = true;
            }
            
            var startLoading = parseFloat(resource[4]);
            var loading = parseFloat(resource[3]);
            var loadingMask = resource[5];
            var endLoading = parseFloat(resource[6]);
            
            var startDefined = startLoading &gt; -1;
            var loadingDefined = loading &gt; -1;
            var endDefined = endLoading &gt; -1;
            
            var resource3Param = "n/a";
            var resource4Param = {
                img: loadingMask,
                time: "n/a"
            };
            
            if (loadingDefined) {
                resource4Param.time = addCommas(endLoading);
                resource3Param = addCommas(loading);
            }
            else 
                if (endDefined) {
                    resource4Param.time = addCommas(endLoading);
                    resource3Param = "&lt; " + addCommas(endLoading);
                }
            rowType = "2spaces_" + rowType;
            result += ModulesRowContent(rowType, resource[0], resource1Param, id, 'none', [resource[2], resource2HintParam], fileType, resource3Param, resource4Param);
        }
        
        if (hasOtherRow) {
            var diff = totalCount - collection.length;
            var restSize = '';
            if ((listedFilesSize &gt; 0) &amp;&amp; (totalSize &gt; 0)) {
                restSize = totalSize - listedFilesSize;
                if (hasNA) {
                    restSize = 'n/a ( ~ ' + restSize + ')';
                }
            }
            
            var restTimeParam = null;
            
            restTimeParam = '';
            result += ModulesRowContent('2spaces_low', 'other (' + diff + ')', addCommas(restSize), id, 'none', collection[collection.length]/*undefined*/, fileType, restTimeParam, null);
        }
        
        return result;
    }
    
    
    // ---------------------------- Build HTML:
    
    var s = '';
    
    var baseId = id;//"imagesTotal_";
    var domId = baseId + ".0";
    var peripheralId = baseId + ".1";
    
    
    
    // Header:	
    s += '&lt;col style="width: 45%" /&gt;&lt;col style="width: 11%" /&gt;&lt;col style="width: 20%" /&gt;&lt;col style="width: 9%" /&gt;';
    s += '&lt;tr&gt;&lt;th&gt;' + firstColName + '&lt;/th&gt;&lt;th&gt;' + secondColName + '&lt;/th&gt;&lt;th&gt;' + forthColName + '&lt;/th&gt;&lt;th&gt;' + thirdColName + '&lt;/th&gt;';
    s += '&lt;/tr&gt;';
    if (totalCount &gt; 0) {
        // total row
        s += '&lt;tr class="Normal"&gt;';
        s += '&lt;td style="width: 32%;"&gt;';
        s += '&lt;table class="TreeNodeValue" cellpadding="0" cellspacing="0"&gt;';
        s += '&lt;tr id="' + baseId + '"&gt;';
        s += '&lt;td class="TreeVarNodePlus" id="' + baseId + 'sign" onclick="TreeExpander(\'' + baseId + '\', \'TreeNode\')"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
        s += '&lt;td&gt;&lt;/td&gt;';
        s += '&lt;td&gt;&lt;b&gt;Total&lt;/b&gt;&lt;/td&gt;';
        s += '&lt;/tr&gt;';
        s += '&lt;/table&gt;';
        s += '&lt;/td&gt;';
        s += '&lt;td&gt;&lt;b&gt;' + totalSizeParam + '&lt;/b&gt;&amp;nbsp;&lt;/td&gt;';
        s += '&lt;td&gt;&amp;nbsp;&lt;/td&gt;';
        s += '&lt;td&gt;&amp;nbsp;&lt;/td&gt;';
        s += '&lt;/tr&gt;';
        // end of total row
        
        // DOM row
        
        //s += ModulesExpandRowContent('Images Loaded During \'DOM Loading\' Interval (' + domTotalCount + ')', domId, 'Plus', domTotalSizeParam, domHasOtherRowParam, null, null, "", "", "");	
        
        s += '&lt;tr id="' + domId + '" style="display: none;" class="Normal"&gt;';
        s += '&lt;td&gt;';
        s += '&lt;table class="TreeNodeValue" cellpadding="0" cellspacing="0" width="100%"&gt;&lt;tr&gt;';
        s += '&lt;td class="TreeNodeLast"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
        if (domTotalCount &gt; 0) {
            s += '&lt;td class="TreeVarNodePlus" id="' + domId + 'sign" onclick="TreeExpander(\'' + domId + '\', \'TreeNode\')"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
        }
        else {
            //s += '&lt;td&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
        }
        s += '&lt;td&gt;Images Loaded During \'DOM Loading\' Interval (' + domTotalCount + ')&lt;/td&gt;';
        s += '&lt;/tr&gt;';
        s += '&lt;/table&gt;';
        s += '&lt;/td&gt;';
        s += '&lt;td&gt;&lt;b&gt;' + domTotalSizeParam + '&lt;/b&gt;&amp;nbsp;&lt;/td&gt;';
        s += '&lt;td&gt;&amp;nbsp;&lt;/td&gt;';
        s += '&lt;td&gt;&amp;nbsp;&lt;/td&gt;';
        s += '&lt;/tr&gt;';
        
        s += FillCollection(beforeDom, domHasOtherRow, domTotalSize, domTotalCount, domId + ".0");
        
        // end of DOM row
        
        // Peripheral row
        
        //s += ModulesExpandRowContent('Images Loaded During \'Peripheral Loading\' Interval (' + peripheralTotalCount + ')', peripheralId, 'Plus', peripheralTotalSizeParam, peripheralHasOtherRowParam, null, null, "", "", "");	
        
        s += '&lt;tr id="' + peripheralId + '" style="display: none;" class="Normal"&gt;';
        s += '&lt;td style="width: 32%"&gt;';
        s += '&lt;table class="TreeNodeValue" cellpadding="0" cellspacing="0" width="100%"&gt;&lt;tr&gt;';
        s += '&lt;td class="TreeNodeLast"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
        if (peripheralTotalCount &gt; 0) {
            s += '&lt;td class="TreeVarNodePlus" id="' + peripheralId + 'sign" onclick="TreeExpander(\'' + peripheralId + '\', \'TreeNode\')"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
        }
        else {
            //s += '&lt;td&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
        }
        s += '&lt;td&gt;Images Loaded During \'Peripheral Loading\' Interval (' + peripheralTotalCount + ')&lt;/td&gt;';
        s += '&lt;/tr&gt;';
        s += '&lt;/table&gt;';
        s += '&lt;/td&gt;';
        s += '&lt;td&gt;&lt;b&gt;' + peripheralTotalSizeParam + '&lt;/b&gt;&amp;nbsp;&lt;/td&gt;';
        s += '&lt;td&gt;&amp;nbsp;&lt;/td&gt;';
        s += '&lt;td&gt;&amp;nbsp;&lt;/td&gt;';
        
        s += '&lt;/tr&gt;';
        s += FillCollection(afterDom, peripheralHasOtherRow, peripheralTotalSize, peripheralTotalCount, peripheralId + ".0");
        
        // end of Peripheral row		
    }
    else {
        s += ModulesExpandRowContent('Total', id, 'Plus', '0', /*Omit Expander*/true, null, null, "", "", "");
    }
    return s;
}

// &lt;-- Stanisalv S.Kuvshinov (23.07.2008) : 'n/a' used as Size value for case when we haven't succeed in getting size.
function buildByteResources(resources, totalSize, firstColName, secondColName, totalCount, id, fileType)
{
    //var badRowHint = 'Resource file size hasn\'t been calculated because browser has abilities limitations or file cannot be accessed.';
    var badRowHint = 'Resource file size has not been collected due to browser or access restrictions.';
    var badTotalRowHint = '"More than" estimate used because some Resource file(s)\'s size hasn\'t been calculated (see appropriate row(s) for details).';
    var theWorstTotalRowHint = 'Total size hasn\'t been calculated because All Resource files\' size hasn\'t been calculated (see row(s) for details).';

    var s = '';
    s += '&lt;col style="width: 45%" /&gt;&lt;col style="width: 40%" /&gt;';
    s += '&lt;tr&gt;&lt;th class="TreeVarHeader1"&gt;' + firstColName + '&lt;/th&gt;&lt;th class="TreeVarHeader2"&gt;' + secondColName + '&lt;/th&gt;&lt;/tr&gt;';
        
    var hasOtherRow = false;
    if (typeof (totalCount) != 'undefined')
    {
        if (totalCount &gt; resources.length)
        {
            hasOtherRow = true;
        }
    }
    
    if (totalCount &gt; 0)
    {
        if (totalSize &lt; 0)
        {
            s += ModulesExpandRowContent('Total', id, 'Plus', '&gt; ' + addCommas((totalSize * (-1)))); 
        }
        else if (totalSize == 0)
        {
            s += ModulesExpandRowContent('Total', id, 'Plus', 'n/a');
        }
        else
        {
            s += ModulesExpandRowContent('Total', id, 'Plus', addCommas(totalSize)); 
        }
    }
    else
    {
        s += ModulesExpandRowContent('Total', id, 'Plus', '0', !hasOtherRow); 
    }
   
    var listedFilesSize = 0;
    var hasNA = false;
    var rowType = 'middle';
    //debugger;
    var pageDomain = "";
    if(_csm_PageUrl &amp;&amp; _csm_PageUrl != null)
    {
         pageDomain = ExtractDomainFromURL(_csm_PageUrl);
    }
    for (var i = 0; i &lt; resources.length; i++)
    {
        if ((i == (resources.length - 1)) &amp;&amp; (!hasOtherRow))
        {
            rowType = 'last';
        }
        
        var resource = resources[i];
        var domain = "";

        if(pageDomain.length &gt; 0 &amp;&amp; resource[2])
        {
            domain = ExtractDomainFromURL(resource[2]);
            if(domain.toLowerCase() == pageDomain.toLowerCase())
            {
                domain = "";
            }
        }
        
        if (resource[1] &gt;= 0)
        {
            s += ModulesRowContent(rowType, resource[0], addCommas(resource[1]), id, 'none', [resource[2], resource[resource.length]/*undefined*/], fileType);
            listedFilesSize += parseInt(resource[1]);
        }
        else if(domain.length &gt; 0)
        {
            s += ModulesRowContent(rowType, resource[0], 'n/a (&lt;span style="color: Gray"&gt;&lt;i&gt;[' + domain + ']&lt;/i&gt;&lt;/span&gt;)', id, 'none', [resource[2], badRowHint], fileType);
            hasNA = true;
        }
        else{
            s += ModulesRowContent(rowType, resource[0], 'n/a', id, 'none', [resource[2], badRowHint], fileType);
            hasNA = true;
        }
    }
            
    if (hasOtherRow)
    {
        var diff = totalCount - resources.length;
        var restSize = '';
        if ((listedFilesSize &gt; 0) &amp;&amp; (totalSize &gt; 0))
        {
            restSize = totalSize - listedFilesSize;
            if (hasNA)
            {
                restSize = 'n/a ( ~ ' + restSize + ')';
            }
        }

        s += ModulesRowContent('low', 'other (' + diff + ')', addCommas(restSize), id, 'none', resources[resources.length]/*undefined*/, fileType);
    }

    return s;
}

// Extract domain from URL
function ExtractDomainFromURL(url)
{
    var result = "";
    
    if(url.toLowerCase().indexOf("http") == 0)
        {            
            var segms = url.split('/');
            if(segms.length &gt; 2)
            {
                result = segms[2];
            }
        }
    
    return result;
}

function buildFiles(files, totalSize, totalCount, id, fileType)
{
//    s += '&lt;col style="width: 60%" /&gt;&lt;col style="width: 40%" /&gt;';
//    s += '&lt;tr&gt;&lt;th class="TreeVarHeader1"&gt;Source File&lt;/th&gt;&lt;th class="TreeVarHeader2"&gt;File Size (bytes)&lt;/th&gt;&lt;/tr&gt;';	
//    for (var i = 0; i &lt; files.length; i++)
//    {
//        var file = files[i];
//        s += ModulesRowContent('noNodeSpace', file[0], file[1], 0, 'block'); 	   
//    }	
//    s += ModulesRowContent('total', 'Total', totalSize, 0, 'block');     
    return buildByteResources(files, totalSize, "Source File", "File Size (bytes)", totalCount, id, fileType);
}

function buildParameters(parameters, firstColName, secondColName, firstColWidthPercent)
{
    var s = '';
    
    var colWidth = 60;    
    if (typeof(firstColWidthPercent) != "undefined")
    {
        colWidth = parseInt(firstColWidthPercent);
    }
    
    s += '&lt;col style="width: ' + colWidth + '%" /&gt;&lt;col style="width: '+ (100 - colWidth) + '%" /&gt;';
    s += '&lt;tr&gt;&lt;th class="TreeVarHeader1"&gt;' + firstColName + '&lt;/th&gt;&lt;th class="TreeVarHeader2"&gt;' + secondColName + '&lt;/th&gt;&lt;/tr&gt;';	
    for (var i = 0; i &lt; parameters.length; i++)
    {
        var parameter = parameters[i];
        s += ModulesRowContent('simple', parameter[0], parameter[1], 0, 'block'); 	   
    }	
    return s;
}

function buildHtmlBody(totalSize, totalCount)
{    
    var s = buildFiles([], totalSize, totalCount);
    return s;
}

function buildViewstate(totalSize, totalCount)
{    
    var s = buildFiles([], totalSize, totalCount);
    return s;
}

function buildImages(images, totalSize, totalCount, beforeDomCount, beforeDomSize)
{
    //var s = buildFiles(images, totalSize, totalCount, 'idImages', 'image');
    var s = buildByteResourcesEx(images, totalSize, "Source File", "File Size (bytes)", totalCount, 'idImages', 'image', 'Loading Time (ms)', beforeDomCount, beforeDomSize, 'Loading Scope (ms)');
    return s;
}

function buildJavaScripts(javaScripts, totalSize, totalCount)
{    
    var s = buildFiles(javaScripts, totalSize, totalCount, 'idJavaScripts', 'text');
    return s;
}

function buildCssStyles(cssStyles, totalSize, totalCount)
{
    var s = buildFiles(cssStyles, totalSize, totalCount, 'isCssStyles', 'text');
    return s;
}

function buildHtcBehaviors(htcBehaviors, totalSize, totalCount)
{
    var s = buildFiles(htcBehaviors, totalSize, totalCount, 'idHtcBehaviors', 'text');
    return s;
}

function buildBrowserCapabilities(parameters)
{
    return buildParameters(parameters, 'Name', 'Value', 30);
}

function buildPageInfo(parameters)
{
    var tableBody = '&lt;table cellpadding="0" cellspacing="0" class="Tab"&gt;&lt;tr&gt;&lt;td class="TabContent"&gt;';
    tableBody += '&lt;div id="' + id + 'content1"&gt;&lt;table cellpadding="0" cellspacing="0" class="TreeVar"&gt;';
    tableBody += CreateTreeListView(parameters, true);
    //tableBody += buildParameters(parameters, 'Name', 'Value', 30);
    tableBody += '&lt;/table&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;';
    return tableBody;
}

function buildEndUserInformation(parameters)
{
    return buildParameters(parameters, 'Name', 'Value', 30);
    //return CreateTreeListView(parameters, true);
}

function buildPageParameters(parameters, totalSize)
{   
    var s = '';    
    
    s += '&lt;col style="width: 39%" /&gt;&lt;col style="width: 20%" /&gt;';
    s += '&lt;tr&gt;&lt;th class="TreeVarHeader1"&gt;Name&lt;/th&gt;&lt;th class="TreeVarHeader2"&gt;Size (bytes)&lt;/th&gt;&lt;/tr&gt;';
        
    // total row
    s += '&lt;tr class="Normal"&gt;';
    s += '&lt;td style="width: 32%;"&gt;';
    s += '&lt;table class="TreeNodeValue" cellpadding="0" cellspacing="0"&gt;';
    s += '&lt;tr id="1"&gt;';	
    s += '&lt;td class="TreeVarNodePlus" id="1sign" onclick="TreeExpander(\'1\', \'TreeNode\')"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';	
    s += '&lt;td&gt;&lt;/td&gt;';
    s += '&lt;td&gt;&lt;b&gt;Total&lt;/b&gt;&lt;/td&gt;';
    s += '&lt;/tr&gt;';
    s += '&lt;/table&gt;';
    s += '&lt;/td&gt;';
    var totalSizeValue = "n/a";
    if (parseFloat(totalSize) &gt; -1) {
        totalSizeValue = totalSize;
    }
    s += '&lt;td&gt;&lt;b&gt;' + addCommas(totalSizeValue) + '&lt;/b&gt;&amp;nbsp;&lt;/td&gt;';
    s += '&lt;/tr&gt;';
    // end of total row
    
    if(typeof(parameters) != "undefined" &amp;&amp; parameters != null) // Stanislav S.Kuvshinov (09.25.2008): check added.
    {
        // html row
        var html = parameters[0];	
        var htmlValue = html[1];
        if (htmlValue &lt; 0) {
            htmlValue = "n/a";
        }
        s += '&lt;tr id="1.0" style="display: none;" class="Normal"&gt;';
        s += '&lt;td style="width: 32%"&gt;';
        s += '&lt;table class="TreeNodeValue" cellpadding="0" cellspacing="0" width="100%"&gt;&lt;tr&gt;';
        s += '&lt;td class="TreeNodeLast"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
        s += '&lt;td class="TreeVarNodePlus" id="1.0sign" onclick="TreeExpander(\'1.0\', \'TreeNode\')"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';    
        s += '&lt;td&gt;' + html[0] + '&lt;/td&gt;';
        s += '&lt;/tr&gt;';
        s += '&lt;/table&gt;';
        s += '&lt;/td&gt;';
        s += '&lt;td&gt;' + addCommas(htmlValue) + '&lt;/td&gt;';
        s += '&lt;/tr&gt;';
        // end of html row
            
        // viewstate row
        var viewstate = parameters[1];
        var viewStateValue = viewstate[1];
        var valueHint = '';
        if (viewStateValue == -1)
        {
            viewStateValue = "n/a";
            valueHint = ' title="Size of __VIEWSTATE hidden field cannot be calculated."';
        }
        else if (viewStateValue == 0)
        {
            valueHint = ' title="__VIEWSTATE hidden field is absent on the page."';
        }
        s += '&lt;tr id="1.0.0" style="display: none;" class="Normal"&gt;';
        s += '&lt;td style="width: 32%"&gt;';
        s += '&lt;table class="TreeNodeValue" cellpadding="0" cellspacing="0" width="100%"&gt;&lt;tr&gt;';
        s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
        s += '&lt;td class="TreeNodeLast"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';    
        s += '&lt;td&gt;' + viewstate[0] + '&lt;/td&gt;';
        s += '&lt;/tr&gt;';
        s += '&lt;/table&gt;';
        s += '&lt;/td&gt;';
        s += '&lt;td' + valueHint + '&gt;' + addCommas(viewStateValue) + '&lt;/td&gt;';
        s += '&lt;/tr&gt;';
    }
    // end of viewstate row
    
    return s;
}

function OpenNodeContent(id, tabName, totalSize, totalCount, images, javaScripts, cssStyles, htcBehaviors,
    browserCapabilitiesParameters, endUserInformationParameters, pageParameters, scriptSubscription, beforeDomCount, beforeDomSize)
{
    var activeTab = 0;

    var s = '';
    
    s += TableHead('Tab');	
        
    var tableBody = '';
    tableBody += '&lt;div id="' + id + 'content1"&gt;';
    tableBody += '&lt;table cellpadding="0" cellspacing="0" class="TreeVar"&gt;';
    
    var tableHeader = tabName;

    switch (tabName)
    {
        case 'PageParameters':
            tableBody += buildPageParameters(pageParameters, totalSize, javaScripts[javaScripts.length]/*undefined*/);
            tableHeader = "Page";
            break;
        case 'Viewstate':
            tableBody += buildViewstate(totalSize, javaScripts[javaScripts.length]/*undefined*/);
            break;
        case 'Images':
            tableBody += buildImages(images, totalSize, totalCount, beforeDomCount, beforeDomSize);
            break;
        case 'Scripts':
            itemsCount = javaScripts.length;
            tableBody += buildJavaScripts(javaScripts, totalSize, totalCount);
            break;
        case 'CSS':
            tableBody += buildCssStyles(cssStyles, totalSize, totalCount);
            tableHeader = 'Cascading Style Sheets';
            break;
        case 'HTC':
            tableBody += buildHtcBehaviors(htcBehaviors, totalSize, totalCount);
            tableHeader = 'HTC Behaviors';
            break;
        case 'JavaScript':
            tableBody += buildParameters(scriptSubscription, 'Name', 'Value', 30);
            tableHeader = 'Event Handler';
            break;
        case 'Browser Capabilities':
            tableBody += buildBrowserCapabilities(browserCapabilitiesParameters);
            break;
        case 'End User Information':
            tableBody += buildEndUserInformation(endUserInformationParameters);
            break;
        default:
            break;
    }
    
    //TabBookmarks	
    s += '&lt;tr&gt;';
    s += '&lt;td&gt;&lt;table class=TableBookmark cellspacing=0 cellpadding=0 border=0&gt;&lt;tr&gt;';
    
    if (totalCount !== '')
    {
        tableHeader += ' (' + totalCount + ')';
    }
    
    s += TabBookmark(id, 0, activeTab, tableHeader);
    s += '&lt;td class=TabBookmarkEmpty&gt;&amp;nbsp;&lt;/td&gt;';
    s += '&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;';
    s += '&lt;/tr&gt;';
    
    //Tabs content
    s += '&lt;tr&gt;&lt;td class="TabContent"&gt;';	
    
    s += tableBody;

    s += '&lt;/table&gt;&lt;/div&gt;';		

    return s;	
}

function TransformToMSDNFormat (functionName) 
{
    if (functionName.indexOf ('.ctor') &gt; 0) {
        var regExp = new RegExp("\\.(.[^\.]+)\.\.ctor$", "gi");
        if ((result = regExp.exec (functionName)) != null) {
            functionName = functionName.replace(/\.ctor/, result[1]);
        }
    }
    
    return functionName;
}

function TreeExpander(itemId, prefix)
{
    var objSign = document.getElementById(itemId + 'sign');  
    var i = 0;
    
    if (objSign.className.indexOf('Minus') &gt; 0)
    {
        objSign.className = prefix + 'Plus';
        while (document.getElementById(itemId + '.' + i)){
            ShowHide(0, itemId + '.' + i);
            
            var objSubSign = document.getElementById(itemId + '.' + i + 'sign');
            if (objSubSign)
                if (objSubSign.className.indexOf('Minus') &gt; 0)
                    TreeExpander(itemId + '.' + i, prefix)
            i ++;
        }			
    }	
    else if (objSign.className.indexOf('Plus') &gt; 0)
    {
        objSign.className = prefix + 'Minus';
        while (document.getElementById(itemId + '.' + i)){
            ShowHide(1, itemId + '.' + i);
            i ++;
        }			
    }
}

function GlobalTreeExpander(itemId, showobj, prefix)
{
    var objSign = document.getElementById(itemId);  
   
    
    if (objSign.className.indexOf('Minus') &gt; 0)
    {
        objSign.className = prefix + 'Plus';		
        ShowHide(0, showobj);	      	
    }	
    else if (objSign.className.indexOf('Plus') &gt; 0)
    {
        objSign.className = prefix + 'Minus';
        ShowHide(1, showobj);	
    }
}


function SetTabValue(tabControlId, value){
    var i = 0;
 
    while (document.getElementById(tabControlId + i)){
        if (i == value){
            document.getElementById(tabControlId + i).className = "TabBookmarkSel";
            ShowHide(1, tabControlId + 'content' + i);
        } else {
            document.getElementById(tabControlId + i).className = "TabBookmark";
            ShowHide(0, tabControlId + 'content' + i);	    
        }    
        i ++;
    }
}


function ShowTab (id, tabNumber) {
    var obj = document.getElementById(id); 
    var row = obj.parentElement.parentElement.rows[1];
    if (typeof(row) == 'undefined' || row.style.display == 'none') {
        obj.fireEvent("onClick");
    }
    document.getElementById(id + tabNumber).fireEvent('onClick');    
    window.event.cancelBubble = true;    
}

function ShowFuncLines(val) {      
    if (val.checked)
        ShowHide(1, "funcLines");    
    else    
        ShowHide(0, "funcLines");    
}

function ShowFuncParams(val) 
{  
    ShowHide(val.checked ? 1 : 0, "funcParams");
}

function ShowLow(val)
{      
    if (val.checked) {
        ShowHide(1, "Low");
        ShowHide(0, "Dots");
    }
    else {
        ShowHide(0, "Low");
        ShowHide(1, "Dots");
    }
}

function ShowLowEx(val){      
    if (val.className.indexOf('Minus') &gt; 0)
    {
        val.className = 'TreeNodePlus';
        ChangeExceptionData('1');
        ShowHide(0, "LowEx");    
    }
    else    
    {
        val.className = 'TreeNodeMinus';
        ShowHide(1, "LowEx");    
    }
}

function ShowHide(mode, child)
{
    var objColl = document.all(child);	
        
    if(objColl == null) return;
    
    if (typeof(objColl.length) == 'undefined')
    {
        if (mode == 0)
            objColl.style.display = 'none';
        else
            objColl.style.display = '';
        
        return;
    }
    
    for (var i = 0; i &lt; objColl.length; i++)
    {
        if (mode == 0)
            objColl[i].style.display = 'none';
        else
            objColl[i].style.display = '';
            
    }
}

function ModulesExpander(obj, id, prefix){
    if (obj.className.indexOf('Minus') &gt; 0)
    {
        obj.className = 'TreeVarNodePlus';		
        ShowHide(0, id);    
    }
    else    
    {
        obj.className = 'TreeVarNodeMinus';
        ShowHide(1, id);    
    }
}

function ModulesContent(position, name, version, dateModified, path, pdbPath)
{
    var s = ModulesExpandRowContent(name + ', ' + version, position + 'module', 'Plus');
    s += ModulesRowContent(false, 'Date Modified', dateModified, position + 'module', 'none'); 
    s += ModulesRowContent(true, 'Assembly Path', path, position + 'module', 'none');  
//  CLRX events don't contain PDB path	
//	s += ModulesRowContent(true, 'Symbols Path', pdbPath, position + 'module', 'none');  
    return s;
}

//2007-01-15, A.Golovkov
//script for aspects expander
function AspectsExpander(obj, id, prefix){
    if (obj.className.indexOf('Minus') &gt; 0)
    {
        obj.className = 'TreeVarNodePlus';		
        ShowHide(0, id);    
    }
    else    
    {
        obj.className = 'TreeVarNodeMinus';
        ShowHide(1, id);    
    }
}
//2007-01-15, A.Golovkov

function ChangeExceptionData(objId)
{	
    ChangeSelection(objId + 'ev' + 'exName', 'exceptionName', 'Name');
    //ChangeSelection(objId + 'ev'  + 'exValue', 'exceptionValue', 'Value');
//	ChangeException(objId, 'stackelem');
    ChangeException(objId + 'ev', 'exceptiondata');
    
    ChangeExceptionHeaderSelection (objId);
}

//  Change selection on the Exception line placed on top of the stack trace
function ChangeExceptionHeaderSelection (objId) 
{
    var counter = 1;
    var obj = document.getElementById('1sp1ex');
    while (obj != null) 
    {
        if (counter == objId) 
        {
            var row = obj.parentElement.parentElement.rows[1];
            if (typeof(row) == 'undefined' || row.style.display == 'none') {
                obj.fireEvent("onClick");
            }
            
            var index = obj.className.indexOf ("Selected");
            if (index == -1) {
                obj.className += "Selected";
            }
        } 
        else 
        {
            var index = obj.className.indexOf ("Selected");
            if (index != -1) {
                obj.className = obj.className.substr (0, index);
            }
        }
        
        counter++;
        var obj = document.getElementById('1sp' + counter + 'ex');
    }
}

function ChangeSelection(objId, tableId, style)
{
    objTable = document.all(tableId);	
    
    for (var i = 0; i &lt; objTable.length; i++)
    {
        objRow = objTable[i].rows[0];		
        objField = objRow.lastChild;			
        
        if (objRow.id == objId)					
            objField.className = "Field" + style + "Selected";		
        else
            objField.className = "Field" + style;			
    }		
    
    return objTable.innerHTML;	
}

function ChangeException(objId, curId)
{	
    arrStacks = document.all(curId);
    for (var i = 0; i &lt; arrStacks.length; i++)
    {		
        if (arrStacks[i].mainId == objId)
            arrStacks[i].style.display = 'block'
        else		
            arrStacks[i].style.display = 'none'			
    }
}

function InsertWhiteSpaces(entryId, isLast)
{	
    var s = '&lt;table cellpadding="0" cellspacing="0" class="ExceptionTreeImage"&gt;&lt;tr&gt;';
    s += '&lt;td class="' + (isLast ? 'TreeNodeLast' : 'TreeNodeMiddle') + '"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;'
    s += '&lt;/table&gt;&lt;/tr&gt;';	
    
    return s;
}

function HightLightTab(flagHightLight)
{
    var el = event.srcElement;
    while(el.tagName != "TD") el = el.parentElement;
    if(el.className != 'TabBookmarkSel')
    {
        if(flagHightLight)
            el.className = 'TabBookmarkActive';
        else
            el.className = 'TabBookmark';
    }
}

function FuncImage(isHi){
    return '&lt;td class="TreeNodeImage"&gt;&lt;li class="TreeNodeTypeFun' + (isHi ? 'Hi' : '') + '"&gt;&lt;/li&gt;&lt;/td&gt;';
}

function OpenContentForHigh(){
    var obj = document.getElementById('High');
    if (obj != null)
        obj.firstChild.onclick();
}


//functions for opening exception source via Intercept Plugin
var defaultPath = 'www.avicode.com';

function OpenSource(sourceName, fileName, lineNumber){	
    try
    {
        var objDteManager = new ActiveXObject("InterceptVSPlugin.Automation.1")
    
        bRes = objDteManager.OpenSource(sourceName, fileName, lineNumber);		
        if(!bRes)
            alert("Application Diagnostics and Visual Studio integration is not properly configured on the system.");	
    }
    catch(e){
        Install();
    }
}	

function Install(){
    
    //AGolovkov
    //detecting if the client system is 32 or 64-bit
    var sysPluginPath = pluginPath;
    if(navigator.appVersion.toUpperCase().indexOf("WOW64") &gt; -1)
        sysPluginPath = plugin64Path;
    
    var displayPath = defaultPath;
    
    if (sysPluginPath != defaultPath)
        displayPath = "Application Diagnostics computer";
        
    if (window.confirm("SCOM Visual Studio Plug-In is not installed. Do you want to install it?"))	
    {
        if (sysPluginPath == defaultPath)
            window.open("http://www.avicode.com/intercept/InterceptV2VSPluginDownload.asp");
        else
            window.open(sysPluginPath);
    }
}

function GetProfessionalLicenseLimitationMessage(unavailableInformation)
{
    var message = professionalLicenseLimitationTemplate.replace("#UnavailableInformation", unavailableInformation);
    message = "&lt;div class=\"handlerLicenseMessage\"&gt;" + message + "&lt;/div&gt;";
    return message;
}

function StrDecoder(strToDecode) 
{
        var decodeString = strToDecode.replace(/&amp;lt;br&amp;gt;/g, "&lt;br&gt;");
        decodeString = decodeString.replace(/\&amp;amp;quot;/g, "&amp;quot;");
        decodeString = decodeString.replace(/&amp;amp;lt;/g, "&amp;lt;");
        decodeString = decodeString.replace(/&amp;amp;gt;/g, "&amp;gt;");
        decodeString = decodeString.replace(/&amp;amp;#39;/g, "&amp;#39;");

        return decodeString;
}

function ContentCreator(containerId, child, tabName, totalSize, totalCount, images, javaScripts, cssStyles, htcBehaviors,
     browserCapabilitiesParameters, endUserInformationParameters, pageParameters, scriptSubscription, beforeDomCount, beforeDomSize)
{
    var container = document.getElementById(containerId);
    if (container)
    {
        var div = document.createElement('DIV');
//       if (tabName == 'Images')
//       {
//            var s = OpenNodeContent(child, tabName, totalSize, totalCount, images, javaScripts, cssStyles, htcBehaviors,
//                            browserCapabilitiesParameters, endUserInformationParameters, pageParameters, beforeDomCount);
//           var textarea = document.createElement('textarea');
//           textarea.value = s;
//           container.appendChild(textarea);
//       }
        div.innerHTML = OpenNodeContent(child, tabName, totalSize, totalCount, images, javaScripts, cssStyles, htcBehaviors,
                            browserCapabilitiesParameters, endUserInformationParameters, pageParameters, scriptSubscription, beforeDomCount, beforeDomSize);
        container.appendChild(div);
    }
}

// Format number - add commas to separate sousands.
function addCommas(nStr)
{
    nStr += '';
    x = nStr.split('.');
    x1 = x[0];
    x2 = x.length &gt; 1 ? '.' + x[1] : '';
    var rgx = /(\d+)(\d{3})/;
    while (rgx.test(x1)) {
        x1 = x1.replace(rgx, '$1' + ',' + '$2');
    }
    return x1 + x2;
}

//function CreateRow(rowType, title, value, tooltipText, id, style, entityClass){
//    var s = '&lt;tr id="' + id + '" style="Display:' + style + ';" class="Normal"&gt;';
//    s += '&lt;td style="width: 32%"&gt;';
//    s += '&lt;table class="TreeNodeValue" cellpadding="0" cellspacing="0" width="100%"&gt;&lt;tr&gt;';
//    var totalStyle = '';
//    rowType = rowType.toString();
//    rowType = rowType.toLowerCase();
//    
//    switch (rowType) {
//        case 'last':
//            // Add padding        
//            //s += '&lt;td&gt;&lt;div style="width: 8px"&gt;&lt;/div&gt;&lt;/td&gt;';
//            // Last node picture.
//            s += '&lt;td class="TreeNodeLast"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
//            break;
//        case 'middle':
//            // Add padding        
//            //s += '&lt;td&gt;&lt;div style="width: 8px"&gt;&lt;/div&gt;&lt;/td&gt;';
//            // Middle node picture.
//            s += '&lt;td class="TreeNodeSibling"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
//            break;
//        case 'simple':
//            // Simple node picture.
//            s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
//            s += '&lt;td class="TreeNodeTypeSimple"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
//            break;
//        case 'nonodespace':
//            // Without node space and node picture.
//            break;
//        default:
//            // Node space without picture.
//            s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
//            break;
//    }
//    
//    if (typeof(entityClass) != "undefined")
//    {
//	    switch (entityClass)
//	    {
//	        case 'simple':
//	            s += '&lt;td class="TreeNodeTypeSimple"&gt;&lt;/td&gt;';
//	            break;
//	        case 'class':
//	            s += '&lt;td class="TreeNodeTypeClass"&gt;&lt;/td&gt;';
//	            break;
//	        default:
//	            break;
//	    }
//	}
//    
//    var hint = ' title="' + tooltipText + '"';
//    
//    s += '&lt;td' + totalStyle + hint + '&gt;' + (title == '' ? '&amp;nbsp;' : title) + '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;';
//    s += '&lt;td' + hint + '&gt;' + (value == '' ? '&amp;nbsp;' : value) + '&lt;/td&gt;&lt;/tr&gt;';
//    return s;
//}

//function CreateTreeListView(parameters, addHeader, parentId){
//        var s = '';
//        var style = 'middle';  
//        var entityClass = 'simple';      
//        var id = 'TreeViewId'+newId();
//        
//        
//        if(addHeader)
//        {
//            s += '&lt;col style="width: 40%" /&gt;&lt;col style="width: 60%" /&gt;';
//            s += '&lt;tr&gt;&lt;th class="TreeVarHeader1"&gt;Name&lt;/th&gt;&lt;th class="TreeVarHeader2"&gt;Value&lt;/th&gt;&lt;/tr&gt;';
//            style = 'simple';
//            entityClass = '';
//        }
//        
//        for (var i = 0; i &lt; parameters.length; i++) {
//            var parameter = parameters[i];
//            if(typeof(parameter[3]) == "undefined" || parameter[3] == null)
//            {
//                
//                if (typeof(parentId) != "undefined" &amp;&amp; parentId != null)
//                {
//                    id = parentId + '_childId';
//                }
//                else
//                {
//                    id += +newId();
//                }
//                
//                if(i == parameters.length -1 &amp;&amp; !addHeader)
//                {
//                    style = 'last';
//                }
//                
//                if(parameter[0].indexOf("Network Request") &gt; -1 || parameter[0].indexOf("Server Response Time") &gt; -1)
//                {
//                    entityClass = "class";
//                }
//                
//                if(parameter[0].indexOf("Request Bandwidth") &gt; -1 || parameter[0].indexOf("Response Bandwidth") &gt; -1)
//                {
//                    entityClass = "bandwidth";
//                }
//                
//                s += CreateRow(style, parameter[0], parameter[1], parameter[2], id, 'block', entityClass);
//            }
//            else
//            {
//                childId = id + '_childId';
//                var eClass = 'class';
//                if(parameter[2] == 'customList')
//                    eClass = parameter[2];
//                s += ModulesExpandRowContent(parameter[0], childId, 'Minus', ((parameter[1] != null) ? parameter[1] : ''), false, parameter[2], 'font-weight: normal', eClass);
//                s += CreateTreeListView(parameter[3], false, id);
//            }
//        }
//        return s;
//    }
//    
//    

//function BuilSectionList(containerId, params)
//{
//    s = '';
//    var container = document.getElementById(containerId);
//    
//    s += "&lt;table class='TreeFun' cellSpacing='0' cellPadding='0'&gt;";
//    for(i=0;i&lt;params.length;i++)
//    {
//        s += BuildSectionListItem(params[i]);
//    }
//    s += "&lt;/table&gt;";

//    container.innerHTML = s;
//}


//function BuildSectionListItem(params)
//{
//    var id = "CallRow" + newId();
//    s = '&lt;tr class="treeRow"&gt;&lt;td&gt;';
//    s += '&lt;div class="TreeRow"&gt;';
//    
//    s += '&lt;div class="TreeNodeTypeFun" cancelBubble="true"&gt;&lt;/div&gt;';
//    s += '&lt;div class="TreeNodeTime"&gt;'+params[2]+'&lt;/div&gt;';
//    s += '&lt;div class="TreeNodeValue" cancelBubble="true"&gt;';

//    s += '&lt;table class="TreeNode" cellSpacing="0" cellPadding="0"&gt;';
//    s += '&lt;tr&gt;&lt;td class="TreeNodeDetailsPlus" onclick="ExpandCallRow(this, \''+id+'\', '+params[3]+');"&gt;&lt;li&gt;'+params[0]+'&lt;/li&gt;&lt;/td&gt;';
//    if(params[1] != null &amp;&amp; params[1] != "")
//    {
//        s += '&lt;td class=TreeNodePChainIn title="Chain info" onclick="'+params[1]+'"&gt;&lt;/td&gt;';
//    }
//    s += '&lt;/tr&gt;&lt;tr  id="'+id+'_content" style="display: none;"&gt;&lt;td'+((params[1] != null &amp;&amp; params[1] != "") ? ' colspan="2"' : "")+' id="'+id+'" style="padding: 5px 0 10px 0;"&gt;&lt;/td&gt;&lt;/tr&gt;';
//    s += "&lt;/table&gt;";
//    
//    s += '&lt;/div&gt;';
//    s += '&lt;/div&gt;';
//    s += '&lt;/td&gt;&lt;/tr&gt;';
//    
//    return s;
//}

//function BuildCallParams(params)
//{
//    var s = "[";

//    for(i=0; i&lt;params.length; i++)
//    {
//        var param = params[i];
//        
//        if(i&gt;0)
//        {
//            s += ", ";
//        }
//        if(typeof(param) != 'undefined' &amp;&amp; typeof(param.length) == 'undefined')
//        {
//            s += "'"+param+"'";
//        }
//        else if(typeof(param) != 'undefined')
//        {
//            s += BuildCallParams(param)
//        }
//        
//    }
//    
//    s += "]";
//    
//    return s;
//}


//function ExpandSection(oSecTitle)
//{
//    var sectionId = oSecTitle.nextSibling.id;
//    if(oSecTitle.className.indexOf("Minus") &gt; -1)
//    {
//        oSecTitle.className = "CallSectionTitlePlus";
//        ShowHide(0, sectionId);
//    }
//    else
//    {
//        oSecTitle.className = "CallSectionTitleMinus";
//        ShowHide(1, sectionId);
//    }
//}

//function ExpandCallRow(oRowTitle, containerId, params)
//{
//    var container = document.getElementById(containerId);
//    var containerRowId = container.parentElement.id;
//    
//    if(oRowTitle.className.indexOf("Minus") &gt; -1)
//    {
//        oRowTitle.className = "TreeNodeDetailsPlus";
//        ShowHide(0, containerRowId);
//    }
//    else
//    {
//        if(container.innerHTML == "")
//        {
//            BuildCallDetailsTable(containerId, params);
//        }
//        oRowTitle.className = "TreeNodeDetailsMinus";
//        ShowHide(1, containerRowId);
//    }
//}

//function BuildCallDetailsTable(containerId, params)
//{
//    s = '&lt;table cellpadding="0" cellspacing="0" class="TreeVar"&gt;';
//    s += CreateTreeListView(params, true);
//    s += '&lt;/table&gt;';
//    
//    var container = document.getElementById(containerId);
//    var div = document.createElement('DIV');
//    div.innerHTML = s;
//    container.appendChild(div);

//}


function CreateRow(rowType, title, value, tooltipText, id, style, entityClass){
    var s = '&lt;tr id="' + id + '" style="Display:' + style + ';" class="Normal"&gt;';
    s += '&lt;td style="width: 32%"&gt;';
    s += '&lt;table class="TreeNodeValue" cellpadding="0" cellspacing="0" width="100%"&gt;&lt;tr&gt;';
    var totalStyle = '';
    rowType = rowType.toString();
    rowType = rowType.toLowerCase();
    
    switch (rowType) {
        case 'last':
            s += '&lt;td class="TreeNodeLast"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
        case 'middle':
            s += '&lt;td class="TreeNodeSibling"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
        case 'simple':
            s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            //s += '&lt;td class="TreeNodeTypeSimple"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
        case 'nonodespace':
            break;
        default:
            s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
    }
    
    if (typeof(entityClass) != "undefined")
    {
        switch (entityClass)
        {
            case 'simple':
                s += '&lt;td class="TreeNodeTypeSimple"&gt;&lt;/td&gt;';
                break;
            case 'class':
                s += '&lt;td class="TreeNodeTypeClass"&gt;&lt;/td&gt;';
                break;
            case 'responseText':
                s += '&lt;td class="TreeNodeTypeFun"&gt;&lt;/td&gt;';
                break;
            default:
                break;
        }
    }
    
    var hint = ' title="' + tooltipText + '"';
    
    s += '&lt;td' + totalStyle + hint + '&gt;' + (title == '' ? '&amp;nbsp;' : title) + '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;';
    s += '&lt;td' + hint + '&gt;' + (value == '' ? '&amp;nbsp;' : value) + '&lt;/td&gt;&lt;/tr&gt;';
    return s;
}

function CreateTreeListView(parameters, addHeader, parentId){
        var s = '';
        var style = 'middle';  
        var entityClass = 'simple';

        if(addHeader)
        {
            s += '&lt;col style="width: 40%" /&gt;&lt;col style="width: 60%" /&gt;';
            s += '&lt;tr&gt;&lt;th class="TreeVarHeader1"&gt;Name&lt;/th&gt;&lt;th class="TreeVarHeader2"&gt;Value&lt;/th&gt;&lt;/tr&gt;';
            style = 'simple';
            entityClass = 'simple';
        }
        
        for (var i = 0; i &lt; parameters.length; i++) {
            var id = 'TreeViewId' + newId();
            var parameter = parameters[i];
            if(typeof(parameter[3]) == "undefined" || parameter[3] == null)
            {
                if (typeof(parentId) != "undefined" &amp;&amp; parentId != null)
                {
                    id = parentId + '_childId';
                }
                else
                {
                    id += newId();
                }
                
                if(i == parameters.length -1 &amp;&amp; !addHeader)
                {
                    style = 'last';
                }
                
                if(parameter[0].indexOf("Network Request") &gt; -1 || parameter[0].indexOf("Server Response Time") &gt; -1)
                {
                    entityClass = "class";
                }
                
                //if(parameter[0].indexOf("Response Text") &gt; -1)
                //{
                //    entityClass = "responseText";
                //}
                
                s += CreateRow(style, parameter[0], parameter[1], parameter[2], id, 'block', entityClass);
            }
            else
            {
                childId = id + '_childId';
                var eClass = 'class';
                if(parameter[2] == 'customList')
                    eClass = parameter[2];
                s += ModulesExpandRowContent(parameter[0], childId, 'Minus', ((parameter[1] != null) ? parameter[1] : ''), false, parameter[2], 'font-weight: normal', eClass);
                s += CreateTreeListView(parameter[3], false, id);
            }
        }
        return s;
    }
    
    

function BuilSectionList(containerId, params)
{
    var s = '';
    var container = document.getElementById(containerId);
    
    s += "&lt;table class='TreeFun' cellSpacing='0' cellPadding='0'&gt;";
    for(i=0;i&lt;params.length;i++)
    {
        s += BuildSectionListItem(params[i]);
    }
    s += "&lt;/table&gt;";

    container.innerHTML = s;
}


function BuildSectionListItem(params)
{
    var id = "CallRow" + newId();
    var s = '&lt;tr class="treeRow"&gt;&lt;td&gt;';
    s += '&lt;div class="TreeRow"&gt;';
    
    s += '&lt;div class="TreeNodeTypeFun" cancelBubble="true"&gt;&lt;/div&gt;';
    s += '&lt;div class="TreeNodeValue" cancelBubble="true"&gt;';

    s += '&lt;table class="TreeNode" cellSpacing="0" cellPadding="0"&gt;';
    var encodedParam3 = params[3];
    //encodedParam3 = encodedParam3.replace(/\//g, '\\/');
    //encodedParam3 = encodedParam3.replace(/\&amp;quot;/g, '\\&amp;quot;');
    //encodedParam3 = encodedParam3.replace(/\&amp;#39;/g, '\\&amp;#39;');
    s += '&lt;tr&gt;&lt;td class="TreeNodeDetailsPlus" onclick="ExpandCallRow(this, \''+id+'\', '+ encodedParam3 +');"&gt;&lt;li&gt;'+params[2]+ '&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;' +params[0]+'&lt;/li&gt;&lt;/td&gt;';
   
    if(params[1] != null &amp;&amp; params[1] != "")
    {
        s += '&lt;td class=TreeNodePChainIn title="Chain info" onclick="'+params[1]+'"&gt;&lt;/td&gt;';
    }
    s += '&lt;/tr&gt;&lt;tr  id="'+id+'_content" style="display: none;"&gt;&lt;td'+((params[1] != null &amp;&amp; params[1] != "") ? ' colspan="2"' : "")+' id="'+id+'" style="padding: 5px 0 10px 0;"&gt;&lt;/td&gt;&lt;/tr&gt;';
    s += "&lt;/table&gt;";
    
    s += '&lt;/div&gt;';
    s += '&lt;/div&gt;';
    s += '&lt;/td&gt;&lt;/tr&gt;';
    
    return s;
}

function BuildCallParams(params)
{
    var s = "[";

    for(i=0; i&lt;params.length; i++)
    {
        var param = params[i];
        
        if(i&gt;0)
        {
            s += ", ";
        }
        if(typeof(param) != 'undefined' &amp;&amp; typeof(param.length) == 'undefined')
        {
            s += "'"+param+"'";
        }
        else if(typeof(param) != 'undefined')
        {
            s += BuildCallParams(param)
        }
        
    }
    
    s += "]";
    
    return s;
}


function ExpandSection(oSecTitle)
{
    var sectionId = oSecTitle.nextSibling.id;
    if(oSecTitle.className.indexOf("Minus") &gt; -1)
    {
        oSecTitle.className = "CallSectionTitlePlus";
        ShowHide(0, sectionId);
    }
    else
    {
        oSecTitle.className = "CallSectionTitleMinus";
        ShowHide(1, sectionId);
    }
}

function ExpandCallRow(oRowTitle, containerId, params)
{
    var container = document.getElementById(containerId);
    var containerRowId = container.parentElement.id;
    
    if(oRowTitle.className.indexOf("Minus") &gt; -1)
    {
        oRowTitle.className = "TreeNodeDetailsPlus";
        ShowHide(0, containerRowId);
    }
    else
    {
        if(container.innerHTML == "")
        {
            BuildCallDetailsTable(containerId, params);
        }
        oRowTitle.className = "TreeNodeDetailsMinus";
        ShowHide(1, containerRowId);
    }
}

function BuildCallDetailsTable(containerId, params)
{
    var s = '&lt;table cellpadding="0" cellspacing="0" class="TreeVar"&gt;';
    s += CreateTreeListView(params, true);
    s += '&lt;/table&gt;';
    
    var container = document.getElementById(containerId);
    var div = document.createElement('DIV');
    div.innerHTML = s;
    container.appendChild(div);

}

// 23-DEC-2008 MShehovtsov
// Resource browser allows to view images and additional information
// in popup window by passing image url.
// Only one image can be shown in one time.
// Caches downloaded images.
// For usability reasons timers are used to show and hide popup.
var ResourceBrowser = function()
{    
    /*
    *
    * Private constants.
    *
    */

    // Sizes of popup.
    var m_popupWidth = 200;
    var m_popupHeight = 300;
    var m_popupSummaryBorder = 2;
    var m_infoContainerHeight = 26;
    var m_resourceContainerHeight = 272; // we also take into account 2px as summary border (top and bottom)
    var m_resourceWidth = 180;
    var m_resourceHeight = 250;
    var m_smallImageBorder = 1;
    
    // Timeouts.
    var m_showTimeout = 1000;
    var m_hideTimeout = 10000;
    var m_hide2Timeout = 700;
    var m_hide3Timeout = 3000;
    
    var ACTIVE_IMAGE_SIZES = 
    {
        resized: 0,
        scrolled: 1,
        initiallySmall: 2
    };
    
    /*
    *
    * Private fields.
    *
    */
    
    var m_activeImgSize = null;
    
    // Dom element that plays main container role for popup window.
    var m_popupElement = null;
    
    // Cached images as array of references to dom elements.
    // Keys in array are images' urls.
    var m_resourceElements = [];
    
    // Url of current shown in popup image.
    var m_activeResourceElementUrl = '';
    
    // Current positions of popup window.
    // Used for handle appropriate onMouseOut event 
    // (onMouseOut that fires only when mouse leaves popup window - in opposite of onMouseOut that fires when
    // mouse leaves fired dom element and goes to its child elements).
    var m_popupCurrentLeft = null;
    var m_popupCurrentTop = null;
    
    // Timers identifiers to clear appropriate timer if needed.
    var m_showTimeoutID = null;
    var m_hideTimeoutID = null;
    
    /*
    *
    * Private methods.
    *
    */    
    
    var m_allDataContainer = null;
    // Gets the dom element where all data content should be placed.
    var getAllDataContainer = function()
    {    
        var popup = getPopupElement();
        return m_allDataContainer;
    }
    
    var m_resourceContainer = null;
    // Gets the dom element where new resources should be placed.
    var getResourceContainer = function()
    {   
        var popup = getPopupElement();
        return m_resourceContainer;
    }
    
    var m_infoContainer = null;
    // Gets the dom element where resource information should be shown.
    var getInfoContainer = function()
    {
        var popup = getPopupElement();
        return m_infoContainer;
    }  
        
    var m_resourceDiv = null;
    var m_borderDiv = null;
        
    // References the popup element if exists or create it.
    var getPopupElement = function()
    {
        if (m_popupElement == null)
        {            
            // Create popup element.
            m_popupElement = document.createElement('div');   
            m_popupElement.className = 'ResourceBrowser_popupElement';
            m_popupElement.style.width = m_popupWidth + 'px';
            m_popupElement.style.height = m_popupHeight + 'px';   
            
            // Create container element to emulate shadow of popup element.
            var shadow = document.createElement('div');
            shadow.className = 'ResourceBrowser_shadow';           
            shadow.style.width = m_popupWidth + 'px';
            shadow.style.height = m_popupHeight + 'px';

            m_popupElement.appendChild(shadow);                     
            
            // Common container
            var container = document.createElement('div');
            container.className = 'ResourceBrowser_container';
            container.style.width = m_popupWidth + 'px';
            container.style.height = m_popupHeight + 'px';
            
            m_allDataContainer = container;
            
            // Create resource container.
            var resourceContainer = document.createElement('div');
            resourceContainer.className = 'ResourceBrowser_resourceContainer';
            
            // Create table for resource content. 
            // Table is needed to align resource content on center.
            var table = document.createElement('table');
            table.cellPadding = '0';
            table.cellSpacing = '0';
            table.style.width = "100%";
            table.style.height = m_resourceContainerHeight + 'px';
            var tbody = document.createElement('tbody');           
            var row = document.createElement('tr');
            var cell = document.createElement('td');       
            
            var borderDiv = document.createElement('div');     
            m_borderDiv = borderDiv;
            borderDiv.className = "ResourceBrowser_borderDiv";
            borderDiv.style.width = m_resourceWidth + 'px';
            borderDiv.style.height = m_resourceHeight + 'px';
                 
            var resourceDiv = document.createElement('div');
            resourceDiv.className = "ResourceBrowser_resourceContainerDiv";
            
            m_resourceDiv = resourceDiv;
            
            resourceDiv.style.width = m_resourceWidth + 'px';
            resourceDiv.style.height = m_resourceHeight + 'px';
            var table2 = document.createElement('table');
            table2.cellPadding = '0';
            table2.cellSpacing = '0';
            table2.style.width = "100%";
            table2.style.height = (m_resourceHeight - 20) + 'px';
            var tbody2 = document.createElement('tbody');
            var row2 = document.createElement('tr');
            var cell2 = document.createElement('td');
            cell2.align = 'center';
            cell2.valign = 'middle'; 
            
            m_resourceContainer = cell2;
            
            row2.appendChild(cell2);
            tbody2.appendChild(row2);
            table2.appendChild(tbody2);
            resourceDiv.appendChild(table2);       
            borderDiv.appendChild(resourceDiv);     
            cell.appendChild(borderDiv);
            cell.align = 'center';
            cell.valign = 'middle';                     
            row.appendChild(cell);                        
            tbody.appendChild(row);
            table.appendChild(tbody);
            
            resourceContainer.appendChild(table);
                        
            container.appendChild(resourceContainer);  
            
            // Create container for resource content info.
            var infoContainer = document.createElement('div');
            infoContainer.className = 'ResourceBrowser_infoContainer';
            infoContainer.style.height = m_infoContainerHeight + 'px';
            
            // Inner container for resource content info to set some padding styles
            var infoContainerDiv = document.createElement('div');
            infoContainerDiv.className = 'ResourceBrowser_infoContainerDiv';

            infoContainer.appendChild(infoContainerDiv);
            
            m_infoContainer = infoContainerDiv;
            
            container.appendChild(infoContainer);            
                        
            m_popupElement.appendChild(container);
            
            document.body.insertBefore(m_popupElement, document.body.firstChild);                                    
            
            // Define event handlers for resource container.
            container.onmouseout = function()
            { 
                var evnt = { }; 
                evnt.clientX = event.clientX; 
                evnt.clientY = event.clientY; 
                updateHideTimeout(evnt, m_hide2Timeout); 
            };
            container.onmousemove = function(){ updateHideTimeout(); };
            container.onmousewheel = function(){ updateHideTimeout(); };
            container.onclick = function()
            { 
                updateHideTimeout(); 
                showResourceElement(m_activeResourceElementUrl, true); 
                showInfo(m_activeResourceElementUrl); 
            };
            container.onscroll = function(){ updateHideTimeout(); };
        }
        return m_popupElement;
    }  
        
    var calculatePopupYTop = function(mouseY)
    {
        var yBottom = mouseY;
        var bodyPadding = 5; // Padding to top body border.
        var diff = m_popupHeight + bodyPadding - mouseY;
        if (diff &gt; 0)
        {
            yBottom += diff;
        }
        var yTop = yBottom - m_popupHeight;
        return yTop;
    }
    
    var calculatePopupXLeft = function(mouseX, indent)
    {
        var xLeft = mouseX + indent;
        var bodyPadding = 5; // Padding to right body border.
        var diff = m_popupWidth + xLeft + bodyPadding - document.body.offsetWidth;
        if (diff &gt; 0)
        {
            xLeft -= diff;
        }
        return xLeft;
    }
    
    // Show popup window with its content.
    var displayPopup = function(x, y, url)
    {       
        m_activeResourceElementUrl = url;
        displayResourceElement(url);
        
        var popup = getPopupElement();   
        
        m_popupCurrentLeft = calculatePopupXLeft(x, 10);
        m_popupCurrentTop = calculatePopupYTop(y);
        
        // Refer to ResourceBrowser.hide() method to view the logic of hide the element.
        popup.style.left = m_popupCurrentLeft;
        popup.style.top = m_popupCurrentTop;
    }
    
    // Add reference to dom element (that actually is shown resource element) to array of elements.
    var addResourceElement = function(element, url)
    {    
        m_resourceElements[url] = element;    
    }
    
    // Hide active resource element.
    var hideActiveResourceElement = function()
    {
        if (m_activeResourceElementUrl != '')
        {
            m_resourceElements[m_activeResourceElementUrl].style.display = 'none';
        }
    }
    
    // Hide popup window.
    // If 'evnt' event reference is specified then hide it only if 
    // mouse went out of popup window.
    var hide = function(evnt)
    {      
        if (!evnt ||
            evnt.clientX &lt;= m_popupCurrentLeft || 
            evnt.clientX &gt;= m_popupCurrentLeft + m_popupWidth || 
            evnt.clientY &lt;= m_popupCurrentTop || 
            evnt.clientY &gt;= m_popupCurrentTop + m_popupHeight)
        {        
            // Hide active element in window to prevent blink on next show.
            hideActiveResourceElement();
            
            // Hide popup window.
            // Shift element to invisible area instead of 
            // set style.display to 'none' to provide ability to get
            // real size of image in this element immediateli after
            // setting its .width property.
            // Without it if img have width = M and we set img.width = N
            // and popupElement.style.display equals to 'none' then 
            // img.width will be equals to N only after setting popupElement.style.display to 'block'.
            // But we have a few places in this code where we reference to img.width 
            // while popupElement is not displayed and expect the updated value of img.width.
            getPopupElement().style.top = '-10000px';
        }
    }
    
    // Updates timeout to hide image.
    // Use timeout value if specified or default value.
    var updateHideTimeout = function(evnt, timeout)
    {        
        clearPopupTimeout(m_hideTimeoutID);
        
        // Define the callback to handle timeout and start timer to hide image.
        m_hideTimeoutID = setTimeout(
            function()
            { 
                hide(evnt); 
            }, 
            typeof(timeout) != "undefined" ? timeout : m_hideTimeout
        );
    }
    
    // Set 'cursor' style for popup as 'pointer' if image can be resized.
    var updatePopupStyle = function(url)
    {    
        var activeImg = m_resourceElements[url];
        
        // Set cursor style to 'pointer' if we can resize image.
        var cursorStyle = "";
        if (activeImg.initialWidth != activeImg.resizedWidth || activeImg.initialHeight != activeImg.resizedHeight)
        {
            cursorStyle = "pointer";     
        }
        
        getAllDataContainer().style.cursor = cursorStyle;
    }
    
    // Set InfoContainer css class for large non-resized, resized or small active image.
    var updateInfoContainerStyle = function(activeImg)
    {
        var infoContainer = getInfoContainer();
        
        switch (m_activeImgSize)
        {
            case ACTIVE_IMAGE_SIZES.resized:
                infoContainer.className = "ResourceBrowser_infoContainerDiv_zoomIn";
                m_borderDiv.className = "ResourceBrowser_borderDiv";
                break;
            case ACTIVE_IMAGE_SIZES.scrolled:
                infoContainer.className = "ResourceBrowser_infoContainerDiv_zoomOut";
                m_borderDiv.className = "ResourceBrowser_borderDivScroll";
                break;
            case ACTIVE_IMAGE_SIZES.initiallySmall:     
                infoContainer.className = "ResourceBrowser_infoContainerDiv";
                m_borderDiv.className = "ResourceBrowser_borderDiv";
                break;
        }
    }    
     
    // Build and show image size (or status of image if it is still loading or unavailable).    
    var showInfo = function(url)
    {      
        var activeImg = m_resourceElements[url];
        var info = "Loading...";
        if (activeImg.error)
        {
            info = "Unable to load image.";
        }
        else if (activeImg.readyState == "complete")
        {      
            // Determine image size.
            var width = activeImg.initialWidth
            var height = activeImg.initialHeight;
            var size = width + " x " + height + " px";
            
            // Determine image scale in percents.
            var diff = 100;
            if (activeImg.width != activeImg.initialWidth)
            {
                diff = Math.round(activeImg.width / activeImg.initialWidth * 100);
                if (diff &gt; 100)
                {
                    diff = 100;
                }
                if (diff &lt; 0)
                {
                    diff = 0;
                }
            }
            percents = " (" + diff + "%)";
            
            // Build the info label.
            info = size + percents;
        }        
        
        getInfoContainer().innerHTML = info;
    }
    
    // Add resource element in dom model.
    var addResource = function(activeImg, resourceContainer)
    {            
        // Add resource element in dom model.
        resourceContainer.appendChild(activeImg);  
    }
    
    // Change image size (if image is bigger then popup window).
    // By default resize image to small size that go into popup.
    // If 'switchSize' = true then change image size 
    // from initial to resized or from resized to initial.
    var resizeImage = function(activeImg, switchSize)
    {
        if (activeImg.initialWidth == activeImg.resizedWidth &amp;&amp; activeImg.initialHeight == activeImg.resizedHeight)
        {
            m_activeImgSize = ACTIVE_IMAGE_SIZES.initiallySmall;
        }
        else
        {
            // Switch between normal and resized image.
            if (!switchSize || (activeImg.width == activeImg.initialWidth &amp;&amp; activeImg.height == activeImg.initialHeight))
            {         
                activeImg.width = activeImg.resizedWidth;
                activeImg.height = activeImg.resizedHeight;
                m_activeImgSize = ACTIVE_IMAGE_SIZES.resized;
            }
            else
            {           
                activeImg.width = activeImg.initialWidth;
                activeImg.height = activeImg.initialHeight;  
                m_activeImgSize = ACTIVE_IMAGE_SIZES.scrolled; 
            }
        }
    }
    
    // Calculate scaled sizes of image and store its information
    // in image attributes.
    // Store the next information of image in attributes:
    // 1. 'initialWidth', 'initialHeight' - initial width and height of image.
    // 2. 'resizedWidth', 'resizedHeight' - width and size of image to show it as resized 
    //    entirely in popup window.
    var calculateImageSizes = function(activeImg)
    {
        // Store initial size of image.
        if (!activeImg.initialWidth)
        {
            activeImg.initialWidth = activeImg.width;
        }
        if (!activeImg.initialHeight)
        {
            activeImg.initialHeight = activeImg.height;
        }       
             
        // Determine image size for resizing 
        // and store it in 'img.resizedWidth' and 'img.resizedHeight' attributes.
        if (!activeImg.resizedWidth || !activeImg.resizedHeight)
        {
            activeImg.resizedHeight = activeImg.initialHeight;
            activeImg.resizedWidth = activeImg.initialWidth;
            var resourceWidth = m_resourceWidth - 2 * m_smallImageBorder;
            var resourceHeight = m_resourceHeight - 2 * m_smallImageBorder;
            if (activeImg.width &gt; resourceWidth || activeImg.height &gt; resourceHeight)
            {
                var widthDiff = activeImg.width / resourceWidth;
                var heightDiff = activeImg.height / resourceHeight;
                if (widthDiff &gt; heightDiff)
                {
                    var resizedHeight = Math.floor(activeImg.height / widthDiff);
                    var resizedWidth = resourceWidth;
                    activeImg.resizedHeight = resizedHeight;
                    activeImg.resizedWidth = resizedWidth;
                }
                else
                {
                    var resizedHeight = resourceHeight;
                    var resizedWidth = Math.floor(activeImg.width / heightDiff);
                    activeImg.resizedHeight = resizedHeight;
                    activeImg.resizedWidth = resizedWidth;
                }
            }
        }   
    }
    
    // Show active image:
    //    - resize image;
    //    - if image has not been added to dom model yet, add it;
    //    - display image.
    var showResourceElement = function(url, switchSize)
    {        
        var activeImg = m_resourceElements[url];
        if (activeImg.readyState == "complete" || activeImg.error)
        {   
            // Set initial and resized image sizes properties (if not set).
            calculateImageSizes(activeImg);
            
            // Resize image.
            resizeImage(activeImg, switchSize);            
            
            updateInfoContainerStyle(activeImg);
                  
            // Add image to dom model if not added.
            var resourceContainer = getResourceContainer();
            if (m_resourceElements[url].parentNode != resourceContainer)
            {
                addResource(activeImg, resourceContainer);
            }
            
            // Display image.
            activeImg.style.display = 'block';
        }
    }
    
    // Initialize image's properties.
    var initializeImage = function(url)
    {    
        var activeImg = m_resourceElements[url];
        // We should set initial sizes to zero only once for each image,
        // because at first case image is shown being resized and if initial size
        // is equals to zero after first resizing we will duplicate logic 
        // of calculation these sizes in calculateImageSizes() method. 
        // For resized image calculateImageSizes() will get resized size as image size and img will
        // always be small.
        // To prevent wrong behaviour set flag that image has been already initialized.
        if (typeof(activeImg._ResBr_isInitialized) != 'undefined' &amp;&amp; 
            activeImg._ResBr_isInitialized !== null &amp;&amp; 
            activeImg._ResBr_isInitialized !== true)
        {
            activeImg._ResBr_isInitialized = true;
            activeImg.initialWidth = 0;
            activeImg.initialHeight = 0;
            activeImg.resizedWidth = 0;
            activeImg.resizedHeight = 0;
        }
    }
    
    // Display image and information about it.
    var displayResourceElement = function(url)
    {    
        // Initialize image.
        initializeImage(url);
        // Display image.
        showResourceElement(url);       
        // Set 'cursor' style for popup as 'pointer' if image can be resized.
        updatePopupStyle(url);
        // Display information about image (image size in pixels).
        showInfo(url);   
    }
    
    // If image is not already downloaded then create new &lt;img /&gt; dom element
    // and start to download its content.
    // Simultaneously display the popup window and set the timer to hide popup window.
    var showImageInternal = function(x, y, url)
    {          
        hideActiveResourceElement();
            
        // If image has not been created then create new &lt;img /&gt; dom element 
        // and start to download its content.
        if (m_resourceElements[url] == null)
        {
            // Create img dom element.
            var img = document.createElement('IMG');
            
            try
            {
                // Start to download image.
                // Note: we should encode url.
                img.src = ResourceBrowser.encodeResourceUrl(url);  
            }
            catch (ex)
            {
                img.error = true;
            }
             
            // When img will fire onreadystatechange event we wait until
            // downloading of image will be completed (img.complete == true)
            // and sizes of image will be able to determined
            // or until we determine that image cannot be downloaded.
            //
            // NOTE: we use onreadystatechange instead of onload because onload event
            // is raised many times for gif animation.
            img.onreadystatechange = function()
            {
                // Wait while image will be loaded at all or 
                // while we will determine that image cannot be loaded.
                if (!img.complete &amp;&amp; !img.error)
                {
                    setTimeout(img.onreadystatechange, 100);
                }
                else
                {
                    // Clear onreadystatechange handler.
                    img.onreadystatechange = null;
                    // Display image and its information.
                    displayResourceElement(url);
                }
            }       
            
            // In case of error (e.g. image is anavailable) set error flag and 
            // call img.onreadystatechange method to abort loading.
            img.onerror = function()
            { 
                img.error = true; 
                if (img.onreadystatechange != null)
                {
                    img.onreadystatechange(); 
                }
            }
            
            addResourceElement(img, url);            
        } 
        
        // Once image is shown update timer to hide it.
        // It can start new timer to hide image or update existing timer 
        // if such has been started.
        updateHideTimeout(null, m_hide3Timeout);
        
        // Display popup window.
        displayPopup(x, y, url);        
    }
        
    // Stop timer and clear its identifier.
    var clearPopupTimeout = function(timeoutID)
    {
        clearTimeout(timeoutID);
        timeoutID = null;
    }    
    
    // Updates timeout to show image.
    var updateShowTimeout = function(ev, url)
    {    
        clearPopupTimeout(m_showTimeoutID);
        
        // Determine the place where popup window should be shown.
        var x = ev.clientX;
        var y = ev.clientY;
        
        // Define the callback to handle timeout and start timer to show image.
        m_showTimeoutID = setTimeout(
            function()
            {       
                showImageInternal(x, y, url); 
            }, 
            m_showTimeout
        );
    }
    
    /*
    *
    * Public methods.
    *
    */    
    
    // Set timeout to show image.
    this.showImage = function(event, url)
    {
        updateShowTimeout(event, url);
    }
    
    // Clear timer that initiate of image showing.
    this.handleMouseOut = function()
    {
        clearPopupTimeout(m_showTimeoutID);
    }
};
// Encode resource url.
ResourceBrowser.encodeResourceUrl = function(url)
{
    url = encodeURI(url);  
    // '#' is not valid symbol for image's url.
    // Since encodeURI method doesn't encode '#' we should encode it.
    url = url.replace(/#/g, escape('#'));
    return url;
}
resourceBrowser = new ResourceBrowser();
// 23-DEC-2008 MShehovtsov END
                    
          </xsl:comment>
        </xsl:element>
      </xsl:template>
      <xsl:template name="AVIMOMCSMPLicenseWizard">
        <xsl:if test="count(licenseWizard) &gt; 0">
          <xsl:value-of select="licenseWizard/licenseWizardText" />
          <xsl:element name="br" />
          <xsl:element name="br" />
          <xsl:text>Please </xsl:text>
          <xsl:element name="a">
            <xsl:attribute name="href">
              <xsl:value-of select="licenseWizard/licenseWizardUrl" />
            </xsl:attribute>
            <xsl:text>click here</xsl:text>
          </xsl:element>
          <xsl:text> to open license management wizard.</xsl:text>
        </xsl:if>
      </xsl:template>
      <!-- end of templates for AVIMOMCSMPMonitorLog -->

      <!-- templates for AVIMOMCSMSMonitorLog -->
      <xsl:template match="EventData" mode="AVIMOMCSMSMonitorLog">
        <xsl:if test="count(notLicense) = 0">
          <xsl:for-each select="*[local-name()='log']">
            <xsl:call-template name="AVIMOMCSMSMain" />
          </xsl:for-each>
        </xsl:if>
        <xsl:call-template name="AVIMOMCSMSLicenseWizard" />
      </xsl:template>
      <xsl:template match="EventData/*[local-name()='log']/Enterprise" mode="AVIMOMCSMSMonitorLog">
        <xsl:if test="count(notLicense) = 0">
          <xsl:for-each select="*[local-name()='log']">
            <xsl:call-template name="AVIMOMCSMSMain" />
          </xsl:for-each>
        </xsl:if>
        <xsl:call-template name="AVIMOMCSMSLicenseWizard" />
      </xsl:template>
      <xsl:template name="AVIMOMCSMSLicenseWizard">
        <xsl:if test="count(licenseWizard) &gt; 0">
          <xsl:value-of select="licenseWizard/licenseWizardText" />
          <xsl:element name="br" />
          <xsl:element name="br" />
          <xsl:text>Please </xsl:text>
          <xsl:element name="a">
            <xsl:attribute name="href">
              <xsl:value-of select="licenseWizard/licenseWizardUrl" />
            </xsl:attribute>
            <xsl:text>click here</xsl:text>
          </xsl:element>
          <xsl:text> to open license management wizard.</xsl:text>
        </xsl:if>
      </xsl:template>
      <xsl:template name="AVIMOMCSMSMain">
        <xsl:value-of select="outputScript" disable-output-escaping="yes" />
        <xsl:call-template name="AVIMOMCSMSViewerLink" />
        <xsl:variable name="smallcase" select="'abcdefghijklmnopqrstuvwxyz'" />
        <xsl:variable name="uppercase" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'" />
        <xsl:call-template name="AVIMOMCSMSPageInfo" />
        <xsl:call-template name="AVIMOMCSMSPerformanceMetrics" />
        <xsl:call-template name="AVIMOMCSMSHeaviestResources" />
        <xsl:call-template name="AVIMOMCSMSControlInformation" />
        <xsl:call-template name="AVIMOMCSMSContentInformation" />
        <xsl:call-template name="AVIMOMCSMSBrowserCapabilities" />
        <xsl:call-template name="AVIMOMCSMSEndUserInformation" />
        <xsl:call-template name="AVIMOMCSMSCollectionNotes" />
      </xsl:template>
      <xsl:template name="AVIMOMCSMSViewerLink">
        <xsl:if test="count(../ViewDetail) &gt; 0">
          <xsl:element name="a">
            <xsl:attribute name="href">
              <xsl:value-of select="../ViewDetail" />
            </xsl:attribute>
            <xsl:text>Click here</xsl:text>
          </xsl:element>
          <xsl:text> for additional Event details.</xsl:text>
        </xsl:if>
      </xsl:template>
      <xsl:template name="AVIMOMCSMSReplaceBadSymbol">
        <xsl:param name="string" />
        <xsl:param name="symbol" />
        <xsl:choose>
          <!-- if the string contains a symbol... -->
          <xsl:when test="contains($string, $symbol)">
            <!-- give the part before the symbol... -->
            <!-- then a symbol with backslash... -->
            <xsl:value-of select="concat(concat(substring-before($string, $symbol), &quot;\&quot;), $symbol)" />
            <!-- and then call the template recursively on the rest of the
				string -->
            <xsl:call-template name="AVIMOMCSMSReplaceBadSymbol">
              <xsl:with-param name="string" select="substring-after($string, $symbol)" />
              <xsl:with-param name="symbol" select="$symbol" />
            </xsl:call-template>
          </xsl:when>
          <!-- if the string doesn't contain symbols, just give its value -->
          <xsl:otherwise>
            <xsl:value-of select="$string" />
          </xsl:otherwise>
        </xsl:choose>
      </xsl:template>
      <xsl:template name="AVIMOMCSMSPageInfo">
        <script type="text/javascript">
          <xsl:text>
                
            var pageInfoBuilded = false;
            
            function BuildPageInfo()
            {
                GlobalTreeExpander('pageInfo','pageInfoContent','TreeNode');
                if(!pageInfoBuilded)
                {
                    var oPageInfo = document.getElementById('pageInfoContent');
                    var params = new Array();</xsl:text>

          <xsl:text>	params[0] = ['queryString', '</xsl:text>
          <xsl:call-template name="AVIMOMCSMSReplaceBadSymbol">
            <xsl:with-param name="string" select="eventInformation/pageQueryString" />
            <xsl:with-param name="symbol" select="&quot;'&quot;" />
          </xsl:call-template>
          <xsl:text>']; 
					params[1] = ['sessionID', '</xsl:text>
          <xsl:value-of select="eventCorrelationInfo/sessionId" />
          <xsl:text>'];
			</xsl:text>

          <!-- Insert additional parameters if request was to MVC .Net Application-->
          <xsl:variable name="smallcase" select="'abcdefghijklmnopqrstuvwxyz'" />
          <xsl:variable name="uppercase" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'" />
          <xsl:variable name="isMvcRequest" select="properties/property[name = 'IsMvcRequest']/value" />
          <xsl:if test="translate($isMvcRequest, $smallcase, $uppercase) = 'TRUE'">
            <xsl:text>
                    params[2] = ['MVC Controller', '</xsl:text>
            <xsl:value-of select="properties/property[name = 'mvc_Controller']/value" />
            <xsl:text>'];
                    params[3] = ['MVC Action', '</xsl:text>
            <xsl:value-of select="properties/property[name = 'mvc_Action']/value" />
            <xsl:text>'];
				</xsl:text>
          </xsl:if>
          <!-- END -->

          <xsl:text>
                    
                    oPageInfo.innerHTML = buildPageInfo(params);
                    pageInfoBuilded = true;
                }
            }
            
            </xsl:text>
        </script>
        <div class="PageInfoContainer">
          <table cellspacing="0" cellpadding="0" class="PageInfoHeader">
            <tr>
              <td id="pageInfo" class="TreeNodePlus" onclick="BuildPageInfo();">
                <div class="PageUrl">
                  <!-- span class="PageUrlLabel">Action: </span -->
                  <span class="PageUrlName">
                    <xsl:attribute name="title">
                      <xsl:value-of select="scopeInformation/scopeName" />
                      <xsl:text> event at </xsl:text>
                      <xsl:value-of select="eventInformation/pageUrl" />
                    </xsl:attribute>
                    <xsl:value-of select="scopeInformation/scopeName" />
                    <xsl:text> event at </xsl:text>
                    <xsl:value-of select="eventInformation/pageUrl" />
                  </span>
                </div>
              </td>
            </tr>
          </table>
          <div id="pageInfoContent" class="PageInfoContent" style="display:none;">
            <li />
          </div>
        </div>
      </xsl:template>
      <xsl:template name="AVIMOMCSMSPerformanceMetrics">
        <table cellpadding="0" cellspacing="0" class="Header">
          <tr>
            <td class="HeaderTitle" onclick="GlobalTreeExpander('performanceMetrics','performanceMetricsContent','TreeNode');">Performance Metrics</td>
            <td id="performanceMetrics" onclick="GlobalTreeExpander('performanceMetrics','performanceMetricsContent','TreeNode');">
              <xsl:attribute name="class">TreeNodeMinus</xsl:attribute>
              <li />
            </td>
          </tr>
        </table>
        <div id="performanceMetricsContent">
          <table border="0" cellpadding="0" cellspacing="0" width="700px">
            <tr>
              <td class="ChartTitleLeft">
                <span class="ChartHeader">Execution Time</span>
                <br />
                <span class="ChartSummary">
                  <xsl:text>Total Time: </xsl:text>
                  <xsl:value-of select="scopeInformation/times/totalSizeString" />
                  <xsl:text> ms</xsl:text>
                </span>
              </td>
              <td class="ChartTitleRigth">
                <span class="ChartHeader">AJAX Data Size</span>
                <br />
                <span class="ChartSummary">
                  <xsl:text>Total Size: </xsl:text>
                  <xsl:value-of select="scopeInformation/totalLength" />
                </span>
              </td>
            </tr>
            <tr>
              <td valign="top" width="400px" height="300px">
                <xsl:value-of select="scopeInformation/times/chartImage" disable-output-escaping="yes" />
              </td>
              <td valign="top" width="300px" height="300px" style="padding-top:55px">
                <xsl:value-of select="scopeInformation/chartImage" disable-output-escaping="yes" />
              </td>
            </tr>
          </table>
        </div>
      </xsl:template>
      <xsl:template name="AVIMOMCSMSHeaviestResources">
        <xsl:if test="//heaviestResources">

          <table cellpadding="0" cellspacing="0" class="Header">
            <tr>
              <td class="HeaderTitle" onclick="GlobalTreeExpander('heaviestResources','heaviestResourcesContent','TreeNode');">
                <span class="HeaviestResourcesTitle">Heaviest Resources</span>
              </td>
              <td id="heaviestResources" onclick="GlobalTreeExpander('heaviestResources','heaviestResourcesContent','TreeNode');">
                <xsl:attribute name="class">TreeNodeMinus</xsl:attribute>
                <li />
              </td>
            </tr>
          </table>
          <div id="heaviestResourcesContent" style="text-align: left;">
            <table cellpadding="0" cellspacing="0" class="HeaviestResourcesTable">
              <xsl:for-each select="//heaviestResources/heaviestResource">
                <tr>
                  <td class="HeaviestResourceValue">
                    <xsl:value-of select="@value" />
                    <xsl:text> ms</xsl:text>
                  </td>
                  <td class="HeaviestResourceName">
                    <xsl:value-of select="substring(@name, 1, 100)" />
                  </td>
                </tr>
              </xsl:for-each>
            </table>
          </div>

        </xsl:if>
      </xsl:template>
      <xsl:template name="AVIMOMCSMSCallParams">
        <xsl:param name="showRequestUrl" />

        <xsl:variable name="smallcase" select="'abcdefghijklmnopqrstuvwxyz'" />
        <xsl:variable name="uppercase" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'" />

        <xsl:variable name="abortedMessage">
          <b>Ajax call was aborted</b>
        </xsl:variable>
        <xsl:variable name="isNetworkRequestAborted" select="count(times/networkRequest[@isAborted='true' or @isAborted='True'])" />
        <xsl:variable name="isServerProcessingAborted" select="count(times/serverProcessing[@isAborted='true' or @isAborted='True'])" />
        <xsl:variable name="isResponseReceivingAborted" select="count(times/responseReceiving[@isAborted='true' or @isAborted='True'])" />
        <xsl:variable name="isInternalExecutionAborted" select="count(times/internalExecution[@isAborted='true' or @isAborted='True'])" />
        <xsl:variable name="showNetworkRequest" select="(times/networkRequest &gt; -1) or ($isNetworkRequestAborted &gt; 0)" />
        <xsl:variable name="showServerProcessing" select="(times/serverProcessing &gt; -1) or ($isServerProcessingAborted &gt; 0)" />
        <xsl:variable name="showNetworkResponse" select="(times/responseReceiving &gt; -1) or ($isResponseReceivingAborted &gt; 0)" />
        <xsl:text>[</xsl:text>

        <!--<xsl:if test="(times/networkRequest > -1) or ($isNetworkRequestAborted > 0)">-->
        <xsl:if test="$showNetworkRequest = 'true'">
          <xsl:text>['Network Request </xsl:text>
          <xsl:if test="times/networkRequest &gt; -1 and translate(@isCompleted, $smallcase, $uppercase) = 'TRUE'">
            <xsl:text>(</xsl:text>
            <xsl:value-of select="times/networkRequestString" />
            <xsl:text> ms)</xsl:text>
          </xsl:if>

          <xsl:text>', '</xsl:text>
          <xsl:choose>
            <xsl:when test="$isNetworkRequestAborted &gt; 0">
              <xsl:copy-of select="$abortedMessage" />
            </xsl:when>
            <xsl:otherwise>
              <xsl:if test="@isCached and @isCached='true'">
                <xsl:text>Cache detection</xsl:text>
              </xsl:if>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:text>', '', [</xsl:text>
          <xsl:if test="$showRequestUrl = 'true'">
            <xsl:text>['Requested URL', '</xsl:text>
            <xsl:value-of select="requestedUrl" />
            <xsl:text>', ''], </xsl:text>
          </xsl:if>

          <!-- Request Method: -->
          <xsl:text>['Request Method', '</xsl:text>
          <xsl:value-of select="requestMethod" />
          <xsl:text>', '']</xsl:text>

          <!-- Request Length: -->
          <xsl:text>, ['Request Length', '</xsl:text>
          <xsl:choose>
            <xsl:when test="requestLength and (requestLength != '')">
              <xsl:value-of select="requestLengthString" />
              <xsl:text> bytes</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <i>
                <xsl:text>n/a</xsl:text>
              </i>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:text>', 'Length of Sent Request Data</xsl:text>
          <xsl:choose>
            <xsl:when test="requestMethod = 'POST'">
              <xsl:text> (including Post Data and Request Headers)']</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <xsl:text>']</xsl:text>
            </xsl:otherwise>
          </xsl:choose>

          <!-- Request Text (Post Data): -->
          <xsl:text>,['Post Data', </xsl:text>
          <xsl:choose>
            <xsl:when test="requestText and (requestText != '')">
              <xsl:text>StrDecoder('</xsl:text>
              <xsl:value-of select="requestText" />
              <xsl:text>'), 'Post Data</xsl:text>
              <xsl:choose>
                <xsl:when test="translate(isRequestTrunc, $smallcase, $uppercase) = 'TRUE'">
                  <xsl:text> (truncated)']</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:text>']</xsl:text>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:text>'</xsl:text>
              <i>
                <xsl:text>n/a</xsl:text>
              </i>
              <xsl:text>', 'n/a']</xsl:text>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:text>]]</xsl:text>
        </xsl:if>

        <xsl:if test="$isNetworkRequestAborted = 0">
          <xsl:if test="$showServerProcessing = 'true'">
            <xsl:if test="$showNetworkRequest = 'true'">
              <xsl:text>,</xsl:text>
            </xsl:if>

            <xsl:text>['Server Response Time </xsl:text>
            <xsl:if test="times/serverProcessing &gt; -1 and translate(@isCompleted, $smallcase, $uppercase) = 'TRUE'">
              <xsl:text>(</xsl:text>
              <xsl:value-of select="times/serverProcessingString" />
              <xsl:text> ms)</xsl:text>
            </xsl:if>
            <!-- /xsl:element -->
            <xsl:text>','</xsl:text>
            <xsl:if test="$isServerProcessingAborted &gt; 0">
              <xsl:copy-of select="$abortedMessage" />
            </xsl:if>
            <xsl:text>', '']</xsl:text>
          </xsl:if>

          <xsl:if test="$isServerProcessingAborted = 0">

            <xsl:if test="$showNetworkResponse = 'true'">

              <xsl:if test="($showNetworkRequest = 'true') or ($showServerProcessing = 'true')">
                <xsl:text>,</xsl:text>
              </xsl:if>

              <!-- xsl:element name="b" -->
              <xsl:text>['Network Response </xsl:text>
              <xsl:if test="times/responseReceiving &gt; -1 and translate(@isCompleted, $smallcase, $uppercase) = 'TRUE'">
                <xsl:text>(</xsl:text>
                <xsl:choose>
                  <xsl:when test="times/responseReceiving &gt; 0">
                    <xsl:value-of select="times/responseReceivingString" />
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text>&amp;lt; 0.5</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:text> ms)</xsl:text>
              </xsl:if>
              <!-- /xsl:element -->
              <xsl:text>', '</xsl:text>
              <xsl:choose>
                <xsl:when test="$isResponseReceivingAborted &gt; 0">
                  <xsl:copy-of select="$abortedMessage" />
                </xsl:when>
                <xsl:otherwise>
                  <xsl:if test="@isCached and @isCached='true'">
                    <xsl:text>Read from cache</xsl:text>
                  </xsl:if>
                </xsl:otherwise>
              </xsl:choose>
              <xsl:text>', '', [</xsl:text>

              <!-- Result Code: -->
              <xsl:text>['Result Code', '</xsl:text>
              <xsl:choose>
                <xsl:when test="resultCode and (resultCode != '')">
                  <xsl:value-of select="resultCode" />
                  <xsl:text>', '']</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <i>
                    <xsl:text>n/a</xsl:text>
                  </i>
                  <xsl:text>', '']</xsl:text>
                </xsl:otherwise>
              </xsl:choose>

              <!-- Content Type: -->
              <xsl:text>, ['Content Type', '</xsl:text>
              <xsl:choose>
                <xsl:when test="responseContentType and (responseContentType != '')">
                  <xsl:value-of select="responseContentType" />
                  <xsl:text>', '']</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <i>
                    <xsl:text>n/a</xsl:text>
                  </i>
                  <xsl:text>', '']</xsl:text>
                </xsl:otherwise>
              </xsl:choose>

              <!-- Compressed: -->
              <xsl:text>, ['Compressed', '</xsl:text>
              <xsl:choose>
                <xsl:when test="responseContentEncoding and (responseContentEncoding != '')">
                  <xsl:text>Yes (</xsl:text>
                  <xsl:value-of select="responseContentEncoding" />
                  <xsl:text>)', '']</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:choose>
                    <xsl:when test="responseContentType and (responseContentType != '')">
                      <xsl:text>No', '']</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                      <i>
                        <xsl:text>n/a</xsl:text>
                      </i>
                      <xsl:text>', '']</xsl:text>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>

              <!-- Response Length: -->
              <xsl:text>, ['Response Length', '</xsl:text>
              <xsl:choose>
                <xsl:when test="responseLengthString and (responseLengthString != '') and (responseLengthString != '-1')">
                  <xsl:value-of select="responseLengthString" />
                  <xsl:text> bytes', 'Length of Received Response (including Response Text and Response Headers)']</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <i>
                    <xsl:text>n/a</xsl:text>
                  </i>
                  <xsl:text>', '']</xsl:text>
                </xsl:otherwise>
              </xsl:choose>

              <!-- Response Text: -->
              <xsl:text>, ['Response Text', </xsl:text>
              <xsl:choose>
                <xsl:when test="responseText and (responseText != '')">
                  <xsl:text>StrDecoder('</xsl:text>
                  <xsl:value-of select="responseText" />
                  <xsl:text>'), 'Response Text</xsl:text>
                  <xsl:choose>
                    <xsl:when test="translate(isResponseTrunc, $smallcase, $uppercase) = 'TRUE'">
                      <xsl:text> (truncated)']</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:text>']</xsl:text>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:text>'</xsl:text>
                  <i>
                    <xsl:text>n/a</xsl:text>
                  </i>
                  <xsl:text>', '']</xsl:text>
                </xsl:otherwise>
              </xsl:choose>

              <xsl:text>]]</xsl:text>
            </xsl:if>

          </xsl:if>
          <!-- End of isServerProcessingAborted = 0-->

        </xsl:if>
        <!-- End of isNetworkRequestAborted = 0-->

        <xsl:if test="isAsync = 'true'">
          <xsl:if test="((times/internalExecution &gt; -1) or ($isInternalExecutionAborted &gt; 0)) and $isResponseReceivingAborted = 0">
            <xsl:if test="($showNetworkRequest = 'true') or ($showServerProcessing = 'true') or ($showNetworkResponse = 'true')">
              <xsl:text>,</xsl:text>
            </xsl:if>

            <xsl:text>['Internal Execution </xsl:text>
            <xsl:if test="times/internalExecution &gt; -1 and translate(@isCompleted, $smallcase, $uppercase) = 'TRUE'">
              <xsl:text>(</xsl:text>
              <xsl:value-of select="times/internalExecutionString" />
              <xsl:text> ms)</xsl:text>
            </xsl:if>
            <!-- /xsl:element -->
            <xsl:text>', '</xsl:text>
            <xsl:if test="$isInternalExecutionAborted &gt; 0">
              <xsl:copy-of select="$abortedMessage" />
            </xsl:if>
            <xsl:text>', ''</xsl:text>

            <!-- Java Script: -->
            <xsl:text>, [['JavaScript', </xsl:text>
            <xsl:choose>
              <xsl:when test="scriptSubscription and (scriptSubscription != '')">
                <xsl:text>StrDecoder('</xsl:text>
                <xsl:value-of select="scriptSubscription" />
                <xsl:text>'), 'Script Code, Subscribed on ONREADYSTATECHANGE Event of AJAX Object']]</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text>'</xsl:text>
                <i>
                  <xsl:text>n/a</xsl:text>
                </i>
                <xsl:text>', '']]</xsl:text>
              </xsl:otherwise>
            </xsl:choose>

            <xsl:text>]</xsl:text>
          </xsl:if>

        </xsl:if>

        <xsl:text>]</xsl:text>

      </xsl:template>
      <xsl:template name="AVIMOMCSMSCallInfoScript">
        <xsl:variable name="smallcase" select="'abcdefghijklmnopqrstuvwxyz'" />
        <xsl:variable name="uppercase" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'" />
        <xsl:variable name="incompleteMessage">This call did not finish before the event handler was fully processed.</xsl:variable>
        <script type="text/javascript">
          function BuildContentInformation()
          {
          var oSyncCalls = document.getElementById("syncCallsTitle");
          var oAsyncCalls = document.getElementById("asyncCallsTitle");
          if(oSyncCalls)
          {
          oSyncCalls.fireEvent("onclick");
          }
          if(oAsyncCalls)
          {
          oAsyncCalls.fireEvent("onclick");
          }
          }

          var syncCallsBuilded = false;
          var asyncCallsBuilded = false;
          function BuildAsyncCalls()
          {
          if (!asyncCallsBuilded)
          {
          asyncCallsBuilded = true;
          <xsl:text>BuilSectionList('asyncCallsContent', [</xsl:text>

          <xsl:for-each select="scopeInformation/ajaxCalls/ajaxCall[isAsync = 'true']">
            <xsl:if test="position() &gt; 1">
              <xsl:text>, </xsl:text>
            </xsl:if>
            <xsl:text>['</xsl:text>
            <xsl:choose>
              <xsl:when test="translate(@isCompleted, $smallcase, $uppercase) = 'TRUE'">
                <xsl:value-of select="requestedUrl" />
                <xsl:text>', "</xsl:text>
                <xsl:if test="clientLink and clientLink != ''">
                  <xsl:value-of select="clientLink" />
                </xsl:if>
                <xsl:text>", '</xsl:text>
                <xsl:value-of select="times/totalSizeString" />
                <xsl:text> ms', "</xsl:text>
                <xsl:call-template name="AVIMOMCSMSCallParams" />
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="requestedUrl" />
                <xsl:text>', "</xsl:text>
                <xsl:if test="clientLink and clientLink != ''">
                  <xsl:value-of select="clientLink" />
                </xsl:if>
                <xsl:text>", '</xsl:text>
                <span style="color: SlateGray">
                  <xsl:attribute name="title">
                    <xsl:value-of select="$incompleteMessage" />
                  </xsl:attribute>
                  <xsl:text>&gt;=</xsl:text>
                  <xsl:value-of select="elapsedTime" />
                  <xsl:text> ms*</xsl:text>
                </span>
                <xsl:text> ', "</xsl:text>
                <xsl:call-template name="AVIMOMCSMSCallParams" />
              </xsl:otherwise>
            </xsl:choose>
            <xsl:text>"]</xsl:text>
          </xsl:for-each>

          <xsl:text>]);</xsl:text>
          }
          }

          function BuildSyncCalls()
          {
          if (!syncCallsBuilded)
          {
          syncCallsBuilded = true;
          <xsl:text>BuilSectionList('syncCallsContent', [</xsl:text>

          <xsl:for-each select="scopeInformation/ajaxCalls/ajaxCall[isAsync = 'false']">
            <xsl:if test="position() &gt; 1">
              <xsl:text>, </xsl:text>
            </xsl:if>
            <xsl:text>['</xsl:text>
            <xsl:value-of select="requestedUrl" />
            <xsl:text>', "</xsl:text>
            <xsl:if test="clientLink and clientLink != ''">
              <xsl:value-of select="clientLink" />
            </xsl:if>
            <xsl:text>", '</xsl:text>
            <xsl:value-of select="times/totalSizeString" />
            <xsl:text> ms (</xsl:text>
            <xsl:value-of select="times/totalSize/@percent" />
            <xsl:text>%)', "</xsl:text>
            <xsl:call-template name="AVIMOMCSMSCallParams" />
            <xsl:text>"]</xsl:text>
          </xsl:for-each>

          <xsl:if test="scopeInformation/lowPriorityCallsSummary/count &gt; 0">
            <xsl:if test="count(scopeInformation/ajaxCalls/ajaxCall[isAsync = 'false']) &gt; 0">
              <xsl:text>, </xsl:text>
            </xsl:if>
            <xsl:text>['Other Calls (</xsl:text>
            <xsl:value-of select="scopeInformation/lowPriorityCallsSummary/count" />
            <xsl:choose>
              <xsl:when test="scopeInformation/lowPriorityCallsSummary/count = 1">
                <xsl:text> call</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text> calls</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
            <xsl:text>)', '', '</xsl:text>
            <xsl:value-of select="scopeInformation/lowPriorityCallsSummary/times/totalSizeString" />
            <xsl:text> ms (</xsl:text>
            <xsl:value-of select="scopeInformation/lowPriorityCallsSummary/times/totalSize/@percent" />
            <xsl:text>%)', "[</xsl:text>

            <xsl:text>['</xsl:text>
            <!-- xsl:element name="b" -->
            <xsl:text>Network Request (</xsl:text>
            <xsl:value-of select="scopeInformation/lowPriorityCallsSummary/times/networkRequestString" />
            <xsl:text> ms)</xsl:text>
            <!-- /xsl:element -->
            <xsl:text>', '', '', [</xsl:text>
            <xsl:text>['Summary Request Length', '</xsl:text>
            <xsl:value-of select="scopeInformation/lowPriorityCallsSummary/requestLengthString" />
            <xsl:text> bytes','']]]</xsl:text>
            <xsl:text>, ['</xsl:text>
            <!-- xsl:element name="b" -->
            <xsl:text>Server Response Time (</xsl:text>
            <xsl:value-of select="scopeInformation/lowPriorityCallsSummary/times/serverProcessingString" />
            <xsl:text> ms)</xsl:text>
            <!-- /xsl:element -->
            <xsl:text>', '','']</xsl:text>
            <xsl:text>, ['</xsl:text>
            <!-- xsl:element name="b" -->
            <xsl:text>Network Response (</xsl:text>
            <xsl:value-of select="scopeInformation/lowPriorityCallsSummary/times/responseReceivingString" />
            <xsl:text> ms)</xsl:text>
            <!-- /xsl:element -->
            <xsl:text>', '', '', [</xsl:text>
            <xsl:text>['Summary Response Length', '</xsl:text>
            <xsl:value-of select="scopeInformation/lowPriorityCallsSummary/responseLengthString" />
            <xsl:text> bytes','']]]</xsl:text>
            <xsl:text>, ['</xsl:text>
            <!-- xsl:element name="b" -->
            <xsl:text>Internal Execution (</xsl:text>
            <xsl:value-of select="scopeInformation/lowPriorityCallsSummary/times/internalExecutionString" />
            <xsl:text> ms)</xsl:text>
            <!-- /xsl:element -->
            <xsl:text>', '','']</xsl:text>
            <xsl:text>]"]</xsl:text>
          </xsl:if>

          <xsl:text>]);</xsl:text>
          }
          }
        </script>
      </xsl:template>
      <xsl:template name="AVIMOMCSMSContentInformation">
        <xsl:variable name="syncAjaxesCount">
          <xsl:value-of select="count(scopeInformation/ajaxCalls/ajaxCall[isAsync = 'false'])+scopeInformation/lowPriorityCallsSummary/count" />
        </xsl:variable>
        <xsl:variable name="asyncAjaxesCount">
          <xsl:value-of select="count(scopeInformation/ajaxCalls/ajaxCall[isAsync = 'true'])" />
        </xsl:variable>
        <xsl:call-template name="AVIMOMCSMSScriptSubscription" />
        <table cellpadding="0" cellspacing="0" class="Header">
          <tr>
            <td class="HeaderTitle" onclick="GlobalTreeExpander('scriptSubscription','scriptSubscriptionContent','TreeNode'); BuildScriptSubscription();">JavaScript</td>
            <td id="scriptSubscription" onclick="GlobalTreeExpander('scriptSubscription','scriptSubscriptionContent','TreeNode'); BuildScriptSubscription();">
              <xsl:attribute name="class">TreeNodePlus</xsl:attribute>
              <li />
            </td>
          </tr>
        </table>
        <div id="scriptSubscriptionContent" style="display: none">
          <li />
        </div>
        <!-- JavaScript function that provide dynamic building of the content information -->
        <xsl:call-template name="AVIMOMCSMSCallInfoScript" />
        <table cellpadding="0" cellspacing="0" class="Header">
          <tr>
            <td class="HeaderTitle" onclick="GlobalTreeExpander('contentInformation','contentInformationContent','TreeNode'); BuildContentInformation();">AJAX Calls Information</td>
            <td id="contentInformation" onclick="GlobalTreeExpander('contentInformation','contentInformationContent','TreeNode'); BuildContentInformation();">
              <xsl:attribute name="class">TreeNodePlus</xsl:attribute>
              <li />
            </td>
          </tr>
        </table>
        <table cellpadding="0" cellspacing="0" border="0" width="100%" id="contentInformationContent" style="display: none">
          <tr>
            <td id="contentInformationTables">
              <div id="asyncCalls" class="CallSection">
                <xsl:choose>
                  <xsl:when test="$asyncAjaxesCount = 0">
                    <div id="asyncCallsTitle" class="CallSectionTitleEmpty">
                      <xsl:text>Asynchronous AJAX Calls (0 calls)</xsl:text>
                    </div>
                  </xsl:when>
                  <xsl:otherwise>
                    <div id="asyncCallsTitle" class="CallSectionTitlePlus" onclick="ExpandSection(this); BuildAsyncCalls();">
                      <xsl:text>Asynchronous AJAX Calls (</xsl:text>
                      <xsl:value-of select="$asyncAjaxesCount" />
                      <xsl:choose>
                        <xsl:when test="$asyncAjaxesCount = 1">
                          <xsl:text> call)</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:text> calls)</xsl:text>
                        </xsl:otherwise>
                      </xsl:choose>
                    </div>
                  </xsl:otherwise>
                </xsl:choose>
                <div id="asyncCallsContent" class="CallSectionContent" style="display: none;">
                  <li />
                </div>
              </div>
              <div id="syncCalls" class="CallSection">
                <xsl:choose>
                  <xsl:when test="$syncAjaxesCount = 0">
                    <div id="syncCallsTitle" class="CallSectionTitleEmpty">
                      <xsl:text>Synchronous AJAX Calls (0 calls)</xsl:text>
                    </div>
                  </xsl:when>
                  <xsl:otherwise>
                    <div id="syncCallsTitle" class="CallSectionTitlePlus" onclick="ExpandSection(this); BuildSyncCalls();">
                      <xsl:text>Synchronous AJAX Calls (</xsl:text>
                      <xsl:value-of select="$syncAjaxesCount" />
                      <xsl:choose>
                        <xsl:when test="$syncAjaxesCount = 1">
                          <xsl:text> call, </xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:text> calls, </xsl:text>
                        </xsl:otherwise>
                      </xsl:choose>
                      <xsl:value-of select="scopeInformation/times/totalWOExecutionString" />
                      <xsl:text> ms</xsl:text>
                      <xsl:text>)</xsl:text>
                    </div>
                  </xsl:otherwise>
                </xsl:choose>
                <div id="syncCallsContent" class="CallSectionContent" style="display: none;">
                  <li />
                </div>
              </div>
            </td>
            <td style="padding: 5px;" valign="top">
            </td>
          </tr>
        </table>
      </xsl:template>
      <xsl:template name="AVIMOMCSMSControlProperty">
        <xsl:param name="_name" />
        <xsl:param name="_value" />
        <xsl:param name="_hint" />
        <xsl:text>['</xsl:text>
        <xsl:value-of select="$_name" />
        <xsl:text>', '</xsl:text>
        <xsl:choose>
          <xsl:when test="$_value and ($_value != '')">
            <xsl:value-of select="$_value" />
          </xsl:when>
          <xsl:otherwise>
            <i>
              <xsl:text>n/a</xsl:text>
            </i>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:text>', '</xsl:text>
        <xsl:value-of select="$_hint" />
        <xsl:text>'</xsl:text>
        <xsl:text>]</xsl:text>
      </xsl:template>
      <xsl:template name="AVIMOMCSMSControlInformation">
        <xsl:variable name="smallcase" select="'abcdefghijklmnopqrstuvwxyz'" />
        <xsl:variable name="uppercase" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'" />

        <script type="text/javascript">
          var controlInfoIsBuilt = false;
          function BuildControlInformation()
          {
          if (!controlInfoIsBuilt)
          {
          controlInfoIsBuilt = true;
          <xsl:text>ContentCreator('controlInfoContent', 0, 'Control', '', '', [], [], [], [], </xsl:text>
          <xsl:text>[</xsl:text>

          <!-- Tag: -->
          <xsl:call-template name="AVIMOMCSMSControlProperty">
            <xsl:with-param name="_name" select="'Tag Name'" />
            <xsl:with-param name="_value" select="controlInfo/tagName" />
          </xsl:call-template>

          <!-- ID: -->
          <xsl:text>, </xsl:text>
          <xsl:call-template name="AVIMOMCSMSControlProperty">
            <xsl:with-param name="_name" select="'ID'" />
            <xsl:with-param name="_value" select="controlInfo/id" />
          </xsl:call-template>

          <!-- Name: -->
          <xsl:text>, </xsl:text>
          <xsl:call-template name="AVIMOMCSMSControlProperty">
            <xsl:with-param name="_name" select="'Name'" />
            <xsl:with-param name="_value" select="controlInfo/name" />
          </xsl:call-template>

          <!-- Type: -->
          <xsl:text>, </xsl:text>
          <xsl:call-template name="AVIMOMCSMSControlProperty">
            <xsl:with-param name="_name" select="'Type'" />
            <xsl:with-param name="_value" select="controlInfo/type" />
          </xsl:call-template>

          <!-- Value: -->
          <xsl:text>, </xsl:text>
          <xsl:choose>
            <xsl:when test="translate(controlInfo/tagName,$smallcase, $uppercase) = 'IMG' or (translate(controlInfo/tagName,$smallcase, $uppercase) = 'INPUT' and translate(controlInfo/type,$smallcase, $uppercase) = 'IMAGE')">
              <xsl:call-template name="AVIMOMCSMSControlProperty">
                <xsl:with-param name="_name" select="'Value'" />
                <xsl:with-param name="_value" select="controlInfo/value" />
                <xsl:with-param name="_hint" select="concat('      ', controlInfo/title)" />
              </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
              <xsl:call-template name="AVIMOMCSMSControlProperty">
                <xsl:with-param name="_name" select="'Value'" />
                <xsl:with-param name="_value" select="controlInfo/value" />
                <xsl:with-param name="_hint" select="''" />
              </xsl:call-template>
            </xsl:otherwise>
          </xsl:choose>

          <xsl:text>]);</xsl:text>
          }
          }
        </script>
        <table cellpadding="0" cellspacing="0" class="Header">
          <tr>
            <td class="HeaderTitle" onclick="GlobalTreeExpander('controlInfo','controlInfoContent','TreeNode'); BuildControlInformation();">Control</td>
            <td id="controlInfo" onclick="GlobalTreeExpander('controlInfo','controlInfoContent','TreeNode'); BuildControlInformation();">
              <xsl:attribute name="class">TreeNodePlus</xsl:attribute>
              <li />
            </td>
          </tr>
        </table>
        <div id="controlInfoContent" style="display: none">
          <li />
        </div>
      </xsl:template>
      <xsl:template name="AVIMOMCSMSBrowserCapabilities">
        <!-- JavaScript function that provide dynamic building of the browser capabilities -->
        <script type="text/javascript">
          var browserCapabilitiesBuilded = false;
          function BuildBrowserCapabilities()
          {
          if (!browserCapabilitiesBuilded)
          {
          browserCapabilitiesBuilded = true;
          <xsl:text>ContentCreator('browserCapabilitiesContent', 0, 'Browser Capabilities', '', '', </xsl:text>
          <xsl:text>[</xsl:text>
          <xsl:for-each select="browserCapabilities/variables/variable">
            <xsl:text>[</xsl:text>
            <xsl:text>'</xsl:text>
            <xsl:value-of select="name" />
            <xsl:text>','</xsl:text>
            <xsl:value-of select="value" />
            <xsl:text>','</xsl:text>
            <xsl:value-of select="type" />
            <xsl:text>']</xsl:text>
            <xsl:if test="position()!=last()">
              <xsl:text>,</xsl:text>
            </xsl:if>
          </xsl:for-each>
          <xsl:text>], </xsl:text>
          <xsl:text>[]);</xsl:text>
          }
          }
        </script>
        <table cellpadding="0" cellspacing="0" class="Header">
          <tr>
            <td class="HeaderTitle" onclick="GlobalTreeExpander('browserCapabilities','browserCapabilitiesContent','TreeNode'); BuildBrowserCapabilities();">Browser Capabilities</td>
            <td id="browserCapabilities" onclick="GlobalTreeExpander('browserCapabilities','browserCapabilitiesContent','TreeNode'); BuildBrowserCapabilities();">
              <xsl:attribute name="class">TreeNodePlus</xsl:attribute>
              <li />
            </td>
          </tr>
        </table>
        <div id="browserCapabilitiesContent" style="display: none">
          <li />
        </div>
      </xsl:template>
      <xsl:template name="AVIMOMCSMSScriptSubscription">
        <script type="text/javascript">
          var scriptSubscriptionBuilded = false;
          function BuildScriptSubscription()
          {
          if (!scriptSubscriptionBuilded)
          {
          scriptSubscriptionBuilded = true;
          <xsl:text>ContentCreator('scriptSubscriptionContent', 0, 'JavaScript', '', '', [], [], [],</xsl:text>
          <xsl:text>[</xsl:text>
          <xsl:text>[</xsl:text>
          <xsl:text>'</xsl:text>
          <xsl:value-of select="scopeInformation/scopeName" />
          <xsl:text>', </xsl:text>
          <xsl:text>StrDecoder('</xsl:text>
          <xsl:value-of select="scopeInformation/scriptSubscription" />
          <xsl:text>'),</xsl:text>
          <xsl:text>'User-Defined Script Code, Subscribed on ....'</xsl:text>
          <xsl:text>]</xsl:text>
          <xsl:text>]);</xsl:text>
          }
          }
        </script>
      </xsl:template>
      <xsl:template name="AVIMOMCSMSEndUserInformation">
        <!-- JavaScript function that provide dynamic building of the end user information -->
        <script type="text/javascript">
          var endUserInformationBuilded = false;
          function BuildEndUserInformation()
          {
          if (!endUserInformationBuilded)
          {
          endUserInformationBuilded = true;
          <xsl:text>ContentCreator('endUserInformationContent', 0, 'End User Information', '', '', [], </xsl:text>
          <xsl:text>[</xsl:text>
          <xsl:if test="count(userInfo/variables) &gt; 0">
            <xsl:for-each select="userInfo/variables/variable">
              <xsl:text>[</xsl:text>
              <xsl:text>'</xsl:text>
              <xsl:value-of select="name" />
              <xsl:text>',</xsl:text>

              <xsl:choose>
                <xsl:when test="@type = 'simple'">
                  <xsl:text>'</xsl:text>
                  <xsl:value-of select="value" />
                  <xsl:text>','</xsl:text>
                  <xsl:value-of select="type" />
                  <xsl:text>'</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:text> , '</xsl:text>
                  <xsl:value-of select="type" />
                  <xsl:text>', [</xsl:text>
                  <xsl:for-each select="variables/variable">
                    <xsl:text>[</xsl:text>
                    <xsl:text>'</xsl:text>
                    <xsl:value-of select="name" />
                    <xsl:text>','</xsl:text>
                    <xsl:value-of select="value" />
                    <xsl:text>','</xsl:text>
                    <xsl:value-of select="type" />
                    <xsl:text>']</xsl:text>
                    <xsl:if test="position()!=last()">
                      <xsl:text>,</xsl:text>
                    </xsl:if>
                  </xsl:for-each>
                  <xsl:text>]</xsl:text>
                </xsl:otherwise>
              </xsl:choose>

              <xsl:text>]</xsl:text>
              <xsl:if test="position()!=last()">
                <xsl:text>,</xsl:text>
              </xsl:if>
            </xsl:for-each>
          </xsl:if>
          <xsl:text>]);</xsl:text>
          }
          }
        </script>
        <table cellpadding="0" cellspacing="0" class="Header">
          <tr>
            <td class="HeaderTitle" onclick="GlobalTreeExpander('endUserInformation','endUserInformationContent','TreeNode'); BuildEndUserInformation();">End User Information</td>
            <td id="endUserInformation" onclick="GlobalTreeExpander('endUserInformation','endUserInformationContent','TreeNode'); BuildEndUserInformation();">
              <xsl:attribute name="class">TreeNodePlus</xsl:attribute>
              <li />
            </td>
          </tr>
        </table>
        <div id="endUserInformationContent" style="display: none">
          <li />
        </div>
      </xsl:template>
      <xsl:template name="AVIMOMCSMSCollectionNotes">
        <xsl:if test="scopeInformation/collectionNotes/note">
          <table cellpadding="0" cellspacing="0" class="Header">
            <tr>
              <td class="HeaderTitle" onclick="GlobalTreeExpander('collectionNotesH', 'collectionNotes', 'TreeNode');">Collection Notes</td>
              <td id="collectionNotesH" onclick="GlobalTreeExpander('collectionNotesH', 'collectionNotes', 'TreeNode');">
                <xsl:attribute name="class">
                  <xsl:choose>
                    <xsl:when test="count(scopeInformation/collectionNotes/note) = 0">
                      TreeNodePlus
                    </xsl:when>
                    <xsl:otherwise>TreeNodeMinus</xsl:otherwise>
                  </xsl:choose>
                </xsl:attribute>
                <li />
              </td>
            </tr>
          </table>
          <div id="collectionNotes">
            <xsl:if test="count(scopeInformation/collectionNotes/note) = 0">
              <xsl:attribute name="style">display: none</xsl:attribute>
            </xsl:if>
            <ul class="CollectionNotes">
              <xsl:for-each select="scopeInformation/collectionNotes/note">
                <li>
                  <xsl:value-of select="." />
                </li>
              </xsl:for-each>
            </ul>
          </div>
        </xsl:if>
      </xsl:template>
      <xsl:template name="AVIMOMCSMSMonitorScript">
        <xsl:element name="script">
          <xsl:comment>
            
                
function tdcontent(s){
    if (s == undefined || s =='')
        return '&amp;#160;'
    else
        return s;  
}

function TableHead(className){
    return '&lt;table class="' + className + '"  cellpadding="0" cellspacing="0"&gt;';
}
///////////////////////////////////////////////////////////////////////////////
// Object processing  
///////////////////////////////////////////////////////////////////////////////

var id = -1; 

function OdId(){
    id ++;   
    return '*' + id;    
}

function OD(ot, ov){
    od[OdId()] = new ObjData(ot, ov);	
}

function Bl(val){
    if (val == 1)
        OD("BOOLEAN", "true");
    else
        OD("BOOLEAN", "false");
}

function OV(Id, Name)
{
    if (typeof(Id) == 'string'){
        this.Id = [Id];
        this.Name = [Name];
    }
    else{
        this.Id = Id;	
        this.Name = Name;	
    }
}


function ObjData(ot, ov)
{	
    this.ot = ot;
    this.ov = ov;	
    if (typeof(ov) == 'string')
        this.os = 's';
    else
        if (this.ot == t1 || this.ot == t2 || this.ot == t3)
            this.os = 'a';
        else
            this.os = 'c';	
}

var od = new Array(); 
                      
//FillObjects(); //This function is described in the C# code and attached to the html


////////////////////variable

//enum
var stateClosed = "TreeVarNodePlus";
var stateOpened = "TreeVarNodeMinus";
var stateEmpty  = "TreeVarNodeSimple";
var stateSpace  = "TreeVarNodeSpace";     
//enum end 

//enum
var treeEmpty   = '0';
var treeSibling = '1';
var treeLine    = '2';    
var treeLast    = '3';    
//enum end     

//enum
var itemSimple			= 'TreeNodeTypeSimple';       
var itemArray			= 'TreeNodeTypeArray';
var itemClass			= 'TreeNodeTypeClass';    
var itemClassNoInfo     = 'TreeNodeTypeClassNoInfo';    
//enum end 

var identity = 1;   //for id generation        

function newId(){
    identity ++;
    return identity;
}

        
function TabHeader(id, num, activeTab, type, body){	
    return '&lt;div id="' + id + 'content' + num + '" Style="DISPLAY:' + ((activeTab==num) ? 'block' : 'none') + '"&gt;&lt;table cellpadding="0" cellspacing="0" class="TreeVar" id="' + id + type + '"&gt;' + body + '&lt;/table&gt;&lt;/div&gt;';
}

function Header(){
    return '&lt;col class="TreeVarCol1"/&gt;&lt;col class="TreeVarCol2"/&gt;&lt;col class="TreeVarCol3"/&gt;&lt;tr&gt;&lt;th class="TreeVarHeader1"&gt;Name&lt;/th&gt;&lt;th class="TreeVarHeader2"&gt;Value&lt;/th&gt;&lt;th class="TreeVarHeader3"&gt;Structure&lt;/th&gt;&lt;/tr&gt;';
}


function TabBookmark(id, num, activeTab, text){
    return  '&lt;td onmouseover="HightLightTab(true)" onmouseout="HightLightTab(false)" class="TabBookmark' + ((activeTab==num &amp;&amp; activeTab != -1) ? 'Sel' : '') + '" id="' + id + num + '" onclick="SetTabValue(\'' + id + '\', ' + num + ')"&gt;&lt;nobr&gt;' + text + '&lt;/nobr&gt;&lt;/td&gt;';
}

function ModulesRowContent(rowType, title, value, id, style, tooltipTexts, fileType){
    var s = '&lt;tr id="' + id + '" style="Display:' + style + ';" class="Normal"&gt;';
    s += '&lt;td style="width: 32%"&gt;';
    s += '&lt;table class="TreeNodeValueNameFixed" cellpadding="0" cellspacing="0" width="100%"&gt;&lt;tr&gt;';

    var totalStyle = '';
    rowType = rowType.toLowerCase();
    
    var imageValueCase = false;/* Flag, if we need to show not text but image as value of property */
    switch (rowType)
    {
        case 'imagevalue':
            // Simple node picture.
            s += '&lt;td class="TreeNodeTypeSimple"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            imageValueCase = true;
            break;
        case 'last':
            // Last node picture.
            s += '&lt;td class="TreeNodeLast"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
        case 'middle':
            // Middle node picture.
            s += '&lt;td class="TreeNodeSibling"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';	
            break;
        case 'simple':
            // Simple node picture.
            s += '&lt;td class="TreeNodeTypeSimple"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
        case 'total':
            // Style for 'total' row.
            totalStyle = ' style="text-align: right; font-weight: bold; padding-right: 10px;"';
            break;
        case 'low':
            // Style for 'low' row.
            //totalStyle = ' style="text-align: center; font-style: italic; color: rgb(100, 100, 100); padding-right: 10px;"';
            totalStyle = ' style="font-style: italic; color: rgb(100, 100, 100);"';
            s += '&lt;td class="TreeNodeLast"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
        case 'nonodespace':	        
            // Without node space and node picture.
            break;
        default:
            // Node space without picture.
            s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
    }
    
    var titleHint = '';
    var valueHint = '';
    var mouseHandler = '';
    
    if (typeof (tooltipTexts) != 'undefined')
    {
        if(typeof (tooltipTexts[0]) != 'undefined')
        {
            titleHint = ' description="' + tooltipTexts[0] + '"';
        }
        if(typeof (tooltipTexts[1]) != 'undefined')
        {
            valueHint = ' title="' + tooltipTexts[1] + '"';
        }
    }   
    
    //s += '&lt;td' + totalStyle + mouseHandler + titleHint + '&gt;&amp;nbsp; ' + title + '&lt;/td&gt;';
    //s += '&lt;td' + totalStyle + mouseHandler + titleHint + '&gt;&amp;nbsp; &lt;a href="' + tooltipTexts[0] + '" target="blank"&gt;' + title + '&lt;/a&gt;&lt;/td&gt;';
    
    s += '&lt;td' + totalStyle + mouseHandler + titleHint + '&gt;' + title + '&lt;/td&gt;';
    s += '&lt;/tr&gt;';
    s += '&lt;/table&gt;';
    s += '&lt;/td&gt;';
    if(imageValueCase) /* if we need to show not text but image as value of property */ {
        s += '&lt;td' + valueHint + '&gt;&lt;img onreadystatechange="SetImageSize(this)" valign="middle" src="' + value + '"&gt;&lt;/img&gt;&lt;br&gt;&lt;span id="imageLegend" style="font-size:10px; color:SlateGray" valign="middle"&gt;&lt;/span&gt;&lt;/td&gt;';
    }
    else /*Ordinary common case*/{
        s += '&lt;td' + valueHint + '&gt;' + (value == '' ? '&amp;nbsp;' : value) + '&lt;/td&gt;';
    }

    s += '&lt;/tr&gt;';
    
    return s;
}

function SetImageSize(image)
{
    // quit if this function has already been called
    if (arguments.callee.done) {
        return;
    }
    arguments.callee.done = true;
    var threshold = 50;
    initialHeight = image.height;
    initialWidth = image.width;
    if (initialHeight &gt; threshold)
    {
        var proportion = image.width / image.height;
        
        image.height = threshold;
        image.width = threshold * proportion;
    }
    var sizeProportion = Math.floor((image.height / initialHeight) * 100);
    
    sizeProportion = Math.min(100, Math.max(0, sizeProportion));
    
    var span = document.getElementById('imageLegend');
    if(span != null)
    {
       span.innerText = initialWidth + ' x ' + initialHeight + ' px (' + sizeProportion + '%)';
    }
}

function ModulesExpandRowContent(title, id, sign, value, omitExpander, hint, style, entityClass){
    var s = '&lt;tr class="Normal"&gt;';
    s += '&lt;td style="width: 32%;"&gt;';
    s += '&lt;table class="TreeNodeValue" cellpadding="0" cellspacing="0"&gt;';
    s += '&lt;tr&gt;';
    
    if (omitExpander)
    {
        s += '&lt;td&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
    }
    else
    {
        s += '&lt;td class="TreeVarNode' + sign + '" onclick="ModulesExpander(this, \'' + id + '\');"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
    }
    
    if (typeof(style) == "undefined" || style == null || style == '')
    {
        style = 'font-weight: bold;';
    }
    if (typeof(hint) == "undefined" || hint == null)
    {
        hint = '';
    }
    
    var classForBGImg = '';
    switch (entityClass)
    {
        case 'simple':
            classForBGImg = 'TreeNodeTypeSimple';
        case 'class':
            classForBGImg = 'TreeNodeTypeClass';
            break;
        case 'customList':
            classForBGImg = 'TreeNodeTypeArray';
            break;
        default:
            break;
    }
    
    s += '&lt;td class="' + classForBGImg + '"&gt;&lt;/td&gt;';
    s += '&lt;td&gt;&lt;span style="' + style + '" title="' + hint + '"&gt;' + title + '&lt;/span&gt;&lt;/td&gt;';
    s += '&lt;/tr&gt;';
    s += '&lt;/table&gt;';
    s += '&lt;/td&gt;';
    
    if (typeof(value) == 'undefined')
    {
        value = '';
    }
    
    if(value == "Cache detection" || value == "Read from cache")
        value = '&lt;i style="font-weight: normal; color: #888888;"&gt;'+value+'&lt;/i&gt;';
    
    s += '&lt;td title="' + hint + '"&gt;&lt;b&gt;' + value + '&lt;/b&gt;&amp;nbsp;&lt;/td&gt;';
    s += '&lt;/tr&gt;';
    return s;
}

function buildParameters(parameters, firstColName, secondColName, firstColWidthPercent)
{
    var s = '';
    
    var colWidth = 60;    
    if (typeof(firstColWidthPercent) != "undefined")
    {
        colWidth = parseInt(firstColWidthPercent);
    }
    
    s += '&lt;col style="width: ' + colWidth + '%" /&gt;&lt;col style="width: '+ (100 - colWidth) + '%" /&gt;';
    s += '&lt;tr&gt;&lt;th class="TreeVarHeader1"&gt;' + firstColName + '&lt;/th&gt;&lt;th class="TreeVarHeader2"&gt;' + secondColName + '&lt;/th&gt;&lt;/tr&gt;';	
    for (var i = 0; i &lt; parameters.length; i++)
    {
        var parameter = parameters[i];
        s += ModulesRowContent('simple', parameter[0], parameter[1], 0, 'block'); 	 
    }	
    return s;
}

function buildBrowserCapabilities(parameters)
{
    return buildParameters(parameters, 'Name', 'Value', 30);
}

function buildControlInformation(parameters, firstColName, secondColName, firstColWidthPercent)
{
    var s = '';
    
    var colWidth = 60;
    if (typeof(firstColWidthPercent) != "undefined")
    {
        colWidth = parseInt(firstColWidthPercent);
    }
    
    s += '&lt;col style="width: ' + colWidth + '%" /&gt;&lt;col style="width: '+ (100 - colWidth) + '%" /&gt;';
    s += '&lt;tr&gt;&lt;th class="TreeVarHeader1"&gt;' + firstColName + '&lt;/th&gt;&lt;th class="TreeVarHeader2"&gt;' + secondColName + '&lt;/th&gt;&lt;/tr&gt;';	
    for (var i = 0; i &lt; parameters.length - 1; i++)
    {
        var parameter = parameters[i];
        s += ModulesRowContent('simple', parameter[0], parameter[1], 0, 'block');
    }
    var _rowType = "simple";
    var _rowHint = [];
    if(parameters[parameters.length - 1][2].length &gt; 0){
        
        // Additional "SRC" row
        s += ModulesRowContent(_rowType, "Source URL", parameters[parameters.length - 1][1], 0, 'block', _rowHint);

        _rowType = "imagevalue";
        _rowHint = [_rowHint[_rowHint.length]/*undefined*/,  trim(parameters[parameters.length - 1][2])];

    }
    
    s += ModulesRowContent(_rowType, parameters[parameters.length - 1][0], parameters[parameters.length - 1][1], 0, 'block', _rowHint);
    
    return s;
}

function trim(stringToTrim) {
    return stringToTrim.replace(/^\s+|\s+$/g,"");
}
function ltrim(stringToTrim) {
    return stringToTrim.replace(/^\s+/,"");
}
function rtrim(stringToTrim) {
    return stringToTrim.replace(/\s+$/,"");
}


function buildPageInfo(parameters)
{
    var tableBody = '&lt;table cellpadding="0" cellspacing="0" class="Tab"&gt;&lt;tr&gt;&lt;td class="TabContent"&gt;';
    tableBody += '&lt;div id="' + id + 'content1"&gt;&lt;table cellpadding="0" cellspacing="0" class="TreeVar"&gt;';
    //tableBody += buildParameters(parameters, 'Name', 'Value', 30);
	tableBody += CreateTreeListView(parameters, true);
    tableBody += '&lt;/table&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;';
    return tableBody;
}

function buildEndUserInformation(parameters)
{
    return buildParameters(parameters, 'Name', 'Value', 30);
    //return CreateTreeListView(parameters, true);
}

function buildAJAXCallParameters(parameters, totalSize)
{   
    return CreateTreeListView(parameters, true);
}

function OpenNodeContent(id, tabName, totalSize, totalCount,
    browserCapabilitiesParameters, endUserInformationParameters, AJAXCallParameters, scriptSubscription, controlInformation)
{
    var activeTab = 0;

    var s = '';
    
    s += TableHead('Tab');	
        
    var tableBody = '';
    tableBody += '&lt;div id="' + id + 'content1"&gt;';
    tableBody += '&lt;table cellpadding="0" cellspacing="0" class="TreeVar"&gt;';
    
    var tableHeader = tabName;

    switch (tabName)
    {
        case 'Asynchronous AJAX Call':
        case 'Synchronous AJAX Call':
            tableBody += buildAJAXCallParameters(AJAXCallParameters);
            break;
        case 'Browser Capabilities':
            tableBody += buildBrowserCapabilities(browserCapabilitiesParameters);
            break;
        case 'End User Information':
            tableBody += buildEndUserInformation(endUserInformationParameters);
            break;
        case 'JavaScript':
            tableBody += buildParameters(scriptSubscription, 'Name', 'Value', 30);
            tableHeader = "Event Handler";
            break;
        case 'Control':
            tableBody += buildControlInformation(controlInformation, 'Name', 'Value', 30);
            tableHeader = "Properties";
            break;
        default:
            break;
    }
    
    //TabBookmarks	
    s += '&lt;tr&gt;';
    s += '&lt;td&gt;&lt;table class=TableBookmark cellspacing=0 cellpadding=0 border=0&gt;&lt;tr&gt;';
    
    if (totalCount !== '')
    {
        tableHeader += ' (' + totalCount + ')';
    }
    
    s += TabBookmark(id, 0, activeTab, tableHeader);
    s += '&lt;td class=TabBookmarkEmpty&gt;&amp;nbsp;&lt;/td&gt;';
    s += '&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;';
    s += '&lt;/tr&gt;';
    
    //Tabs content
    s += '&lt;tr&gt;&lt;td class="TabContent"&gt;';	
    
    s += tableBody;

    s += '&lt;/table&gt;&lt;/div&gt;';		

    return s;	
}

function GlobalTreeExpander(itemId, showobj, prefix)
{
    var objSign = document.getElementById(itemId);  
   
    
    if (objSign.className.indexOf('Minus') &gt; 0)
    {
        objSign.className = prefix + 'Plus';		
        ShowHide(0, showobj);	      	
    }	
    else if (objSign.className.indexOf('Plus') &gt; 0)
    {
        objSign.className = prefix + 'Minus';
        ShowHide(1, showobj);	
    }
}


function SetTabValue(tabControlId, value){
    var i = 0;
 
    while (document.getElementById(tabControlId + i)){
        if (i == value){
            document.getElementById(tabControlId + i).className = "TabBookmarkSel";
            ShowHide(1, tabControlId + 'content' + i);
        } else {
            document.getElementById(tabControlId + i).className = "TabBookmark";
            ShowHide(0, tabControlId + 'content' + i);	    
        }    
        i ++;
    }
}


function ShowTab (id, tabNumber) {
    var obj = document.getElementById(id); 
    var row = obj.parentElement.parentElement.rows[1];
    if (typeof(row) == 'undefined' || row.style.display == 'none') {
        obj.fireEvent("onClick");
    }
    document.getElementById(id + tabNumber).fireEvent('onClick');    
    window.event.cancelBubble = true;    
}

function ShowHide(mode, child)
{
    var objColl = document.all(child);	
        
    if(objColl == null) return;
    
    if (typeof(objColl.length) == 'undefined')
    {
        if (mode == 0)
            objColl.style.display = 'none';
        else
            objColl.style.display = '';
        
        return;
    }
    
    for (var i = 0; i &lt; objColl.length; i++)
    {
        if (mode == 0)
            objColl[i].style.display = 'none';
        else
            objColl[i].style.display = '';
            
    }
}

function ModulesExpander(obj, id, prefix){
    if (obj.className.indexOf('Minus') &gt; 0)
    {
        obj.className = 'TreeVarNodePlus';		
        ShowHide(0, id);    
    }
    else    
    {
        obj.className = 'TreeVarNodeMinus';
        ShowHide(1, id);    
    }
}

function ModulesContent(position, name, version, dateModified, path, pdbPath)
{
    var s = ModulesExpandRowContent(name + ', ' + version, position + 'module', 'Plus');
    s += ModulesRowContent(false, 'Date Modified', dateModified, position + 'module', 'none'); 
    s += ModulesRowContent(true, 'Assembly Path', path, position + 'module', 'none');  
    return s;
}


function AspectsExpander(obj, id, prefix){
    if (obj.className.indexOf('Minus') &gt; 0)
    {
        obj.className = 'TreeVarNodePlus';		
        ShowHide(0, id);    
    }
    else    
    {
        obj.className = 'TreeVarNodeMinus';
        ShowHide(1, id);    
    }
}

function InsertWhiteSpaces(entryId, isLast)
{	
    var s = '&lt;table cellpadding="0" cellspacing="0" class="ExceptionTreeImage"&gt;&lt;tr&gt;';
    s += '&lt;td class="' + (isLast ? 'TreeNodeLast' : 'TreeNodeMiddle') + '"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;'
    s += '&lt;/table&gt;&lt;/tr&gt;';	
    
    return s;
}

function HightLightTab(flagHightLight)
{
    var el = event.srcElement;
    while(el.tagName != "TD") el = el.parentElement;
    if(el.className != 'TabBookmarkSel')
    {
        if(flagHightLight)
            el.className = 'TabBookmarkActive';
        else
            el.className = 'TabBookmark';
    }
}

function GetProfessionalLicenseLimitationMessage(unavailableInformation)
{
    var message = professionalLicenseLimitationTemplate.replace("#UnavailableInformation", unavailableInformation);
    message = "&lt;div class=\"handlerLicenseMessage\"&gt;" + message + "&lt;/div&gt;";
    return message;
}

function StrDecoder(strToDecode) 
{
        var decodeString = strToDecode.replace(/&amp;lt;br&amp;gt;/g, "&lt;br&gt;");
        decodeString = decodeString.replace(/\&amp;amp;quot;/g, "&amp;quot;");
        decodeString = decodeString.replace(/&amp;amp;lt;/g, "&amp;lt;");
        decodeString = decodeString.replace(/&amp;amp;gt;/g, "&amp;gt;");
        decodeString = decodeString.replace(/&amp;amp;#39;/g, "&amp;#39;");

        return decodeString;
}

function ContentCreator(containerId, child, tabName, totalSize, totalCount,
     browserCapabilitiesParameters, endUserInformationParameters, AJAXCallParameters, scriptSubscription, controlInformation)
{
    var container = document.getElementById(containerId);
    if (container)
    {
        var div = document.createElement('DIV');
        div.innerHTML = OpenNodeContent(child, tabName, totalSize, totalCount,
                            browserCapabilitiesParameters, endUserInformationParameters, AJAXCallParameters, scriptSubscription, controlInformation);
        container.appendChild(div);
    }
}


function CreateRow(rowType, title, value, tooltipText, id, style, entityClass){
    var s = '&lt;tr id="' + id + '" style="Display:' + style + ';" class="Normal"&gt;';
    s += '&lt;td style="width: 32%"&gt;';
    s += '&lt;table class="TreeNodeValue" cellpadding="0" cellspacing="0" width="100%"&gt;&lt;tr&gt;';
    var totalStyle = '';
    rowType = rowType.toString();
    rowType = rowType.toLowerCase();
    
    switch (rowType) {
        case 'last':
            s += '&lt;td class="TreeNodeLast"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
        case 'middle':
            s += '&lt;td class="TreeNodeSibling"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
        case 'simple':
            s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            //s += '&lt;td class="TreeNodeTypeSimple"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
        case 'nonodespace':
            break;
        default:
            s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
    }
    
    if (typeof(entityClass) != "undefined")
    {
        switch (entityClass)
        {
            case 'simple':
                s += '&lt;td class="TreeNodeTypeSimple"&gt;&lt;/td&gt;';
                break;
            case 'class':
                s += '&lt;td class="TreeNodeTypeClass"&gt;&lt;/td&gt;';
                break;
            case 'responseText':
                s += '&lt;td class="TreeNodeTypeFun"&gt;&lt;/td&gt;';
                break;
            default:
                break;
        }
    }
    
    var hint = ' title="' + tooltipText + '"';
    
    s += '&lt;td' + totalStyle + hint + '&gt;' + (title == '' ? '&amp;nbsp;' : title) + '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;';
    s += '&lt;td' + hint + '&gt;' + (value == '' ? '&amp;nbsp;' : value) + '&lt;/td&gt;&lt;/tr&gt;';
    return s;
}

function CreateTreeListView(parameters, addHeader, parentId){

        var s = '';
        var style = 'middle';  
        var entityClass = 'simple';

        if(parameters.length &gt; 0)
        {

            if(addHeader)
            {
                s += '&lt;col style="width: 40%" /&gt;&lt;col style="width: 60%" /&gt;';
                s += '&lt;tr&gt;&lt;th class="TreeVarHeader1"&gt;Name&lt;/th&gt;&lt;th class="TreeVarHeader2"&gt;Value&lt;/th&gt;&lt;/tr&gt;';
                style = 'simple';
                entityClass = 'simple';
            }
            
            for (var i = 0; i &lt; parameters.length; i++) {
                var id = 'TreeViewId'+newId();
                var parameter = parameters[i];
                if(typeof(parameter[3]) == "undefined" || parameter[3] == null)
                {
                    if (typeof(parentId) != "undefined" &amp;&amp; parentId != null)
                    {
                        id = parentId + '_childId';
                    }
                    else
                    {
                        id += newId();
                    }
                    
                    if(i == parameters.length -1 &amp;&amp; !addHeader)
                    {
                        style = 'last';
                    }
                    
                    if(parameter[0].indexOf("Network Request") &gt; -1 || parameter[0].indexOf("Server Response Time") &gt; -1)
                    {
                        entityClass = "class";
                    }
                    
                    //if(parameter[0].indexOf("Response Text") &gt; -1)
                    //{
                    //    entityClass = "responseText";
                    //}
                    
                    s += CreateRow(style, parameter[0], parameter[1], parameter[2], id, 'block', entityClass);
                }
                else
                {
                    childId = id + '_childId';
                    var eClass = 'class';
                    if(parameter[2] == 'customList')
                        eClass = parameter[2];
                    s += ModulesExpandRowContent(parameter[0], childId, 'Minus', ((parameter[1] != null) ? parameter[1] : ''), false, parameter[2], 'font-weight: normal', eClass);
                    s += CreateTreeListView(parameter[3], false, id);
                }
            }
        }
        return s;
    }
    
    

function BuilSectionList(containerId, params)
{
    var s = '';
    var container = document.getElementById(containerId);
    
    s += "&lt;table class='TreeFun' cellSpacing='0' cellPadding='0'&gt;";
    for(i=0;i&lt;params.length;i++)
    {
        s += BuildSectionListItem(params[i]);
    }
    s += "&lt;/table&gt;";

    container.innerHTML = s;
}


function BuildSectionListItem(params)
{
    var id = "CallRow" + newId();
    var s = '&lt;tr class="treeRow"&gt;&lt;td&gt;';
    s += '&lt;div class="TreeRow"&gt;';
    
    s += '&lt;div class="TreeNodeTypeFun" cancelBubble="true"&gt;&lt;/div&gt;';
    s += '&lt;div class="TreeNodeValue" cancelBubble="true"&gt;';

    s += '&lt;table class="TreeNode" cellSpacing="0" cellPadding="0"&gt;';

    if(params[3] != null &amp;&amp; params[3].length &gt; 0) //has children
    {
        s += '&lt;tr&gt;&lt;td class="TreeNodeDetailsPlus" onclick="ExpandCallRow(this, \''+id+'\', '+params[3]+');"&gt;&lt;li&gt;'+params[2]+ '&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;' +params[0]+'&lt;/li&gt;&lt;/td&gt;';
    }
    else
    {
        s += '&lt;tr&gt;&lt;td class="TreeNodeValue"&gt;&lt;li&gt;'+params[2]+ '&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;' +params[0]+'&lt;/li&gt;&lt;/td&gt;';
    }
    if(params[1] != null &amp;&amp; params[1] != "")
    {
        s += '&lt;td class=TreeNodePChainIn title="Chain info" onclick="'+params[1]+'"&gt;&lt;/td&gt;';
    }
    s += '&lt;/tr&gt;&lt;tr  id="'+id+'_content" style="display: none;"&gt;&lt;td'+((params[1] != null &amp;&amp; params[1] != "") ? ' colspan="2"' : "")+' id="'+id+'" style="padding: 5px 0 10px 0;"&gt;&lt;/td&gt;&lt;/tr&gt;';
    s += "&lt;/table&gt;";
    
    s += '&lt;/div&gt;';
    s += '&lt;/div&gt;';
    s += '&lt;/td&gt;&lt;/tr&gt;';
    
    return s;
}

function BuildCallParams(params)
{
    var s = "[";

    for(i=0; i&lt;params.length; i++)
    {
        var param = params[i];
        
        if(i&gt;0)
        {
            s += ", ";
        }
        if(typeof(param) != 'undefined' &amp;&amp; typeof(param.length) == 'undefined')
        {
            s += "'"+param+"'";
        }
        else if(typeof(param) != 'undefined')
        {
            s += BuildCallParams(param)
        }
        
    }
    
    s += "]";
    
    return s;
}


function ExpandSection(oSecTitle)
{
    var sectionId = oSecTitle.nextSibling.id;
    if(oSecTitle.className.indexOf("Minus") &gt; -1)
    {
        oSecTitle.className = "CallSectionTitlePlus";
        ShowHide(0, sectionId);
    }
    else
    {
        oSecTitle.className = "CallSectionTitleMinus";
        ShowHide(1, sectionId);
    }
}

function ExpandCallRow(oRowTitle, containerId, params)
{
    var container = document.getElementById(containerId);
    var containerRowId = container.parentElement.id;
    
    if(oRowTitle.className.indexOf("Minus") &gt; -1)
    {
        oRowTitle.className = "TreeNodeDetailsPlus";
        ShowHide(0, containerRowId);
    }
    else
    {
        if(container.innerHTML == "")
        {
            BuildCallDetailsTable(containerId, params);
        }
        oRowTitle.className = "TreeNodeDetailsMinus";
        ShowHide(1, containerRowId);
    }
}

function BuildCallDetailsTable(containerId, params)
{
    var s = '&lt;table cellpadding="0" cellspacing="0" class="TreeVar"&gt;';
    s += CreateTreeListView(params, true);
    s += '&lt;/table&gt;';
    
    var container = document.getElementById(containerId);
    var div = document.createElement('DIV');
    div.innerHTML = s;
    container.appendChild(div);

}
/**
 * Converts a string into an HTML-encoded string 
 */
function HtmlEncode(input){
  var t = document.createTextNode(input),
  e = document.createElement('div');
  e.appendChild(t);
  return e.innerHTML;
}
                    
          </xsl:comment>
        </xsl:element>
      </xsl:template>
      <!-- end of templates for AVIMOMCSMSMonitorLog -->

      <!-- templates for AVIMOMCSMAMonitorLog -->
      <xsl:template match="EventData" mode="AVIMOMCSMAMonitorLog">
        <xsl:if test="count(notLicense) = 0">
          <xsl:for-each select="*[local-name()='log']">
            <xsl:call-template name="AVIMOMCSMAMain" />
          </xsl:for-each>
        </xsl:if>
        <xsl:call-template name="AVIMOMCSMALicenseWizard" />
      </xsl:template>
      <xsl:template match="EventData/*[local-name()='log']/Enterprise" mode="AVIMOMCSMAMonitorLog">
        <xsl:if test="count(notLicense) = 0">
          <xsl:for-each select="*[local-name()='log']">
            <xsl:call-template name="AVIMOMCSMAMain" />
          </xsl:for-each>
        </xsl:if>
        <xsl:call-template name="AVIMOMCSMALicenseWizard" />
      </xsl:template>
      <xsl:template name="AVIMOMCSMALicenseWizard">
        <xsl:if test="count(licenseWizard) &gt; 0">
          <xsl:value-of select="licenseWizard/licenseWizardText" />
          <xsl:element name="br" />
          <xsl:element name="br" />
          <xsl:text>Please </xsl:text>
          <xsl:element name="a">
            <xsl:attribute name="href">
              <xsl:value-of select="licenseWizard/licenseWizardUrl" />
            </xsl:attribute>
            <xsl:text>click here</xsl:text>
          </xsl:element>
          <xsl:text> to open license management wizard.</xsl:text>
        </xsl:if>
      </xsl:template>
      <xsl:template name="AVIMOMCSMAMain">
        <xsl:value-of select="outputScript" disable-output-escaping="yes" />
        <xsl:call-template name="AVIMOMCSMAViewerLink" />
        <xsl:call-template name="AVIMOMCSMAPageInfo" />
        <xsl:call-template name="AVIMOMCSMAPerformanceMetrics" />
        <xsl:call-template name="AVIMOMCSMAHeaviestResources" />
        <xsl:call-template name="AVIMOMCSMAContentInformation" />
        <xsl:call-template name="AVIMOMCSMABrowserCapabilities" />
        <xsl:call-template name="AVIMOMCSMAEndUserInformation" />
        <xsl:call-template name="AVIMOMCSMACollectionNotes" />
      </xsl:template>
      <xsl:template name="AVIMOMCSMAViewerLink">
        <xsl:if test="count(../ViewDetail) &gt; 0">
          <xsl:element name="a">
            <xsl:attribute name="href">
              <xsl:value-of select="../ViewDetail" />
            </xsl:attribute>
            <xsl:text>Click here</xsl:text>
          </xsl:element>
          <xsl:text> for additional Event details.</xsl:text>
        </xsl:if>
      </xsl:template>
      <xsl:template name="AVIMOMCSMAreplaceBadSymbol">
        <xsl:param name="string" />
        <xsl:param name="symbol" />
        <xsl:choose>
          <!-- if the string contains a symbol... -->
          <xsl:when test="contains($string, $symbol)">
            <!-- give the part before the symbol... -->
            <!-- then a symbol with backslash... -->
            <xsl:value-of select="concat(concat(substring-before($string, $symbol), &quot;\&quot;), $symbol)" />
            <!-- and then call the template recursively on the rest of the
				string -->
            <xsl:call-template name="AVIMOMCSMAreplaceBadSymbol">
              <xsl:with-param name="string" select="substring-after($string, $symbol)" />
              <xsl:with-param name="symbol" select="$symbol" />
            </xsl:call-template>
          </xsl:when>
          <!-- if the string doesn't contain symbols, just give its value -->
          <xsl:otherwise>
            <xsl:value-of select="$string" />
          </xsl:otherwise>
        </xsl:choose>
      </xsl:template>
      <xsl:template name="AVIMOMCSMAPageInfo">
        <script type="text/javascript">
          <xsl:text>
                
            var pageInfoBuilded = false;
            
            function BuildPageInfo()
            {
                GlobalTreeExpander('pageInfo','pageInfoContent','TreeNode');
                if(!pageInfoBuilded)
                {
                    var oPageInfo = document.getElementById('pageInfoContent');
                    
					var params = new Array();</xsl:text>
          <xsl:text>
					params[0] = ['sessionID', '</xsl:text>
          <xsl:value-of select="eventCorrelationInfo/sessionId" />
          <xsl:text>'];
					params[1] = ['urlReferrer', '</xsl:text>
          <xsl:call-template name="AVIMOMCSMAreplaceBadSymbol">
            <xsl:with-param name="string" select="eventCorrelationInfo/refererUrl" />
            <xsl:with-param name="symbol" select="&quot;'&quot;" />
          </xsl:call-template>
          <xsl:text>'];
			</xsl:text>

          <!-- Insert additional parameters if request was to MVC .Net Application-->
          <xsl:variable name="smallcase" select="'abcdefghijklmnopqrstuvwxyz'" />
          <xsl:variable name="uppercase" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'" />
          <xsl:variable name="isMvcRequest" select="properties/property[name = 'IsMvcRequest']/value" />
          <xsl:if test="translate($isMvcRequest, $smallcase, $uppercase) = 'TRUE'">
            <xsl:text>
                    params[2] = ['MVC Controller', '</xsl:text>
            <xsl:value-of select="properties/property[name = 'mvc_Controller']/value" />
            <xsl:text>'];
                    params[3] = ['MVC Action', '</xsl:text>
            <xsl:value-of select="properties/property[name = 'mvc_Action']/value" />
            <xsl:text>'];
				</xsl:text>
          </xsl:if>
          <!-- END -->

          <xsl:text>
                    
                    oPageInfo.innerHTML = buildPageInfo(params);
                    pageInfoBuilded = true;
                }
            }
            
            </xsl:text>
        </script>
        <div class="PageInfoContainer">
          <table cellspacing="0" cellpadding="0" class="PageInfoHeader">
            <tr>
              <td id="pageInfo" class="TreeNodePlus" onclick="BuildPageInfo();">
                <div class="PageUrl">
                  <!-- span class="PageUrlLabel">Action: </span -->
                  <span class="PageUrlName">
                    <xsl:attribute name="title">
                      <xsl:text>Asynchronous AJAX call to </xsl:text>
                      <xsl:value-of select="ajaxCall/requestedUrl" disable-output-escaping="yes" />
                    </xsl:attribute>
                    <xsl:text>Asynchronous AJAX call to </xsl:text>
                    <xsl:value-of select="ajaxCall/requestedUrl" />
                  </span>
                </div>
              </td>
              <xsl:if test="count(ajaxCall/clientLink) = 1">
                <xsl:element name="td">
                  <xsl:attribute name="title">Chain info</xsl:attribute>
                  <xsl:attribute name="onclick">
                    <xsl:value-of select="ajaxCall/clientLink" />
                  </xsl:attribute>
                  <xsl:attribute name="class">TreeNodePChainIn</xsl:attribute>
                  <xsl:element name="img">
                    <xsl:attribute name="src">
                      <xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.empty')" />
                    </xsl:attribute>
                    <xsl:attribute name="width">20</xsl:attribute>
                    <xsl:attribute name="height">15</xsl:attribute>
                  </xsl:element>
                </xsl:element>
              </xsl:if>
            </tr>
          </table>
          <div id="pageInfoContent" class="PageInfoContent" style="display:none;">
            <li />
          </div>
        </div>
      </xsl:template>
      <xsl:template name="AVIMOMCSMAPerformanceMetrics">
        <table cellpadding="0" cellspacing="0" class="Header">
          <tr>
            <td class="HeaderTitle" onclick="GlobalTreeExpander('performanceMetrics','performanceMetricsContent','TreeNode');">Performance Metrics</td>
            <td id="performanceMetrics" onclick="GlobalTreeExpander('performanceMetrics','performanceMetricsContent','TreeNode');">
              <xsl:attribute name="class">TreeNodeMinus</xsl:attribute>
              <li />
            </td>
          </tr>
        </table>
        <div id="performanceMetricsContent">
          <table border="0" cellpadding="0" cellspacing="0" width="700">
            <tr>
              <td class="ChartTitleLeft">
                <span class="ChartHeader">Execution Time</span>
                <br />
                <span class="ChartSummary">
                  <xsl:text>Total Time: </xsl:text>
                  <xsl:value-of select="ajaxCall/times/totalSizeString" />
                  <xsl:text> ms</xsl:text>
                </span>
              </td>
              <td class="ChartTitleRigth">
                <span class="ChartHeader">AJAX Data Size</span>
                <br />
                <span class="ChartSummary">
                  <xsl:text>Total Size: </xsl:text>
                  <xsl:value-of select="ajaxCall/totalLength" />
                </span>
                <div>
                  <span class="ChartSummary">
                    <xsl:text>Network Latency: </xsl:text>
                    <xsl:choose>
                      <xsl:when test="//ajaxCall/latencyString != 'n/a'">
                        <xsl:value-of select="//ajaxCall/latencyString" />
                        <xsl:text> ms</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="//ajaxCall/latencyString" />
                      </xsl:otherwise>
                    </xsl:choose>
                  </span>
                </div>
                <div>
                  <span class="ChartSummary">
                    <xsl:text>Channel Quality: </xsl:text>
                    <xsl:value-of select="//ajaxCall/qualityOfChannel" />
                  </span>
                </div>
              </td>
            </tr>
            <tr>
              <td valign="top" width="400px" height="300px">
                <xsl:value-of select="ajaxCall/times/chartImage" disable-output-escaping="yes" />
              </td>
              <td valign="top" width="300px" height="300px" style="padding-top:55px">
                <xsl:value-of select="ajaxCall/chartImage" disable-output-escaping="yes" />
              </td>
            </tr>
          </table>
        </div>
      </xsl:template>
      <xsl:template name="AVIMOMCSMAHeaviestResources">
        <xsl:if test="//heaviestResources">
          <table cellpadding="0" cellspacing="0" class="Header">
            <tr>
              <td class="HeaderTitle" onclick="GlobalTreeExpander('heaviestResources','heaviestResourcesContent','TreeNode');">
                <span class="HeaviestResourcesTitle">Heaviest Resources</span>
              </td>
              <td id="heaviestResources" onclick="GlobalTreeExpander('heaviestResources','heaviestResourcesContent','TreeNode');">
                <xsl:attribute name="class">TreeNodeMinus</xsl:attribute>
                <li />
              </td>
            </tr>
          </table>
          <div id="heaviestResourcesContent" style="text-align: left;">
            <table cellpadding="0" cellspacing="0" class="HeaviestResourcesTable">
              <xsl:for-each select="//heaviestResources/heaviestResource">
                <tr>
                  <td class="HeaviestResourceValue">
                    <xsl:value-of select="@value" />
                    <xsl:text> ms</xsl:text>
                  </td>
                  <td class="HeaviestResourceName">
                    <xsl:choose>
                      <xsl:when test="@metric='Server Response Time' and count(//ajaxCall/clientLink) = 1">
                        <xsl:element name="a">
                          <xsl:attribute name="href">
                            <xsl:text>javascript:void(null)</xsl:text>
                          </xsl:attribute>
                          <xsl:attribute name="onclick">
                            <xsl:value-of select="//ajaxCall/clientLink" />
                          </xsl:attribute>
                          <xsl:value-of select="substring(@name, 1, 100)" />
                        </xsl:element>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="substring(@name, 1, 100)" />
                      </xsl:otherwise>
                    </xsl:choose>
                  </td>
                </tr>
              </xsl:for-each>
            </table>
          </div>
        </xsl:if>
      </xsl:template>
      <xsl:template name="AVIMOMCSMACallParams">
        <xsl:param name="showRequestUrl" />

        <xsl:variable name="smallcase" select="'abcdefghijklmnopqrstuvwxyz'" />
        <xsl:variable name="uppercase" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'" />

        <xsl:variable name="abortedMessage">
          <b>Ajax call was aborted</b>
        </xsl:variable>
        <xsl:variable name="isNetworkRequestAborted" select="count(times/networkRequest[@isAborted='true' or @isAborted='True'])" />
        <xsl:variable name="isServerProcessingAborted" select="count(times/serverProcessing[@isAborted='true' or @isAborted='True'])" />
        <xsl:variable name="isResponseReceivingAborted" select="count(times/responseReceiving[@isAborted='true' or @isAborted='True'])" />
        <xsl:variable name="isInternalExecutionAborted" select="count(times/internalExecution[@isAborted='true' or @isAborted='True'])" />
        <xsl:variable name="showNetworkRequest" select="(times/networkRequest &gt; -1) or ($isNetworkRequestAborted &gt; 0)" />
        <xsl:variable name="showServerProcessing" select="(times/serverProcessing &gt; -1) or ($isServerProcessingAborted &gt; 0)" />
        <xsl:variable name="showNetworkResponse" select="(times/responseReceiving &gt; -1) or ($isResponseReceivingAborted &gt; 0)" />
        <xsl:text>[</xsl:text>

        <!--<xsl:if test="(times/networkRequest > -1) or ($isNetworkRequestAborted > 0)">-->
        <xsl:if test="$showNetworkRequest = 'true'">
          <xsl:text>['Network Request </xsl:text>
          <xsl:if test="times/networkRequest &gt; -1 and translate(@isCompleted, $smallcase, $uppercase) = 'TRUE'">
            <xsl:text>(</xsl:text>
            <xsl:value-of select="times/networkRequestString" />
            <xsl:text> ms)</xsl:text>
          </xsl:if>

          <xsl:text>', '</xsl:text>
          <xsl:choose>
            <xsl:when test="$isNetworkRequestAborted &gt; 0">
              <xsl:copy-of select="$abortedMessage" />
            </xsl:when>
            <xsl:otherwise>
              <xsl:if test="@isCached and @isCached='true'">
                <xsl:text>Cache detection</xsl:text>
              </xsl:if>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:text>', '', [</xsl:text>
          <xsl:if test="$showRequestUrl = 'true'">
            <xsl:text>['Requested URL', '</xsl:text>
            <xsl:value-of select="requestedUrl" />
            <xsl:text>', ''], </xsl:text>
          </xsl:if>

          <!-- Request Method: -->
          <xsl:text>['Request Method', '</xsl:text>
          <xsl:value-of select="requestMethod" />
          <xsl:text>', '']</xsl:text>

          <!-- Request Length: -->
          <xsl:text>, ['Request Length', '</xsl:text>
          <xsl:choose>
            <xsl:when test="requestLength and (requestLength != '')">
              <xsl:value-of select="requestLengthString" />
              <xsl:text> bytes</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <i>
                <xsl:text>n/a</xsl:text>
              </i>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:text>', 'Length of Sent Request Data</xsl:text>
          <xsl:choose>
            <xsl:when test="requestMethod = 'POST'">
              <xsl:text> (including Post Data and Request Headers)']</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <xsl:text>']</xsl:text>
            </xsl:otherwise>
          </xsl:choose>

          <!-- Request Text (Post Data): -->
          <xsl:text>,['Post Data', </xsl:text>
          <xsl:choose>
            <xsl:when test="requestText and (requestText != '')">
              <xsl:text>StrDecoder('</xsl:text>
              <xsl:value-of select="scriptSubscription" />
              <!--<xsl:value-of select="requestText"/>-->
              <xsl:text>'), 'Post Data</xsl:text>
              <xsl:choose>
                <xsl:when test="translate(isRequestTrunc, $smallcase, $uppercase) = 'TRUE'">
                  <xsl:text> (truncated)']</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:text>']</xsl:text>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:text>'</xsl:text>
              <i>
                <xsl:text>n/a</xsl:text>
              </i>
              <xsl:text>', 'n/a']</xsl:text>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:text>]]</xsl:text>
        </xsl:if>

        <xsl:if test="$isNetworkRequestAborted = 0">
          <xsl:if test="$showServerProcessing = 'true'">
            <xsl:if test="$showNetworkRequest = 'true'">
              <xsl:text>,</xsl:text>
            </xsl:if>

            <xsl:text>['Server Response Time </xsl:text>
            <xsl:if test="times/serverProcessing &gt; -1 and translate(@isCompleted, $smallcase, $uppercase) = 'TRUE'">
              <xsl:text>(</xsl:text>
              <xsl:value-of select="times/serverProcessingString" />
              <xsl:text> ms)</xsl:text>
            </xsl:if>
            <!-- /xsl:element -->
            <xsl:text>','</xsl:text>
            <xsl:if test="$isServerProcessingAborted &gt; 0">
              <xsl:copy-of select="$abortedMessage" />
            </xsl:if>
            <xsl:text>', '']</xsl:text>
          </xsl:if>

          <xsl:if test="$isServerProcessingAborted = 0">

            <xsl:if test="$showNetworkResponse = 'true'">

              <xsl:if test="($showNetworkRequest = 'true') or ($showServerProcessing = 'true')">
                <xsl:text>,</xsl:text>
              </xsl:if>

              <!-- xsl:element name="b" -->
              <xsl:text>['Network Response </xsl:text>
              <xsl:if test="times/responseReceiving &gt; -1 and translate(@isCompleted, $smallcase, $uppercase) = 'TRUE'">
                <xsl:text>(</xsl:text>
                <xsl:choose>
                  <xsl:when test="times/responseReceiving &gt; 0">
                    <xsl:value-of select="times/responseReceivingString" />
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text>&amp;lt; 0.5</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:text> ms)</xsl:text>
              </xsl:if>
              <!-- /xsl:element -->
              <xsl:text>', '</xsl:text>
              <xsl:choose>
                <xsl:when test="$isResponseReceivingAborted &gt; 0">
                  <xsl:copy-of select="$abortedMessage" />
                </xsl:when>
                <xsl:otherwise>
                  <xsl:if test="@isCached and @isCached='true'">
                    <xsl:text>Read from cache</xsl:text>
                  </xsl:if>
                </xsl:otherwise>
              </xsl:choose>
              <xsl:text>', '', [</xsl:text>

              <!-- Result Code: -->
              <xsl:text>['Result Code', '</xsl:text>
              <xsl:choose>
                <xsl:when test="resultCode and (resultCode != '')">
                  <xsl:value-of select="resultCode" />
                  <xsl:text>', '']</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <i>
                    <xsl:text>n/a</xsl:text>
                  </i>
                  <xsl:text>', '']</xsl:text>
                </xsl:otherwise>
              </xsl:choose>

              <!-- Content Type: -->
              <xsl:text>, ['Content Type', '</xsl:text>
              <xsl:choose>
                <xsl:when test="responseContentType and (responseContentType != '')">
                  <xsl:value-of select="responseContentType" />
                  <xsl:text>', '']</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <i>
                    <xsl:text>n/a</xsl:text>
                  </i>
                  <xsl:text>', '']</xsl:text>
                </xsl:otherwise>
              </xsl:choose>

              <!-- Compressed: -->
              <xsl:text>, ['Compressed', '</xsl:text>
              <xsl:choose>
                <xsl:when test="responseContentEncoding and (responseContentEncoding != '')">
                  <xsl:text>Yes (</xsl:text>
                  <xsl:value-of select="responseContentEncoding" />
                  <xsl:text>)', '']</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:choose>
                    <xsl:when test="responseContentType and (responseContentType != '')">
                      <xsl:text>No', '']</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                      <i>
                        <xsl:text>n/a</xsl:text>
                      </i>
                      <xsl:text>', '']</xsl:text>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>

              <!-- Response Length: -->
              <xsl:text>, ['Response Length', '</xsl:text>
              <xsl:choose>
                <xsl:when test="responseLengthString and (responseLengthString != '') and (responseLengthString != '-1')">
                  <xsl:value-of select="responseLengthString" />
                  <xsl:text> bytes', 'Length of Received Response (including Response Text and Response Headers)']</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <i>
                    <xsl:text>n/a</xsl:text>
                  </i>
                  <xsl:text>', '']</xsl:text>
                </xsl:otherwise>
              </xsl:choose>

              <!-- Response Text: -->
              <xsl:text>, ['Response Text', </xsl:text>
              <xsl:choose>
                <xsl:when test="responseText and (responseText != '')">
                  <xsl:text>StrDecoder('</xsl:text>
                  <xsl:value-of select="responseText" />
                  <xsl:text>'), 'Response Text</xsl:text>
                  <xsl:choose>
                    <xsl:when test="translate(isResponseTrunc, $smallcase, $uppercase) = 'TRUE'">
                      <xsl:text> (truncated)']</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:text>']</xsl:text>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:text>'</xsl:text>
                  <i>
                    <xsl:text>n/a</xsl:text>
                  </i>
                  <xsl:text>', '']</xsl:text>
                </xsl:otherwise>
              </xsl:choose>

              <xsl:text>]]</xsl:text>
            </xsl:if>

          </xsl:if>
          <!-- End of isServerProcessingAborted = 0-->

        </xsl:if>
        <!-- End of isNetworkRequestAborted = 0-->

        <xsl:if test="isAsync = 'true'">
          <xsl:if test="((times/internalExecution &gt; -1) or ($isInternalExecutionAborted &gt; 0)) and $isResponseReceivingAborted = 0">
            <xsl:if test="($showNetworkRequest = 'true') or ($showServerProcessing = 'true') or ($showNetworkResponse = 'true')">
              <xsl:text>,</xsl:text>
            </xsl:if>

            <xsl:text>['Internal Execution </xsl:text>
            <xsl:if test="times/internalExecution &gt; -1 and translate(@isCompleted, $smallcase, $uppercase) = 'TRUE'">
              <xsl:text>(</xsl:text>
              <xsl:value-of select="times/internalExecutionString" />
              <xsl:text> ms)</xsl:text>
            </xsl:if>
            <!-- /xsl:element -->
            <xsl:text>', '</xsl:text>
            <xsl:if test="$isInternalExecutionAborted &gt; 0">
              <xsl:copy-of select="$abortedMessage" />
            </xsl:if>
            <xsl:text>', ''</xsl:text>

            <!-- Java Script: -->
            <xsl:text>, [['JavaScript', </xsl:text>
            <xsl:choose>
              <xsl:when test="scriptSubscription and (scriptSubscription != '')">
                <xsl:text>StrDecoder('</xsl:text>
                <xsl:value-of select="scriptSubscription" />
                <xsl:text>'), 'Script Code, Subscribed on ONREADYSTATECHANGE Event of AJAX Object']]</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text>'</xsl:text>
                <i>
                  <xsl:text>n/a</xsl:text>
                </i>
                <xsl:text>', '']]</xsl:text>
              </xsl:otherwise>
            </xsl:choose>

            <xsl:text>]</xsl:text>
          </xsl:if>

        </xsl:if>

        <xsl:text>]</xsl:text>

      </xsl:template>
      <xsl:template name="AVIMOMCSMACallInfoScript">
        <script type="text/javascript">
          var contentInformationBuilded = false;
          function BuildContentInformation()
          {
          if (!contentInformationBuilded)
          {
          contentInformationBuilded = true;
          <xsl:for-each select="ajaxCall">
            <xsl:text>ContentCreator('contentInformationTables', 0, 'Asynchronous AJAX Call', '', '</xsl:text>
            <xsl:value-of select="times/totalSizeString" />
            <xsl:text> ms'</xsl:text>
            <xsl:text>, [], [], </xsl:text>
            <xsl:call-template name="AVIMOMCSMACallParams">
              <xsl:with-param name="showRequestUrl" select="'true'" />
            </xsl:call-template>
            <xsl:text>);</xsl:text>

          </xsl:for-each>

          }
          }
        </script>
      </xsl:template>
      <xsl:template name="AVIMOMCSMAContentInformation">
        <xsl:variable name="cCount">
          <xsl:value-of select="1" />
        </xsl:variable>
        <!-- JavaScript function that provide dynamic building of the content information -->
        <xsl:call-template name="AVIMOMCSMACallInfoScript" />
        <table cellpadding="0" cellspacing="0" class="Header">
          <tr>
            <td class="HeaderTitle" onclick="GlobalTreeExpander('contentInformation','contentInformationContent','TreeNode'); BuildContentInformation();">AJAX Call Information</td>
            <td id="contentInformation" onclick="GlobalTreeExpander('contentInformation','contentInformationContent','TreeNode'); BuildContentInformation();">
              <xsl:attribute name="class">TreeNodePlus</xsl:attribute>
              <li />
            </td>
          </tr>
        </table>
        <table cellpadding="0" cellspacing="0" border="0" width="100%" id="contentInformationContent" style="display: none">
          <tr>
            <td id="contentInformationTables">
            </td>
            <td style="padding: 5px;" valign="top">
            </td>
          </tr>
        </table>
      </xsl:template>
      <xsl:template name="AVIMOMCSMABrowserCapabilities">
        <!-- JavaScript function that provide dynamic building of the browser capabilities -->
        <script type="text/javascript">
          var browserCapabilitiesBuilded = false;
          function BuildBrowserCapabilities()
          {
          if (!browserCapabilitiesBuilded)
          {
          browserCapabilitiesBuilded = true;
          <xsl:text>ContentCreator('browserCapabilitiesContent', 0, 'Browser Capabilities', '', '', </xsl:text>
          <xsl:text>[</xsl:text>
          <xsl:for-each select="browserCapabilities/variables/variable">
            <xsl:text>[</xsl:text>
            <xsl:text>'</xsl:text>
            <xsl:value-of select="name" />
            <xsl:text>','</xsl:text>
            <xsl:value-of select="value" />
            <xsl:text>','</xsl:text>
            <xsl:value-of select="type" />
            <xsl:text>']</xsl:text>
            <xsl:if test="position()!=last()">
              <xsl:text>,</xsl:text>
            </xsl:if>
          </xsl:for-each>
          <xsl:text>], </xsl:text>
          <xsl:text>[]);</xsl:text>
          }
          }
        </script>
        <table cellpadding="0" cellspacing="0" class="Header">
          <tr>
            <td class="HeaderTitle" onclick="GlobalTreeExpander('browserCapabilities','browserCapabilitiesContent','TreeNode'); BuildBrowserCapabilities();">Browser Capabilities</td>
            <td id="browserCapabilities" onclick="GlobalTreeExpander('browserCapabilities','browserCapabilitiesContent','TreeNode'); BuildBrowserCapabilities();">
              <xsl:attribute name="class">TreeNodePlus</xsl:attribute>
              <li />
            </td>
          </tr>
        </table>
        <div id="browserCapabilitiesContent" style="display: none">
          <li />
        </div>
      </xsl:template>
      <xsl:template name="AVIMOMCSMAEndUserInformation">
        <!-- JavaScript function that provide dynamic building of the end user information -->
        <script type="text/javascript">
          var endUserInformationBuilded = false;
          function BuildEndUserInformation()
          {
          if (!endUserInformationBuilded)
          {
          endUserInformationBuilded = true;
          <xsl:text>ContentCreator('endUserInformationContent', 0, 'End User Information', '', '', [], </xsl:text>
          <xsl:text>[</xsl:text>
          <xsl:if test="count(userInfo/variables) &gt; 0">
            <xsl:for-each select="userInfo/variables/variable">
              <xsl:text>[</xsl:text>
              <xsl:text>'</xsl:text>
              <xsl:value-of select="name" />
              <xsl:text>',</xsl:text>

              <xsl:choose>
                <xsl:when test="@type = 'simple'">
                  <xsl:text>'</xsl:text>
                  <xsl:value-of select="value" />
                  <xsl:text>','</xsl:text>
                  <xsl:value-of select="type" />
                  <xsl:text>'</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:text> , '</xsl:text>
                  <xsl:value-of select="type" />
                  <xsl:text>', [</xsl:text>
                  <xsl:for-each select="variables/variable">
                    <xsl:text>[</xsl:text>
                    <xsl:text>'</xsl:text>
                    <xsl:value-of select="name" />
                    <xsl:text>','</xsl:text>
                    <xsl:value-of select="value" />
                    <xsl:text>','</xsl:text>
                    <xsl:value-of select="type" />
                    <xsl:text>']</xsl:text>
                    <xsl:if test="position()!=last()">
                      <xsl:text>,</xsl:text>
                    </xsl:if>
                  </xsl:for-each>
                  <xsl:text>]</xsl:text>
                </xsl:otherwise>
              </xsl:choose>

              <xsl:text>]</xsl:text>
              <xsl:if test="position()!=last()">
                <xsl:text>,</xsl:text>
              </xsl:if>
            </xsl:for-each>
          </xsl:if>
          <xsl:text>]);</xsl:text>
          }
          }
        </script>
        <table cellpadding="0" cellspacing="0" class="Header">
          <tr>
            <td class="HeaderTitle" onclick="GlobalTreeExpander('endUserInformation','endUserInformationContent','TreeNode'); BuildEndUserInformation();">End User Information</td>
            <td id="endUserInformation" onclick="GlobalTreeExpander('endUserInformation','endUserInformationContent','TreeNode'); BuildEndUserInformation();">
              <xsl:attribute name="class">TreeNodePlus</xsl:attribute>
              <li />
            </td>
          </tr>
        </table>
        <div id="endUserInformationContent" style="display: none">
          <li />
        </div>
      </xsl:template>
      <xsl:template name="AVIMOMCSMACollectionNotes">
        <xsl:if test="collectionNotes/note">
          <table cellpadding="0" cellspacing="0" class="Header">
            <tr>
              <td class="HeaderTitle" onclick="GlobalTreeExpander('collectionNotesH', 'collectionNotes', 'TreeNode');">Collection Notes</td>
              <td id="collectionNotesH" onclick="GlobalTreeExpander('collectionNotesH', 'collectionNotes', 'TreeNode');">
                <xsl:attribute name="class">
                  <xsl:choose>
                    <xsl:when test="count(collectionNotes/note) = 0">
                      TreeNodePlus
                    </xsl:when>
                    <xsl:otherwise>TreeNodeMinus</xsl:otherwise>
                  </xsl:choose>
                </xsl:attribute>
                <li />
              </td>
            </tr>
          </table>
          <div id="collectionNotes">
            <xsl:if test="count(collectionNotes/note) = 0">
              <xsl:attribute name="style">display: none</xsl:attribute>
            </xsl:if>
            <ul class="CollectionNotes">
              <xsl:for-each select="collectionNotes/note">
                <li>
                  <xsl:value-of select="." />
                </li>
              </xsl:for-each>
            </ul>
          </div>
        </xsl:if>
      </xsl:template>
      <xsl:template name="AVIMOMCSMAMonitorScript">
        <xsl:element name="script">
          <xsl:comment>
            
                
function tdcontent(s){
    if (s == undefined || s =='')
        return '&amp;#160;'
    else
        return s;  
}

function TableHead(className){
    return '&lt;table class="' + className + '"  cellpadding="0" cellspacing="0"&gt;';
}
///////////////////////////////////////////////////////////////////////////////
// Object processing  
///////////////////////////////////////////////////////////////////////////////

var id = -1; 

function OdId(){
    id ++;   
    return '*' + id;    
}

function OD(ot, ov){
    od[OdId()] = new ObjData(ot, ov);	
}

function Bl(val){
    if (val == 1)
        OD("BOOLEAN", "true");
    else
        OD("BOOLEAN", "false");
}

function OV(Id, Name)
{
    if (typeof(Id) == 'string'){
        this.Id = [Id];
        this.Name = [Name];
    }
    else{
        this.Id = Id;	
        this.Name = Name;	
    }
}


function ObjData(ot, ov)
{	
    this.ot = ot;
    this.ov = ov;	
    if (typeof(ov) == 'string')
        this.os = 's';
    else
        if (this.ot == t1 || this.ot == t2 || this.ot == t3)
            this.os = 'a';
        else
            this.os = 'c';	
}

var od = new Array(); 
                      
//FillObjects(); //This function is described in the C# code and attached to the html


////////////////////variable

//enum
var stateClosed = "TreeVarNodePlus";
var stateOpened = "TreeVarNodeMinus";
var stateEmpty  = "TreeVarNodeSimple";
var stateSpace  = "TreeVarNodeSpace";     
//enum end 

//enum
var treeEmpty   = '0';
var treeSibling = '1';
var treeLine    = '2';    
var treeLast    = '3';    
//enum end     

//enum
var itemSimple			= 'TreeNodeTypeSimple';       
var itemArray			= 'TreeNodeTypeArray';
var itemClass			= 'TreeNodeTypeClass';    
var itemClassNoInfo     = 'TreeNodeTypeClassNoInfo';    
//enum end 

var identity = 1;   //for id generation        

function newId(){
    identity ++;
    return identity;
}

        
function TabHeader(id, num, activeTab, type, body){	
    return '&lt;div id="' + id + 'content' + num + '" Style="DISPLAY:' + ((activeTab==num) ? 'block' : 'none') + '"&gt;&lt;table cellpadding="0" cellspacing="0" class="TreeVar" id="' + id + type + '"&gt;' + body + '&lt;/table&gt;&lt;/div&gt;';
}

function Header(){
    return '&lt;col class="TreeVarCol1"/&gt;&lt;col class="TreeVarCol2"/&gt;&lt;col class="TreeVarCol3"/&gt;&lt;tr&gt;&lt;th class="TreeVarHeader1"&gt;Name&lt;/th&gt;&lt;th class="TreeVarHeader2"&gt;Value&lt;/th&gt;&lt;th class="TreeVarHeader3"&gt;Structure&lt;/th&gt;&lt;/tr&gt;';
}


function TabBookmark(id, num, activeTab, text){
    return  '&lt;td onmouseover="HightLightTab(true)" onmouseout="HightLightTab(false)" class="TabBookmark' + ((activeTab==num &amp;&amp; activeTab != -1) ? 'Sel' : '') + '" id="' + id + num + '" onclick="SetTabValue(\'' + id + '\', ' + num + ')"&gt;&lt;nobr&gt;' + text + '&lt;/nobr&gt;&lt;/td&gt;';
}

function ModulesRowContent(rowType, title, value, id, style, tooltipTexts, fileType){
    var s = '&lt;tr id="' + id + '" style="Display:' + style + ';" class="Normal"&gt;';
    s += '&lt;td style="width: 32%"&gt;';
    s += '&lt;table class="TreeNodeValueNameFixed" cellpadding="0" cellspacing="0" width="100%"&gt;&lt;tr&gt;';

    var totalStyle = '';
    rowType = rowType.toLowerCase();
    switch (rowType)
    {
        case 'last':
            // Last node picture.
            s += '&lt;td class="TreeNodeLast"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
        case 'middle':
            // Middle node picture.
            s += '&lt;td class="TreeNodeSibling"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';	
            break;
        case 'simple':
            // Simple node picture.
            s += '&lt;td class="TreeNodeTypeSimple"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
        case 'total':
            // Style for 'total' row.
            totalStyle = ' style="text-align: right; font-weight: bold; padding-right: 10px;"';
            break;
        case 'low':
            // Style for 'low' row.
            //totalStyle = ' style="text-align: center; font-style: italic; color: rgb(100, 100, 100); padding-right: 10px;"';
            totalStyle = ' style="font-style: italic; color: rgb(100, 100, 100);"';
            s += '&lt;td class="TreeNodeLast"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
        case 'nonodespace':	        
            // Without node space and node picture.
            break;
        default:
            // Node space without picture.
            s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
    }
    
    var titleHint = '';
    var valueHint = '';
    var mouseHandler = '';
    
    if (typeof (tooltipTexts) != 'undefined')
    {
        if(typeof (tooltipTexts[0]) != 'undefined')
        {
            titleHint = ' description="' + tooltipTexts[0] + '"';
        }
        if(typeof (tooltipTexts[1]) != 'undefined')
        {
            valueHint = ' title="' + tooltipTexts[1] + '"';
        }
    }   
    
    //s += '&lt;td' + totalStyle + mouseHandler + titleHint + '&gt;&amp;nbsp; ' + title + '&lt;/td&gt;';
    //s += '&lt;td' + totalStyle + mouseHandler + titleHint + '&gt;&amp;nbsp; &lt;a href="' + tooltipTexts[0] + '" target="blank"&gt;' + title + '&lt;/a&gt;&lt;/td&gt;';
    s += '&lt;td' + totalStyle + mouseHandler + titleHint + '&gt;' + title + '&lt;/td&gt;';
    s += '&lt;/tr&gt;';
    s += '&lt;/table&gt;';
    s += '&lt;/td&gt;';
    s += '&lt;td' + valueHint + '&gt;' + (value == '' ? '&amp;nbsp;' : value) + '&lt;/td&gt;';
    s += '&lt;/tr&gt;';

    return s;
}

function ModulesExpandRowContent(title, id, sign, value, omitExpander, hint, style, entityClass){
    var s = '&lt;tr class="Normal"&gt;';
    s += '&lt;td style="width: 32%;"&gt;';
    s += '&lt;table class="TreeNodeValue" cellpadding="0" cellspacing="0"&gt;';
    s += '&lt;tr&gt;';
    
    if (omitExpander)
    {
        s += '&lt;td&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
    }
    else
    {
        s += '&lt;td class="TreeVarNode' + sign + '" onclick="ModulesExpander(this, \'' + id + '\');"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
    }
    
    if (typeof(style) == "undefined" || style == null || style == '')
    {
        style = 'font-weight: bold;';
    }
    if (typeof(hint) == "undefined" || hint == null)
    {
        hint = '';
    }
    
    var classForBGImg = '';
    switch (entityClass)
    {
        case 'simple':
            classForBGImg = 'TreeNodeTypeSimple';
        case 'class':
            classForBGImg = 'TreeNodeTypeClass';
            break;
        case 'customList':
            classForBGImg = 'TreeNodeTypeArray';
            break;
        default:
            break;
    }
    
    s += '&lt;td class="' + classForBGImg + '"&gt;&lt;/td&gt;';
    s += '&lt;td&gt;&lt;span style="' + style + '" title="' + hint + '"&gt;' + title + '&lt;/span&gt;&lt;/td&gt;';
    s += '&lt;/tr&gt;';
    s += '&lt;/table&gt;';
    s += '&lt;/td&gt;';
    
    if (typeof(value) == 'undefined')
    {
        value = '';
    }
    
    if(value == "Cache detection" || value == "Read from cache")
        value = '&lt;i style="font-weight: normal; color: #888888;"&gt;'+value+'&lt;/i&gt;';
    
    s += '&lt;td title="' + hint + '"&gt;&lt;b&gt;' + value + '&lt;/b&gt;&amp;nbsp;&lt;/td&gt;';
    s += '&lt;/tr&gt;';
    return s;
}

function buildParameters(parameters, firstColName, secondColName, firstColWidthPercent)
{
    var s = '';
    
    var colWidth = 60;    
    if (typeof(firstColWidthPercent) != "undefined")
    {
        colWidth = parseInt(firstColWidthPercent);
    }
    
    s += '&lt;col style="width: ' + colWidth + '%" /&gt;&lt;col style="width: '+ (100 - colWidth) + '%" /&gt;';
    s += '&lt;tr&gt;&lt;th class="TreeVarHeader1"&gt;' + firstColName + '&lt;/th&gt;&lt;th class="TreeVarHeader2"&gt;' + secondColName + '&lt;/th&gt;&lt;/tr&gt;';	
    for (var i = 0; i &lt; parameters.length; i++)
    {
        var parameter = parameters[i];
        s += ModulesRowContent('simple', parameter[0], parameter[1], 0, 'block'); 	 
    }	
    return s;
}

function buildBrowserCapabilities(parameters)
{
    return buildParameters(parameters, 'Name', 'Value', 30);
}

function buildPageInfo(parameters)
{
    var tableBody = '&lt;table cellpadding="0" cellspacing="0" class="Tab"&gt;&lt;tr&gt;&lt;td class="TabContent"&gt;';
    tableBody += '&lt;div id="' + id + 'content1"&gt;&lt;table cellpadding="0" cellspacing="0" class="TreeVar"&gt;';
    //tableBody += buildParameters(parameters, 'Name', 'Value', 30);
	tableBody += CreateTreeListView(parameters, true);
    tableBody += '&lt;/table&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;';
    return tableBody;
}

function buildEndUserInformation(parameters)
{
    return buildParameters(parameters, 'Name', 'Value', 30);
    //return CreateTreeListView(parameters, true);
}

function buildAJAXCallParameters(parameters, totalSize)
{   
    return CreateTreeListView(parameters, true);
}

function OpenNodeContent(id, tabName, totalSize, totalCount,
    browserCapabilitiesParameters, endUserInformationParameters, AJAXCallParameters)
{
    var activeTab = 0;

    var s = '';
    
    s += TableHead('Tab');	
        
    var tableBody = '';
    tableBody += '&lt;div id="' + id + 'content1"&gt;';
    tableBody += '&lt;table cellpadding="0" cellspacing="0" class="TreeVar"&gt;';
    
    var tableHeader = tabName;

    switch (tabName)
    {
        case 'Asynchronous AJAX Call':
        case 'Synchronous AJAX Call':
            tableBody += buildAJAXCallParameters(AJAXCallParameters);
            break;
        case 'Browser Capabilities':
            tableBody += buildBrowserCapabilities(browserCapabilitiesParameters);
            break;
        case 'End User Information':
            tableBody += buildEndUserInformation(endUserInformationParameters);
            break;
        default:
            break;
    }
    
    //TabBookmarks	
    s += '&lt;tr&gt;';
    s += '&lt;td&gt;&lt;table class=TableBookmark cellspacing=0 cellpadding=0 border=0&gt;&lt;tr&gt;';
    
    if (totalCount !== '')
    {
        tableHeader += ' (' + totalCount + ')';
    }
    
    s += TabBookmark(id, 0, activeTab, tableHeader);
    s += '&lt;td class=TabBookmarkEmpty&gt;&amp;nbsp;&lt;/td&gt;';
    s += '&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;';
    s += '&lt;/tr&gt;';
    
    //Tabs content
    s += '&lt;tr&gt;&lt;td class="TabContent"&gt;';	
    
    s += tableBody;

    s += '&lt;/table&gt;&lt;/div&gt;';		

    return s;	
}

function GlobalTreeExpander(itemId, showobj, prefix)
{
    var objSign = document.getElementById(itemId);  
   
    
    if (objSign.className.indexOf('Minus') &gt; 0)
    {
        objSign.className = prefix + 'Plus';		
        ShowHide(0, showobj);	      	
    }	
    else if (objSign.className.indexOf('Plus') &gt; 0)
    {
        objSign.className = prefix + 'Minus';
        ShowHide(1, showobj);	
    }
}


function SetTabValue(tabControlId, value){
    var i = 0;
 
    while (document.getElementById(tabControlId + i)){
        if (i == value){
            document.getElementById(tabControlId + i).className = "TabBookmarkSel";
            ShowHide(1, tabControlId + 'content' + i);
        } else {
            document.getElementById(tabControlId + i).className = "TabBookmark";
            ShowHide(0, tabControlId + 'content' + i);	    
        }    
        i ++;
    }
}


function ShowTab (id, tabNumber) {
    var obj = document.getElementById(id); 
    var row = obj.parentElement.parentElement.rows[1];
    if (typeof(row) == 'undefined' || row.style.display == 'none') {
        obj.fireEvent("onClick");
    }
    document.getElementById(id + tabNumber).fireEvent('onClick');    
    window.event.cancelBubble = true;    
}

function ShowHide(mode, child)
{
    var objColl = document.all(child);	
        
    if(objColl == null) return;
    
    if (typeof(objColl.length) == 'undefined')
    {
        if (mode == 0)
            objColl.style.display = 'none';
        else
            objColl.style.display = '';
        
        return;
    }
    
    for (var i = 0; i &lt; objColl.length; i++)
    {
        if (mode == 0)
            objColl[i].style.display = 'none';
        else
            objColl[i].style.display = '';
            
    }
}

function ModulesExpander(obj, id, prefix){
    if (obj.className.indexOf('Minus') &gt; 0)
    {
        obj.className = 'TreeVarNodePlus';		
        ShowHide(0, id);    
    }
    else    
    {
        obj.className = 'TreeVarNodeMinus';
        ShowHide(1, id);    
    }
}

function ModulesContent(position, name, version, dateModified, path, pdbPath)
{
    var s = ModulesExpandRowContent(name + ', ' + version, position + 'module', 'Plus');
    s += ModulesRowContent(false, 'Date Modified', dateModified, position + 'module', 'none'); 
    s += ModulesRowContent(true, 'Assembly Path', path, position + 'module', 'none');  
    return s;
}


function AspectsExpander(obj, id, prefix){
    if (obj.className.indexOf('Minus') &gt; 0)
    {
        obj.className = 'TreeVarNodePlus';		
        ShowHide(0, id);    
    }
    else    
    {
        obj.className = 'TreeVarNodeMinus';
        ShowHide(1, id);    
    }
}

function InsertWhiteSpaces(entryId, isLast)
{	
    var s = '&lt;table cellpadding="0" cellspacing="0" class="ExceptionTreeImage"&gt;&lt;tr&gt;';
    s += '&lt;td class="' + (isLast ? 'TreeNodeLast' : 'TreeNodeMiddle') + '"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;'
    s += '&lt;/table&gt;&lt;/tr&gt;';	
    
    return s;
}

function HightLightTab(flagHightLight)
{
    var el = event.srcElement;
    while(el.tagName != "TD") el = el.parentElement;
    if(el.className != 'TabBookmarkSel')
    {
        if(flagHightLight)
            el.className = 'TabBookmarkActive';
        else
            el.className = 'TabBookmark';
    }
}

function GetProfessionalLicenseLimitationMessage(unavailableInformation)
{
    var message = professionalLicenseLimitationTemplate.replace("#UnavailableInformation", unavailableInformation);
    message = "&lt;div class=\"handlerLicenseMessage\"&gt;" + message + "&lt;/div&gt;";
    return message;
}

function StrDecoder(strToDecode)
{
        var decodeString = strToDecode.replace(/&amp;lt;br&amp;gt;/g, "&lt;br&gt;");
        decodeString = decodeString.replace(/\&amp;amp;quot;/g, "&amp;quot;");
        decodeString = decodeString.replace(/&amp;amp;lt;/g, "&amp;lt;");
        decodeString = decodeString.replace(/&amp;amp;gt;/g, "&amp;gt;");
        decodeString = decodeString.replace(/&amp;amp;#39;/g, "&amp;#39;");

        return decodeString;
}

function ContentCreator(containerId, child, tabName, totalSize, totalCount,
     browserCapabilitiesParameters, endUserInformationParameters, AJAXCallParameters)
{
    var container = document.getElementById(containerId);
    if (container)
    {
        var div = document.createElement('DIV');
        div.innerHTML = OpenNodeContent(child, tabName, totalSize, totalCount,
                            browserCapabilitiesParameters, endUserInformationParameters, AJAXCallParameters);
        container.appendChild(div);
    }
}


function CreateRow(rowType, title, value, tooltipText, id, style, entityClass){
    var s = '&lt;tr id="' + id + '" style="Display:' + style + ';" class="Normal"&gt;';
    s += '&lt;td style="width: 32%"&gt;';
    s += '&lt;table class="TreeNodeValue" cellpadding="0" cellspacing="0" width="100%"&gt;&lt;tr&gt;';
    var totalStyle = '';
    rowType = rowType.toString();
    rowType = rowType.toLowerCase();
    
    switch (rowType) {
        case 'last':
            s += '&lt;td class="TreeNodeLast"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
        case 'middle':
            s += '&lt;td class="TreeNodeSibling"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
        case 'simple':
            s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            //s += '&lt;td class="TreeNodeTypeSimple"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
        case 'nonodespace':
            break;
        default:
            s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
    }
    
    if (typeof(entityClass) != "undefined")
    {
        switch (entityClass)
        {
            case 'simple':
                s += '&lt;td class="TreeNodeTypeSimple"&gt;&lt;/td&gt;';
                break;
            case 'class':
                s += '&lt;td class="TreeNodeTypeClass"&gt;&lt;/td&gt;';
                break;
            case 'responseText':
                s += '&lt;td class="TreeNodeTypeFun"&gt;&lt;/td&gt;';
                break;
            default:
                break;
        }
    }
    
    var hint = ' title="' + tooltipText + '"';
    
    s += '&lt;td' + totalStyle + hint + '&gt;' + (title == '' ? '&amp;nbsp;' : title) + '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;';
    s += '&lt;td' + hint + '&gt;' + (value == '' ? '&amp;nbsp;' : value) + '&lt;/td&gt;&lt;/tr&gt;';
    return s;
}

function CreateTreeListView(parameters, addHeader, parentId){
        var s = '';
        var style = 'middle';  
        var entityClass = 'simple';

        if(addHeader)
        {
            s += '&lt;col style="width: 40%" /&gt;&lt;col style="width: 60%" /&gt;';
            s += '&lt;tr&gt;&lt;th class="TreeVarHeader1"&gt;Name&lt;/th&gt;&lt;th class="TreeVarHeader2"&gt;Value&lt;/th&gt;&lt;/tr&gt;';
            style = 'simple';
            entityClass = 'simple';
        }
        
        for (var i = 0; i &lt; parameters.length; i++) {
            var id = 'TreeViewId'+newId();
            var parameter = parameters[i];
            if(typeof(parameter[3]) == "undefined" || parameter[3] == null)
            {
                if (typeof(parentId) != "undefined" &amp;&amp; parentId != null)
                {
                    id = parentId + '_childId';
                }
                else
                {
                    id += newId();
                }
                
                if(i == parameters.length -1 &amp;&amp; !addHeader)
                {
                    style = 'last';
                }
                
                if(parameter[0])
                {
                    if(parameter[0].indexOf("Network Request") &gt; -1 || parameter[0].indexOf("Server Response Time") &gt; -1)
                    {
                        entityClass = "class";
                    }
                    
                    //if(parameter[0].indexOf("Response Text") &gt; -1)
                    //{
                    //    entityClass = "responseText";
                    //}
                    //if(parameter[0].indexOf("Post Data") &gt; -1)
                    //{
                    //    entityClass = "responseText";
                    //}
                }
                
                s += CreateRow(style, parameter[0], parameter[1], parameter[2], id, 'block', entityClass);
            }
            else
            {
                childId = id + '_childId';
                var eClass = 'class';
                if(parameter[2] == 'customList')
                    eClass = parameter[2];
                s += ModulesExpandRowContent(parameter[0], childId, 'Minus', ((parameter[1] != null) ? parameter[1] : ''), false, parameter[2], 'font-weight: normal', eClass);
                s += CreateTreeListView(parameter[3], false, id);
            }
        }
        return s;
    }
    
    

function BuilSectionList(containerId, params)
{
    var s = '';
    var container = document.getElementById(containerId);
    
    s += "&lt;table class='TreeFun' cellSpacing='0' cellPadding='0'&gt;";
    for(i=0;i&lt;params.length;i++)
    {
        s += BuildSectionListItem(params[i]);
    }
    s += "&lt;/table&gt;";

    container.innerHTML = s;
}


function BuildSectionListItem(params)
{
    var id = "CallRow" + newId();
    var s = '&lt;tr class="treeRow"&gt;&lt;td&gt;';
    s += '&lt;div class="TreeRow"&gt;';
    
    s += '&lt;div class="TreeNodeTypeFun" cancelBubble="true"&gt;&lt;/div&gt;';
    s += '&lt;div class="TreeNodeValue" cancelBubble="true"&gt;';

    s += '&lt;table class="TreeNode" cellSpacing="0" cellPadding="0"&gt;';
    s += '&lt;tr&gt;&lt;td class="TreeNodeDetailsPlus" onclick="ExpandCallRow(this, \''+id+'\', '+params[3]+');"&gt;&lt;li&gt;'+params[2]+ '&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;' +params[0]+'&lt;/li&gt;&lt;/td&gt;';
   
    if(params[1] != null &amp;&amp; params[1] != "")
    {
        s += '&lt;td class=TreeNodePChainIn title="Chain info" onclick="'+params[1]+'"&gt;&lt;/td&gt;';
    }
    s += '&lt;/tr&gt;&lt;tr  id="'+id+'_content" style="display: none;"&gt;&lt;td'+((params[1] != null &amp;&amp; params[1] != "") ? ' colspan="2"' : "")+' id="'+id+'" style="padding: 5px 0 10px 0;"&gt;&lt;/td&gt;&lt;/tr&gt;';
    s += "&lt;/table&gt;";
    
    s += '&lt;/div&gt;';
    s += '&lt;/div&gt;';
    s += '&lt;/td&gt;&lt;/tr&gt;';
    
    return s;
}

function BuildCallParams(params)
{
    var s = "[";

    for(i=0; i&lt;params.length; i++)
    {
        var param = params[i];
        
        if(i&gt;0)
        {
            s += ", ";
        }
        if(typeof(param) != 'undefined' &amp;&amp; typeof(param.length) == 'undefined')
        {
            s += "'"+param+"'";
        }
        else if(typeof(param) != 'undefined')
        {
            s += BuildCallParams(param)
        }
        
    }
    
    s += "]";
    
    return s;
}


function ExpandSection(oSecTitle)
{
    var sectionId = oSecTitle.nextSibling.id;
    if(oSecTitle.className.indexOf("Minus") &gt; -1)
    {
        oSecTitle.className = "CallSectionTitlePlus";
        ShowHide(0, sectionId);
    }
    else
    {
        oSecTitle.className = "CallSectionTitleMinus";
        ShowHide(1, sectionId);
    }
}

function ExpandCallRow(oRowTitle, containerId, params)
{
    var container = document.getElementById(containerId);
    var containerRowId = container.parentElement.id;
    
    if(oRowTitle.className.indexOf("Minus") &gt; -1)
    {
        oRowTitle.className = "TreeNodeDetailsPlus";
        ShowHide(0, containerRowId);
    }
    else
    {
        if(container.innerHTML == "")
        {
            BuildCallDetailsTable(containerId, params);
        }
        oRowTitle.className = "TreeNodeDetailsMinus";
        ShowHide(1, containerRowId);
    }
}

function BuildCallDetailsTable(containerId, params)
{
    var s = '&lt;table cellpadding="0" cellspacing="0" class="TreeVar"&gt;';
    s += CreateTreeListView(params, true);
    s += '&lt;/table&gt;';
    
    var container = document.getElementById(containerId);
    var div = document.createElement('DIV');
    div.innerHTML = s;
    container.appendChild(div);

}
                
          </xsl:comment>
        </xsl:element>
      </xsl:template>
      <!-- end of templates for AVIMOMCSMAMonitorLog -->

      <!-- templates for AVIMOMCSMXMonitorLog -->
      <xsl:template match="EventData" mode="AVIMOMCSMXMonitorLog">
        <xsl:if test="count(notLicense) = 0">
          <xsl:for-each select="*[local-name()='log']">
            <xsl:call-template name="AVIMOMCSMXMain" />
          </xsl:for-each>
        </xsl:if>
        <xsl:call-template name="AVIMOMCSMXLicenseWizard" />
      </xsl:template>
      <xsl:template match="EventData/*[local-name()='log']/Enterprise" mode="AVIMOMCSMXMonitorLog">
        <xsl:if test="count(notLicense) = 0">
          <xsl:for-each select="*[local-name()='log']">
            <xsl:call-template name="AVIMOMCSMXMain" />
          </xsl:for-each>
        </xsl:if>
        <xsl:call-template name="AVIMOMCSMXLicenseWizard" />
      </xsl:template>
      <xsl:template name="AVIMOMCSMXLicenseWizard">
        <xsl:if test="count(licenseWizard) &gt; 0">
          <xsl:value-of select="licenseWizard/licenseWizardText" />
          <xsl:element name="br" />
          <xsl:element name="br" />
          <xsl:text>Please </xsl:text>
          <xsl:element name="a">
            <xsl:attribute name="href">
              <xsl:value-of select="licenseWizard/licenseWizardUrl" />
            </xsl:attribute>
            <xsl:text>click here</xsl:text>
          </xsl:element>
          <xsl:text> to open license management wizard.</xsl:text>
        </xsl:if>
      </xsl:template>
      <xsl:template name="AVIMOMCSMXMain">
        <xsl:value-of select="outputScript" disable-output-escaping="yes" />
        <xsl:call-template name="AVIMOMCSMXViewerLink" />
        <xsl:call-template name="AVIMOMCSMXPageInfo" />
        <xsl:apply-templates select="exceptionInformation" mode="AVIMOMCSMXExceptionInformation" />
        <xsl:if test="mode != 'light'">
          <xsl:apply-templates select="globalVariables" mode="AVIMOMCSMXGlobalVariables" />
        </xsl:if>
        <xsl:apply-templates select="browserCapabilities" mode="AVIMOMCSMXBrowserCapabilities" />
        <xsl:apply-templates select="endUserInformation" mode="AVIMOMCSMXEndUserInformation" />
        <xsl:call-template name="AVIMOMCSMXCollectionNotes" />
      </xsl:template>
      <xsl:template name="AVIMOMCSMXViewerLink">
        <xsl:if test="count(../ViewDetail) &gt; 0">
          <xsl:element name="a">
            <xsl:attribute name="href">
              <xsl:value-of select="../ViewDetail" />
            </xsl:attribute>
            <xsl:text>Click here</xsl:text>
          </xsl:element>
          <xsl:text> for additional Event details.</xsl:text>
        </xsl:if>
      </xsl:template>
      <xsl:template name="AVIMOMCSMXPageInfo">
        <script type="text/javascript">
          <xsl:text>
                
            var pageInfoBuilded = false;
            
            function BuildPageInfo()
            {
                GlobalTreeExpander('pageInfo','pageInfoContent','TreeNode');
                if(!pageInfoBuilded)
                {
                    var oPageInfo = document.getElementById('pageInfoContent');
                    var params = new Array();
                    params[0] = ['queryString', '</xsl:text>
          <xsl:value-of select="pageQueryString" />
          <xsl:text>', '__NOTYPE__'];
                    params[1] = ['sessionID', '</xsl:text>
          <xsl:value-of select="eventCorrelationInfo/sessionId" />
          <xsl:text>', '__NOTYPE__'];
                    params[2] = ['urlReferrer', '</xsl:text>
          <xsl:value-of select="eventCorrelationInfo/refererUrl" />
          <xsl:text>', '__NOTYPE__'];
                    <!-- Insert additional parameters if request was to MVC .Net Application-->
		</xsl:text>
          <xsl:variable name="smallcase" select="'abcdefghijklmnopqrstuvwxyz'" />
          <xsl:variable name="uppercase" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'" />
          <xsl:variable name="isMvcRequest" select="properties/property[name = 'IsMvcRequest']/value" />
          <xsl:if test="translate($isMvcRequest, $smallcase, $uppercase) = 'TRUE'">
            <xsl:text>
                    params[3] = ['MVC Controller', '</xsl:text>
            <xsl:value-of select="properties/property[name = 'mvc_Controller']/value" />
            <xsl:text>'];
                    params[4] = ['MVC Action', '</xsl:text>
            <xsl:value-of select="properties/property[name = 'mvc_Action']/value" />
            <xsl:text>'];
				</xsl:text>
          </xsl:if>
          <xsl:text>
		<!-- END -->
                    oPageInfo.innerHTML = ContentBuilder.CreatePageInfoTable(params);
                    pageInfoBuilded = true;
                }
            }
            
            </xsl:text>
        </script>
        <div class="PageInfoContainer">
          <table cellspacing="0" cellpadding="0" class="PageInfoHeader">
            <tr>
              <td id="pageInfo" class="TreeNodePlus" onclick="BuildPageInfo();">
                <div class="PageUrl">
                  <span class="PageUrlLabel">Page Url: </span>
                  <span class="PageUrlName">
                    <xsl:attribute name="title">
                      <xsl:value-of select="pageUrl" />
                    </xsl:attribute>
                    <xsl:value-of select="pageUrl" />
                  </span>
                </div>
              </td>
              <xsl:if test="count(clientLink) &gt; 0">
                <xsl:element name="td">
                  <xsl:attribute name="title">Chain info</xsl:attribute>
                  <xsl:attribute name="onclick">
                    <xsl:value-of select="clientLink" />
                  </xsl:attribute>
                  <xsl:attribute name="class">TreeNodePChainIn</xsl:attribute>
                  <xsl:element name="img">
                    <xsl:attribute name="src">
                      <xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.empty')" />
                    </xsl:attribute>
                    <xsl:attribute name="width">20</xsl:attribute>
                    <xsl:attribute name="height">15</xsl:attribute>
                  </xsl:element>
                </xsl:element>
              </xsl:if>
            </tr>
          </table>
          <div id="pageInfoContent" class="PageInfoContent" style="display:none;">
            <li />
          </div>
        </div>
      </xsl:template>
      <xsl:template match="exceptionInformation" mode="AVIMOMCSMXExceptionInformation">
        <xsl:for-each select=".">
          <xsl:call-template name="AVIMOMCSMXAspects" />
          <table cellpadding="0" cellspacing="0" class="Header">
            <tr>
              <td class="HeaderTitle" onclick="GlobalTreeExpander('exceptionDataH','exceptionContent','TreeNode');">Exception Data</td>
              <td id="exceptionDataH" onclick="GlobalTreeExpander('exceptionDataH','exceptionContent','TreeNode');">
                <xsl:choose>
                  <xsl:when test="count(aspect) &gt; 0">
                    <xsl:attribute name="class">TreeNodePlus</xsl:attribute>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:attribute name="class">TreeNodeMinus</xsl:attribute>
                  </xsl:otherwise>
                </xsl:choose>
                <li />
              </td>
            </tr>
          </table>
          <div id="exceptionContent">
            <xsl:if test="count(aspect) &gt; 0">
              <xsl:attribute name="style">display:none;</xsl:attribute>
            </xsl:if>
            <xsl:call-template name="AVIMOMCSMXExceptionData" />
          </div>

          <xsl:if test="//mode != 'light'">
            <table cellpadding="0" cellspacing="0" class="Header">
              <tr>
                <td class="HeaderTitle" onclick="GlobalTreeExpander('exceptionStackH','mainTreeFun','TreeNode');">Stack</td>
                <td id="exceptionStackH" onclick="GlobalTreeExpander('exceptionStackH','mainTreeFun','TreeNode');">
                  <xsl:choose>
                    <xsl:when test="count(aspect) &gt; 0">
                      <xsl:attribute name="class">TreeNodePlus</xsl:attribute>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:attribute name="class">TreeNodeMinus</xsl:attribute>
                    </xsl:otherwise>
                  </xsl:choose>
                  <li />
                </td>
              </tr>

            </table>
            <xsl:call-template name="AVIMOMCSMXFunctionStack" />
          </xsl:if>
        </xsl:for-each>
      </xsl:template>
      <xsl:template name="AVIMOMCSMXAspects">
        <xsl:if test="aspect/@type = 'Security' or aspect/@type = 'Connectivity'">
          <table cellpadding="0" cellspacing="0" class="Header">
            <tr>
              <td class="HeaderTitle" onclick="GlobalTreeExpander('aspectStack','aspectContainer','TreeNode');">Description</td>
              <td id="aspectStack" class="TreeNodeMinus" onclick="GlobalTreeExpander('aspectStack','aspectContainer','TreeNode');">
                <li />
              </td>
            </tr>
          </table>
          <div id="aspectContainer">
            <!-- Exception info -->
            <div style="padding: 0 0 5px 2px;">
              <xsl:value-of select="aspect/aspectDescription" />
            </div>
            <!-- Aspect data -->
            <xsl:if test="count(aspect/*[local-name()='target' or local-name()='action' or local-name()='security']) &gt; 0">
              <div id="aspectRows" style="Display:;" class="ModulesVar">
                <table cellpadding="0" cellspacing="0" class="TreeVar">
                  <col class="TreeVarCol1" />
                  <col class="TreeVarCol2" />
                  <tr>
                    <th class="TreeVarHeader1">Name</th>
                    <th class="TreeVarHeader2">Value</th>
                  </tr>
                  <!-- target -->
                  <xsl:if test="count(aspect/target/item) &gt; 0">
                    <tr class="Normal">
                      <td style="width: 32%;">
                        <table class="TreeNodeValue" cellpadding="0" cellspacing="0">
                          <tr>
                            <td class="TreeVarNodeMinus" onclick="AspectsExpander(this, 'target');">
                              <li />
                            </td>
                            <td class="TreeNodeTarget">
                              <li />
                            </td>
                            <td>Target</td>
                          </tr>
                        </table>
                      </td>
                      <td>
                        <img src="Images\AVIcode.DotNet.SystemCenter.Images.empty" width="1" height="1" />
                      </td>
                    </tr>
                  </xsl:if>
                  <xsl:for-each select="aspect/target/item">
                    <xsl:call-template name="AVIMOMCSMXAspectRow">
                      <xsl:with-param name="id">target</xsl:with-param>
                    </xsl:call-template>
                  </xsl:for-each>
                  <!-- action -->

                  <xsl:if test="count(aspect/action/item) &gt; 0">
                    <tr class="Normal">
                      <td style="width: 32%;">
                        <table class="TreeNodeValue" cellpadding="0" cellspacing="0">
                          <tr>
                            <td class="TreeVarNodeMinus" onclick="AspectsExpander(this, 'action');">
                              <li />
                            </td>
                            <td class="TreeNodeAction">
                              <li />
                            </td>
                            <td>Actions</td>
                          </tr>
                        </table>
                      </td>
                      <td>
                        <img src="Images\AVIcode.DotNet.SystemCenter.Images.empty" width="1" height="1" />
                      </td>
                    </tr>
                  </xsl:if>
                  <xsl:for-each select="aspect/action/item">
                    <xsl:call-template name="AVIMOMCSMXAspectRow">
                      <xsl:with-param name="id">action</xsl:with-param>
                    </xsl:call-template>
                  </xsl:for-each>
                  <!-- security context -->

                  <xsl:if test="count(aspect/security/item) &gt; 0">
                    <tr class="Normal">
                      <td style="width: 32%;">
                        <table class="TreeNodeValue" cellpadding="0" cellspacing="0">
                          <tr>
                            <td class="TreeVarNodeMinus" onclick="AspectsExpander(this, 'context');">
                              <li />
                            </td>
                            <td class="TreeNodeSecurity">
                              <li />
                            </td>
                            <td>Security context</td>
                          </tr>
                        </table>
                      </td>
                      <td>
                        <img src="Images\AVIcode.DotNet.SystemCenter.Images.empty" width="1" height="1" />
                      </td>
                    </tr>
                  </xsl:if>
                  <xsl:for-each select="aspect/security/item">
                    <xsl:call-template name="AVIMOMCSMXAspectRow">
                      <xsl:with-param name="id">context</xsl:with-param>
                    </xsl:call-template>
                  </xsl:for-each>
                </table>
              </div>
            </xsl:if>
          </div>
        </xsl:if>
      </xsl:template>
      <xsl:template name="AVIMOMCSMXAspectRow">
        <xsl:param name="id" />
        <tr id="{$id}" class="Normal">
          <td style="width: 32%;">
            <table class="TreeNodeValue" cellpadding="0" cellspacing="0">
              <tr>
                <td>
                  <xsl:choose>
                    <xsl:when test="position()=last()">
                      <xsl:attribute name="class">TreeNodeLast</xsl:attribute>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:attribute name="class">TreeNodeSibling</xsl:attribute>
                    </xsl:otherwise>
                  </xsl:choose>
                  <li />
                </td>
                <td>
                  <xsl:value-of select="name" />
                </td>
              </tr>
            </table>
          </td>
          <td>
            <xsl:value-of select="value" />
            <xsl:text disable-output-escaping="yes">&amp;nbsp;</xsl:text>
          </td>
        </tr>
      </xsl:template>
      <xsl:template name="AVIMOMCSMXFunctionStack">
        <xsl:variable name="stackPoints" select="count(events/event/stack/stackPoint)" />
        <xsl:variable name="anonymousStackPoints" select="count(events/event/stack/stackPoint[method = 'anonymous'])" />
        <xsl:variable name="stackPointsWithoutParameters" select="count(events/event/stack/stackPoint[count(parameters/variable) = 0])" />
        <div id="mainTreeFun">
          <xsl:if test="count(aspect) &gt; 0">
            <xsl:attribute name="style">display:none;</xsl:attribute>
          </xsl:if>
          <!-- Checkbox line -->
          <table cellpadding="0" cellspacing="0" class="HeaderInput">
            <tr>
              <td class="CheckBox">
                <xsl:choose>
                  <xsl:when test="count(events/event/stack/stackPoint[style='Low']) &gt; 0 or count(events/handler/stackPoint[style='Low']) &gt; 0">
                    <input id="input" type="checkbox">
                      <xsl:attribute name="onclick">ShowLow(this)</xsl:attribute>
                    </input>
                    <label for="input">Show Complete Stack</label>
                  </xsl:when>
                  <xsl:otherwise>
                    <input id="input" type="checkbox">
                      <xsl:attribute name="disabled">true</xsl:attribute>
                      <xsl:attribute name="checked">true</xsl:attribute>
                    </input>
                    <label for="input" disabled="true" style="cursor: default">Show Complete Stack</label>
                  </xsl:otherwise>
                </xsl:choose>
              </td>
              <td class="CheckBox">
                <xsl:choose>
                  <xsl:when test="$stackPoints &gt; 0">
                    <input id="cbShowParameters" type="checkbox">
                      <xsl:attribute name="onclick">return ShowFuncParams(this)</xsl:attribute>
                    </input>
                    <label for="cbShowParameters">Show Parameters</label>
                  </xsl:when>
                  <xsl:otherwise>
                    <input id="cbShowParameters" type="checkbox">
                      <xsl:attribute name="disabled">true</xsl:attribute>
                    </input>
                    <label for="cbShowParameters" disabled="true" style="cursor: default">Show Parameters</label>
                  </xsl:otherwise>
                </xsl:choose>
              </td>
              <td class="CheckBox">
                <xsl:choose>
                  <xsl:when test="$stackPoints &gt; $anonymousStackPoints">
                    <!-- There is at least one not anonymous function -->
                    <input id="cbShowLines" type="checkbox">
                      <xsl:attribute name="onclick">return ShowFuncLines(this)</xsl:attribute>
                    </input>
                    <label for="cbShowLines">Show Lines</label>
                  </xsl:when>
                  <xsl:otherwise>
                    <input id="cbShowLines" type="checkbox">
                      <xsl:attribute name="disabled">true</xsl:attribute>
                    </input>
                    <label for="cbShowLines" disabled="true" style="cursor: default">Show Lines</label>
                  </xsl:otherwise>
                </xsl:choose>
              </td>
              <td />
              <td>
                <a href="javascript: CollapseAll()">Collapse all</a>
              </td>
            </tr>
          </table>
          <br />
          <br />
          <!-- Create exceptions' stack -->
          <xsl:for-each select="events/event">
            <div id="stackelem">
              <xsl:attribute name="mainId">
                <xsl:value-of select="position()" />
                <xsl:text>ev</xsl:text>
              </xsl:attribute>
              <!-- Information about exception current stack belong to -->
              <table cellspacing="0" cellpadding="0" class="ExceptionData">
                <tr>
                  <td id="1sp{position()}ex" class="TreeNodeDetailsPlus">
                    <xsl:attribute name="class">
                      <xsl:choose>
                        <xsl:when test="position() = 1">
                          <xsl:text>TreeNodeDetailsPlusSelected</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:text>TreeNodeDetailsPlus</xsl:text>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:attribute>
                    <xsl:attribute name="onclick">
                      <xsl:text>Expander(this,'TreeNodeDetails',</xsl:text>
                      <xsl:call-template name="AVIMOMCSMXExceptionParameters">
                        <xsl:with-param name="mainId">
                          <xsl:value-of select="position()" />
                          <xsl:text>ex</xsl:text>
                        </xsl:with-param>
                      </xsl:call-template>
                      <xsl:text>, false);</xsl:text>
                    </xsl:attribute>
                    <li>
                      <a name="1sp{position()}ex" />
                      <xsl:element name="b">
                        <xsl:value-of select="variable/type" />
                        <xsl:text>: </xsl:text>
                      </xsl:element>
                      <xsl:value-of select="variable/description" />
                      <xsl:element name="i">
                        <xsl:text> thrown at</xsl:text>
                      </xsl:element>
                    </li>
                  </td>
                </tr>
              </table>
              <!-- Stack -->
              <xsl:call-template name="AVIMOMCSMXStack">
                <xsl:with-param name="mainId">
                  <xsl:value-of select="position()" />
                  <xsl:text>ev</xsl:text>
                </xsl:with-param>
                <xsl:with-param name="stackPath" select="stack/stackPoint" />
              </xsl:call-template>
            </div>
          </xsl:for-each>
          <!-- Create handler's stack -->
          <xsl:for-each select="events/handler">
            <br />
            <div id="stackelem">
              <xsl:attribute name="mainId">
                <xsl:value-of select="position()" />
                <xsl:text>hev</xsl:text>
              </xsl:attribute>
              <!-- Information about exception current stack belonging to -->
              <br />
              <b>
                <xsl:text>Handled at</xsl:text>
              </b>
              <!-- Stack -->
              <xsl:call-template name="AVIMOMCSMXStack">
                <xsl:with-param name="mainId">
                  <xsl:value-of select="position()" />
                  <xsl:text>hev</xsl:text>
                </xsl:with-param>
                <xsl:with-param name="stackPath" select="stackPoint" />
              </xsl:call-template>
            </div>
          </xsl:for-each>
        </div>
      </xsl:template>
      <xsl:template name="AVIMOMCSMXExceptionData">
        <xsl:for-each select="events/event">
          <div id="exceptiondata">
            <xsl:attribute name="mainId">
              <xsl:value-of select="position()" />
              <xsl:text>ev</xsl:text>
            </xsl:attribute>
            <xsl:attribute name="Style">
              <xsl:if test="level = 'derived'">DISPLAY:none</xsl:if>
              <xsl:if test="level != 'derived'">DISPLAY:block</xsl:if>
            </xsl:attribute>
            <Script Language="JavaScript">
              <xsl:text>document.write(ExceptionExpander('</xsl:text>
              <xsl:value-of select="position()" />
              <xsl:text>exTree','*</xsl:text>
              <xsl:value-of select="variable/id" />
              <xsl:text>'));</xsl:text>
            </Script>
          </div>
        </xsl:for-each>
      </xsl:template>
      <xsl:template name="AVIMOMCSMXStack">
        <xsl:param name="mainId" />
        <xsl:param name="stackPath" />
        <!-- Stack  -->
        <table class="TreeFun" cellspacing="0" cellpadding="0">
          <xsl:for-each select="$stackPath">
            <xsl:variable name="pos" select="position()" />
            <xsl:if test="style != 'Low' and ../stackPoint[$pos - 1]/style = 'Low'">
              <tr id="Dots" class="Dots">
                <td colspan="2">...</td>
              </tr>
            </xsl:if>
            <tr>
              <xsl:if test="style='Low'">
                <xsl:attribute name="id">Low</xsl:attribute>
                <xsl:attribute name="style">Display:none;</xsl:attribute>
              </xsl:if>
              <Script Language="JavaScript">
                document.write(FuncImage(
                <xsl:if test="style='High'">
                  <xsl:text>true</xsl:text>
                </xsl:if>
                ));
              </Script>
              <td>
                <table cellspacing="0" cellpadding="0" class="TreeNode">
                  <tr>
                    <xsl:if test="style='High'">
                      <xsl:attribute name="id">High</xsl:attribute>
                    </xsl:if>
                    <td id="{position()}sp{$mainId}" class="TreeNodeDetailsPlus">
                      <xsl:attribute name="onclick">
                        <xsl:text>Expander(this,'TreeNodeDetails',</xsl:text>
                        <xsl:call-template name="AVIMOMCSMXParameters">
                          <xsl:with-param name="mainId" select="$mainId" />
                        </xsl:call-template>
                        <xsl:text>, true);</xsl:text>
                      </xsl:attribute>
                      <li>
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="style='Low'">TreeNodeValueLow</xsl:when>
                            <xsl:otherwise>TreeNodeValue</xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:call-template name="AVIMOMCSMXEventName">
                          <xsl:with-param name="mainId" select="$mainId" />
                        </xsl:call-template>
                      </li>
                    </td>
                    <td style="WIDTH: 16px">
                      <xsl:if test="count(serverLink) &gt; 0">
                        <xsl:attribute name="title">Chain info</xsl:attribute>
                        <xsl:attribute name="onclick">
                          <xsl:value-of select="serverLink" />
                        </xsl:attribute>
                        <xsl:attribute name="class">TreeNodeEChainIn</xsl:attribute>
                      </xsl:if>
                      <xsl:if test="count(clientLink) &gt; 0">
                        <xsl:attribute name="title">Chain info</xsl:attribute>
                        <xsl:attribute name="onclick">
                          <xsl:value-of select="clientLink" />
                        </xsl:attribute>
                        <xsl:attribute name="class">TreeNodeEChainOut</xsl:attribute>
                      </xsl:if>
                    </td>
                  </tr>
                </table>
              </td>
            </tr>
          </xsl:for-each>
        </table>
      </xsl:template>
      <xsl:template name="AVIMOMCSMXEventName">
        <xsl:param name="mainId" />
        <xsl:variable name="parameterExist" select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.parameterExist')" />
        <div class="FuncIcons">
          <xsl:choose>
            <xsl:when test="count(parameters/variable[name!='this']) &gt; 0">
              <span class="IconSpace">
                <a href="#" onclick="ShowTab('{position()}sp{$mainId}', 0)">
                  <img src="{$parameterExist}" width="12" height="11" border="0" vspace="2" alt="Show parameters" />
                </a>
              </span>
            </xsl:when>
            <xsl:when test="count(parameters/variable[name='this']/variables/variable) &gt; 0">
              <span class="IconSpace">
                <a href="#" onclick="ShowTab('{position()}sp{$mainId}', 1)">
                  <img src="{$parameterExist}" width="12" height="11" border="0" vspace="2" alt="Show members" />
                </a>
              </span>
            </xsl:when>
          </xsl:choose>
          <xsl:if test="source">
            <span class="IconSpace">
              <xsl:variable name="sourceExist" select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.sourceExist')" />
              <a href="#" onclick="ShowTab('{position()}sp{$mainId}', 2)">
                <img src="{$sourceExist}" width="12" height="11" border="0" vspace="2" alt="Show source" />
              </a>
            </span>
          </xsl:if>
        </div>
        <div class="FuncName">
          <xsl:choose>
            <xsl:when test="string-length(substring-before(description, '(')) != 0">
              <xsl:value-of select="substring-before(description, '(')" disable-output-escaping="yes" />
              <span id="funcParams" style="display: none">
                <xsl:attribute name="class">
                  <xsl:if test="not(style) or style != 'Low'">
                    <xsl:text>FuncParams</xsl:text>
                  </xsl:if>
                </xsl:attribute>
                <xsl:text>(</xsl:text>
                <xsl:value-of select="substring-before(substring-after(description, '('), ')')" disable-output-escaping="yes" />
                <xsl:text>)</xsl:text>
              </span>
              <xsl:value-of select="substring-after(description, ')')" disable-output-escaping="yes" />
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="description" disable-output-escaping="yes" />
            </xsl:otherwise>
          </xsl:choose>
          <span id="funcLines" style="display: none">
            <xsl:if test="source/file">
              <xsl:text> in </xsl:text>
              <xsl:choose>
                <xsl:when test="source/file != 'unknown file'">
                  <xsl:value-of select="source/file" />
                  <xsl:if test="(source/line != '') and (source/line != '-1') and (count[source/interestingLines] &gt; 1)">
                    <xsl:text>: </xsl:text>
                    <xsl:value-of select="source/line" />
                  </xsl:if>
                  <xsl:text>.</xsl:text>
                  <!--</a>-->
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="source/file" />
                  <xsl:text>.</xsl:text>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:if>
          </span>
        </div>
      </xsl:template>
      <xsl:template name="AVIMOMCSMXExceptionParameters">
        <xsl:param name="mainId" />
        <xsl:text>'</xsl:text>
        <xsl:value-of select="position()" />
        <xsl:text>sp</xsl:text>
        <xsl:value-of select="$mainId" />
        <xsl:text>',</xsl:text>
        <!-- Exception details -->

        <xsl:if test="count(variable/variables/variable) &gt; 0">
          <xsl:text>[</xsl:text>
          <xsl:for-each select="variable/variables/variable">
            <xsl:text>'*</xsl:text>
            <xsl:value-of select="objectID" />
            <xsl:text>'</xsl:text>
            <xsl:if test="position()!= last()">
              <xsl:text>,</xsl:text>
            </xsl:if>
          </xsl:for-each>
          <xsl:text>],[</xsl:text>
          <xsl:for-each select="variable/variables/variable">
            <xsl:text>'</xsl:text>
            <xsl:value-of select="name" />
            <xsl:text>'</xsl:text>
            <xsl:if test="position()!= last()">
              <xsl:text>,</xsl:text>
            </xsl:if>
          </xsl:for-each>
          <xsl:text>],</xsl:text>
        </xsl:if>
        <xsl:if test="count(variable/variables/variable) = 0">
          <xsl:text>'','',</xsl:text>
        </xsl:if>
        <!-- MemIds, MemNames -->
        <xsl:text>'','',</xsl:text>
        <!-- LocIds, LocNames -->
        <xsl:text>'','',</xsl:text>
        <!-- 
            isSource, Source 
            We try to find the deepest function which has the source code 
        -->
        <xsl:choose>
          <xsl:when test="count(stack/stackPoint[source]) &gt; 0">
            <xsl:for-each select="stack/stackPoint[source][1]">
              <xsl:call-template name="AVIMOMCSMXSourceInfo">
                <xsl:with-param name="exceptionType" select="ancestor::*[name() = 'event']/variable/type" />
              </xsl:call-template>
            </xsl:for-each>
          </xsl:when>
          <!-- if no sorce data collected we'll take module info from the first "High"-stlyle stackPoint -->
          <xsl:when test="count(stack/stackPoint[style='High']) &gt; 0">
            <xsl:for-each select="stack/stackPoint[style='High'][1]">
              <xsl:call-template name="AVIMOMCSMXSourceInfo">
                <xsl:with-param name="exceptionType" select="ancestor::*[name() = 'event']/exception/type" />
              </xsl:call-template>
            </xsl:for-each>
          </xsl:when>
          <!-- if no sorce data collected and no "High"-stlyle stackPoints exist we'll take module info from the first stackPoint element -->
          <xsl:when test="count(stack/stackPoint) &gt; 0">
            <xsl:for-each select="stack/stackPoint[1]">
              <xsl:call-template name="AVIMOMCSMXSourceInfo">
                <xsl:with-param name="exceptionType" select="ancestor::*[name() = 'event']/exception/type" />
              </xsl:call-template>
            </xsl:for-each>
          </xsl:when>
          <!-- Otherwise we just call template in order to generate default stub -->
          <xsl:otherwise>
            <xsl:call-template name="AVIMOMCSMXSourceInfo">
              <xsl:with-param name="exceptionType" select="exception/type" />
            </xsl:call-template>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:template>
      <xsl:template name="AVIMOMCSMXParameters">
        <xsl:param name="mainId" />
        <xsl:text>'</xsl:text>
        <xsl:value-of select="position()" />
        <xsl:text>sp</xsl:text>
        <xsl:value-of select="$mainId" />
        <xsl:text>',</xsl:text>

        <!-- VarIds, VarNames -->
        <xsl:choose>
          <xsl:when test="(count(parameters/variable[name!='this']) &gt; 0) and (count(//professionalLicenseLimitation) = 0)">
            <xsl:text>[</xsl:text>
            <xsl:for-each select="parameters/variable[name!='this']">
              <xsl:text>'*</xsl:text>
              <xsl:value-of select="objectID" />
              <xsl:text>'</xsl:text>
              <xsl:if test="position()!=last()">
                <xsl:text>,</xsl:text>
              </xsl:if>
            </xsl:for-each>
            <xsl:text>],[</xsl:text>
            <xsl:for-each select="parameters/variable[name!='this']">
              <xsl:text>'</xsl:text>
              <xsl:value-of select="name" />
              <xsl:text>'</xsl:text>
              <xsl:if test="position()!=last()">
                <xsl:text>,</xsl:text>
              </xsl:if>
            </xsl:for-each>
            <xsl:text>],</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>'','',</xsl:text>
          </xsl:otherwise>
        </xsl:choose>

        <!-- MemIds, MemNames -->
        <xsl:choose>
          <xsl:when test="(count(parameters/variable[name='this']/variables/variable) &gt; 0) and (count(//professionalLicenseLimitation) = 0)">
            <xsl:text>[</xsl:text>
            <xsl:for-each select="parameters/variable[name='this']/variables/variable">
              <xsl:text>'*</xsl:text>
              <xsl:value-of select="objectID" />
              <xsl:text>'</xsl:text>
              <xsl:if test="position()!=last()">
                <xsl:text>,</xsl:text>
              </xsl:if>
            </xsl:for-each>
            <xsl:text>],[</xsl:text>
            <xsl:for-each select="parameters/variable[name='this']/variables/variable">
              <xsl:text>'</xsl:text>
              <xsl:value-of select="name" />
              <xsl:text>'</xsl:text>
              <xsl:if test="position()!=last()">
                <xsl:text>,</xsl:text>
              </xsl:if>
            </xsl:for-each>
            <xsl:text>],</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>'','',</xsl:text>
          </xsl:otherwise>
        </xsl:choose>

        <!-- LocIds, LocNames -->
        <xsl:text>'','',</xsl:text>

        <!-- isSource, Source -->
        <xsl:call-template name="AVIMOMCSMXSourceInfo" />
      </xsl:template>
      <xsl:template name="AVIMOMCSMXSourceInfo">
        <xsl:param name="exceptionType" />
        <xsl:choose>
          <xsl:when test="source">
            <xsl:text>true, '</xsl:text>
            <xsl:value-of select="//source" />
            <xsl:text>', </xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>false,'',</xsl:text>
          </xsl:otherwise>
        </xsl:choose>
        <!-- isAliased, FunctionName -->

        <xsl:choose>
          <xsl:when test="substring-before(description, '.') != substring-before(method, '.') and substring-before(description, '.') != method">
            <xsl:text>true,'</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>false,'</xsl:text>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:choose>
          <xsl:when test="$exceptionType">
            <xsl:value-of select="$exceptionType" />
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="method" />
          </xsl:otherwise>
        </xsl:choose>
        <xsl:text>','</xsl:text>
        <!-- iPointer -->
        <!--Commented by Stanislav S.Kuvshinov (): "Unneeded"
           <xsl:value-of select="iPointer" />-->
        <xsl:text />
        <xsl:text>','</xsl:text>
        <!-- module, version, dateModified, path, pdbPath -->
        <xsl:value-of select="module" />
        <xsl:text>','</xsl:text>
        <xsl:call-template name="AVIMOMCSMXModuleInfo">
          <xsl:with-param name="module">
            <xsl:value-of select="module" />
          </xsl:with-param>
        </xsl:call-template>
        <!-- source line, file ref, code lines, code lines type, methodInfo -->
        <xsl:value-of select="source/line" />
        <xsl:text>','</xsl:text>
        <xsl:value-of select="source/fileRef" />
        <xsl:text>',</xsl:text>
        <xsl:if test="count(source/code/line) &gt; 0">
          <xsl:text>[</xsl:text>
          <xsl:for-each select="source/code/line">
            <xsl:text>'</xsl:text>
            <xsl:value-of select="." />
            <xsl:text>'</xsl:text>
            <xsl:if test="position()!=last()">
              <xsl:text>,</xsl:text>
            </xsl:if>
          </xsl:for-each>
          <xsl:text>],</xsl:text>
        </xsl:if>
        <xsl:if test="count(source/code/line)= 0">
          <xsl:text>'',</xsl:text>
        </xsl:if>
        <xsl:if test="count(source/code/line) &gt; 0">
          <xsl:text>[</xsl:text>
          <xsl:for-each select="source/code/line">
            <xsl:text>'</xsl:text>
            <xsl:value-of select="@main" />
            <xsl:text>'</xsl:text>
            <xsl:if test="position()!=last()">
              <xsl:text>,</xsl:text>
            </xsl:if>
          </xsl:for-each>
          <xsl:text>]</xsl:text>
        </xsl:if>
        <xsl:if test="count(source/code/line)= 0">
          <xsl:text>''</xsl:text>
        </xsl:if>
        <xsl:text>,'</xsl:text>
        <xsl:value-of select="normalize-space(methodInfo)" />
        <xsl:text>',</xsl:text>
        <xsl:choose>
          <xsl:when test="wrongModule">
            <xsl:text>true</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>false</xsl:text>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:template>
      <xsl:template name="AVIMOMCSMXModuleInfo">
        <xsl:param name="module" />
        <xsl:if test="count(//modules/module[path=$module]) &gt; 0">
          <xsl:variable name="moduleInfo" select="//modules/module[path=$module]" />
          <xsl:value-of select="$moduleInfo/version" />
          <xsl:text>','</xsl:text>
          <xsl:value-of select="$moduleInfo/dateModified" />
          <xsl:text>','</xsl:text>
          <xsl:value-of select="$moduleInfo/path" />
          <xsl:text>','</xsl:text>
          <xsl:value-of select="$moduleInfo/pdbPath" />
          <xsl:text>','</xsl:text>
        </xsl:if>
        <xsl:if test="count(//modules/module[path=$module]) = 0">
          <xsl:text>','','','','</xsl:text>
        </xsl:if>
      </xsl:template>
      <xsl:template match="globalVariables" mode="AVIMOMCSMXGlobalVariables">
        <table cellpadding="0" cellspacing="0" class="Header">
          <tr>
            <td class="HeaderTitle" onclick="GlobalTreeExpander('globalsH','globalsTDcontent','TreeNode'); BuildGlobalsTable();">Global Variables</td>
            <td id="globalsH" onclick="GlobalTreeExpander('globalsH','globalsTDcontent','TreeNode'); BuildGlobalsTable();">
              <xsl:attribute name="class">TreeNodePlus</xsl:attribute>
              <li />
            </td>
          </tr>
        </table>

        <div id="globalsTDcontent" style="display: none">
          <li />
        </div>

        <Script Language="JavaScript">
          <xsl:text>var globalsTableBuilded = false;
                    function BuildGlobalsTable()
                    {
                        if (!globalsTableBuilded)
                        {
                            globalsTableBuilded = true;
                            ContentBuilder.CreateContent('globalsTDcontent', 0, 'Globals', [</xsl:text>
          <xsl:for-each select="variables/variable">
            <xsl:text>[</xsl:text>
            <xsl:text>'</xsl:text>
            <xsl:value-of select="name" />
            <xsl:text>',</xsl:text>

            <xsl:choose>
              <xsl:when test="count(variables) = 0">
                <xsl:text>'</xsl:text>
                <xsl:value-of select="value" />
                <xsl:text>','</xsl:text>
                <xsl:value-of select="type" />
                <xsl:text>'</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text> , '</xsl:text>
                <xsl:value-of select="type" />
                <xsl:text>', [</xsl:text>
                <xsl:for-each select="variables/variable">
                  <xsl:text>[</xsl:text>
                  <xsl:text>'</xsl:text>
                  <xsl:value-of select="name" />
                  <xsl:text>','</xsl:text>
                  <xsl:value-of select="value" />
                  <xsl:text>','</xsl:text>
                  <xsl:value-of select="type" />
                  <xsl:text>']</xsl:text>
                  <xsl:if test="position()!=last()">
                    <xsl:text>,</xsl:text>
                  </xsl:if>
                </xsl:for-each>
                <xsl:text>]</xsl:text>
              </xsl:otherwise>
            </xsl:choose>

            <xsl:text>]</xsl:text>
            <xsl:if test="position()!=last()">
              <xsl:text>,</xsl:text>
            </xsl:if>
          </xsl:for-each>
          <xsl:text>], </xsl:text>
          <xsl:text>[], []);</xsl:text>
          <xsl:text>}</xsl:text>
          <xsl:text>}</xsl:text>
        </Script>

      </xsl:template>
      <xsl:template match="browserCapabilities" mode="AVIMOMCSMXBrowserCapabilities">

        <table cellpadding="0" cellspacing="0" class="Header">
          <tr>
            <td class="HeaderTitle" onclick="GlobalTreeExpander('browserH','browserTDcontent','TreeNode'); BuildBrowserTable();">Browser Capabilities</td>
            <td id="browserH" onclick="GlobalTreeExpander('browserH','browserTDcontent','TreeNode'); BuildBrowserTable();">
              <xsl:attribute name="class">TreeNodePlus</xsl:attribute>
              <li />
            </td>
          </tr>
        </table>
        <div id="browserTDcontent" style="display: none">
          <li />
        </div>

        <Script Language="JavaScript">
          <xsl:text>var browserTableBuilded = false;
                    function BuildBrowserTable()
                    {
                        if (!browserTableBuilded)
                        {
                            browserTableBuilded = true;
                            ContentBuilder.CreateContent('browserTDcontent', 0, 'Browser Capabilities', [], [</xsl:text>
          <xsl:for-each select="variables/variable">
            <xsl:text>[</xsl:text>
            <xsl:text>'</xsl:text>
            <xsl:value-of select="name" />
            <xsl:text>','</xsl:text>
            <xsl:value-of select="value" />
            <xsl:text>','</xsl:text>
            <xsl:value-of select="type" />
            <xsl:text>']</xsl:text>
            <xsl:if test="position()!=last()">
              <xsl:text>,</xsl:text>
            </xsl:if>
          </xsl:for-each>
          <xsl:text>], []); </xsl:text>
          <xsl:text>}</xsl:text>
          <xsl:text>}</xsl:text>
        </Script>
      </xsl:template>
      <xsl:template match="endUserInformation" mode="AVIMOMCSMXEndUserInformation">

        <table cellpadding="0" cellspacing="0" class="Header">
          <tr>
            <td class="HeaderTitle" onclick="GlobalTreeExpander('endUserInfoH','endUserInfoTDcontent','TreeNode'); BuildEndUserInfoTable();">End User Information</td>
            <td id="endUserInfoH" onclick="GlobalTreeExpander('endUserInfoH','endUserInfoTDcontent','TreeNode'); BuildEndUserInfoTable();">
              <xsl:attribute name="class">TreeNodePlus</xsl:attribute>
              <li />
            </td>
          </tr>
        </table>
        <div id="endUserInfoTDcontent" style="display: none">
        </div>

        <Script Language="JavaScript">
          <xsl:text>var endUserInfoTableBuilded = false;
                    function BuildEndUserInfoTable()
                    {
                        if (!endUserInfoTableBuilded)
                        {
                            endUserInfoTableBuilded = true;
                            ContentBuilder.CreateContent('endUserInfoTDcontent', 0, 'End User Information', [], [], [</xsl:text>
          <xsl:for-each select="variables/variable">
            <xsl:text>[</xsl:text>
            <xsl:text>'</xsl:text>
            <xsl:value-of select="name" />
            <xsl:text>',</xsl:text>

            <xsl:choose>
              <xsl:when test="count(variables) = 0">
                <xsl:text>'</xsl:text>
                <xsl:value-of select="value" />
                <xsl:text>','</xsl:text>
                <xsl:value-of select="type" />
                <xsl:text>'</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text> , '</xsl:text>
                <xsl:value-of select="type" />
                <xsl:text>', [</xsl:text>
                <xsl:for-each select="variables/variable">
                  <xsl:text>[</xsl:text>
                  <xsl:text>'</xsl:text>
                  <xsl:value-of select="name" />
                  <xsl:text>','</xsl:text>
                  <xsl:value-of select="value" />
                  <xsl:text>','</xsl:text>
                  <xsl:value-of select="type" />
                  <xsl:text>']</xsl:text>
                  <xsl:if test="position()!=last()">
                    <xsl:text>,</xsl:text>
                  </xsl:if>
                </xsl:for-each>
                <xsl:text>]</xsl:text>
              </xsl:otherwise>
            </xsl:choose>

            <xsl:text>]</xsl:text>
            <xsl:if test="position()!=last()">
              <xsl:text>,</xsl:text>
            </xsl:if>
          </xsl:for-each>
          <xsl:text>]); </xsl:text>
          <xsl:text>}</xsl:text>
          <xsl:text>}</xsl:text>
        </Script>
      </xsl:template>
      <xsl:template name="AVIMOMCSMXCollectionNotes">
        <xsl:if test="collectionNotes/note">
          <table cellpadding="0" cellspacing="0" class="Header">
            <tr>
              <td class="HeaderTitle" onclick="GlobalTreeExpander('collectionNotesH', 'collectionNotes', 'TreeNode');">Collection Notes</td>
              <td id="collectionNotesH" onclick="GlobalTreeExpander('collectionNotesH', 'collectionNotes', 'TreeNode');">
                <xsl:attribute name="class">
                  <xsl:choose>
                    <xsl:when test="count(collectionNotes/note) = 0">
                      TreeNodePlus
                    </xsl:when>
                    <xsl:otherwise>TreeNodeMinus</xsl:otherwise>
                  </xsl:choose>
                </xsl:attribute>
                <li />
              </td>
            </tr>
          </table>
          <div id="collectionNotes">
            <xsl:if test="count(collectionNotes/note) = 0">
              <xsl:attribute name="style">display: none</xsl:attribute>
            </xsl:if>
            <ul class="CollectionNotes">
              <xsl:for-each select="collectionNotes/note">
                <li>
                  <xsl:value-of select="." />
                </li>
              </xsl:for-each>
            </ul>
          </div>
        </xsl:if>
      </xsl:template>
      <xsl:template name="AVIMOMCSMXMonitorScript">
        <xsl:element name="script">
          <xsl:comment>
            
                
function tdcontent(s){
    if (s == undefined || s == '') 
        return '&amp;#160;'
    else 
        return s;
}

function TableHead(className){
    return '&lt;table class="' + className + '"  cellpadding="0" cellspacing="0"&gt;';
}

///////////////////////////////////////////////////////////////////////////////
// Object processing  
///////////////////////////////////////////////////////////////////////////////

var id = -1;

function OdId(){

    id++;
    return '*' + id;
}

function OD(ot, ov){
    od[OdId()] = new ObjData(ot, ov);
}

function Bl(val){
    if (val == 1) 
        OD("BOOLEAN", "true");
    else 
        OD("BOOLEAN", "false");
}

function OV(Id, Name){
    if (typeof(Id) == 'string') {
        this.Id = [Id];
        this.Name = [Name];
    }
    else {
        this.Id = Id;
        this.Name = Name;
    }
}


function ObjData(ot, ov){
    this.ot = ot;
    this.ov = ov;
    if (typeof(ov) == 'string') 
        this.os = 's';
    else 
        if (this.ot == t1 || this.ot == t2 || this.ot == t3) 
            this.os = 'a';
        else 
            this.os = 'c';
}

var od = new Array();

//FillObjects(); //This function is described in the C# code and attached to the html

///////////////////////function

function GetParameterDefinition(id, name){
    value = '';
    title = '';
    
    if (od[id].os == 's') {
        value = name + ' = ' + od[id].ov;
        
        if (od[id].ot == 'STRING') 
            value = name + ' = \'' + od[id].ov + '\'';
    }
    
    type = '';
    flag = true;
    for (var i = od[id].ot.length; i &gt;= 0; i=i-1) 
        if (od[id].ot.charAt(i) != '.' &amp;&amp; flag) 
            type = od[id].ot.charAt(i) + type;
        else 
            flag = false;
    title = 'title="' + od[id].ot + ' ' + value + '"';
    
    return '&lt;span ' + title + '&gt;&lt;span  class="TreeNodeValueType"&gt;' + type + '&lt;/span&gt;&lt;span class="TreeNodeValueParam"&gt;' + name + '&lt;/span&gt;&lt;/span&gt;';
}

////////////////////variable

//enum
var stateClosed = "TreeVarNodePlus";
var stateOpened = "TreeVarNodeMinus";
var stateEmpty = "TreeVarNodeSimple";
var stateSpace = "TreeVarNodeSpace";
//enum end 

//enum
var treeEmpty = '0';
var treeSibling = '1';
var treeLine = '2';
var treeLast = '3';
//enum end     

//enum
var itemSimple = 'TreeNodeTypeSimple';
var itemArray = 'TreeNodeTypeArray';
var itemClass = 'TreeNodeTypeClass';
var itemClassNoInfo = 'TreeNodeTypeClassNoInfo';
//enum end 

var identity = 1; //for id generation        
function newId(){
    identity++;
    return identity;
}



function GetItemRow(name, value, info, type, onclick, itemId, tree, state, itemType){
    name = tdcontent(name);
    value = tdcontent(value);
    info = tdcontent(info);
    
    var s = '&lt;tr class="Normal" id="' + itemId + '" title="' + type + '"&gt;';
    //name td
    s += '&lt;td&gt;' + GetTreeNodeTable(name, onclick, itemId, tree, state, itemType) + '&lt;/td&gt;';
    //value td               
    s += '&lt;td&gt;' + value + '&lt;/td&gt;';
    //structure td               
    s += '&lt;td&gt;' + info + '&lt;/td&gt;&lt;/tr&gt;';
    
    return s;
}



function InsertItem(tableId, index, name, value, info, type, onclick, itemId, tree, state, itemType){

    objTable = document.getElementById(tableId);
    
    if (objTable) {
        name = tdcontent(name);
        value = tdcontent(value);
        info = tdcontent(info);
        
        var s = GetTreeNodeTable(name, onclick, itemId, tree, state, itemType);
        
        var objRow;
        if (index &gt;= 0) 
            objRow = objTable.insertRow(index);
        else 
            objRow = objTable.insertRow();
        
        objRow.id = itemId;
        objRow.title = type;
        objRow.className = "Normal";
        
        var objCell;
        objCell = objRow.insertCell();
        objCell.innerHTML = s;
        
        objCell = objRow.insertCell();
        objCell.innerHTML = value;
        
        objCell = objRow.insertCell();
        objCell.innerHTML = info;
    }
}


function GetTreeNodeTable(name, onclick, itemId, tree, state, itemType){
    var s = '&lt;table class="TreeNodeValue"  cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td&gt;';
    
    s += '&lt;table class="TreeNode" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;';
    for (var i = 0; i &lt; tree.length; i++) 
        switch (tree.charAt(i)) {
            case treeEmpty:
                s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
                break;
            case treeLast:
                s += '&lt;td class="TreeNodeLast"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
                break;
            case treeLine:
                s += '&lt;td class="TreeNodeLine"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
                break;
            case treeSibling:
                s += '&lt;td class="TreeNodeSibling"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
                break;
        };
    s += '&lt;td onclick="' + onclick + '" class="' + state + '" id="' + itemId + 'sign"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
    s += '&lt;td class="' + itemType + '"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;td&gt;';
    
    s += '&lt;table cellpadding="0" cellspacing="0" class="TreeNodeValueName"&gt;&lt;tr&gt;&lt;td&gt;' + name + '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;';
    s += '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;';
    
    return s;
}

function InsertObjectLink(tableId, index, itemId, objId, name, path, tree){


    if (itemId == '') 
        itemId = newId();
    
    var onclick;
    var state;
    
    if (od[objId].os == 's' || objId == '*0' || typeof(od[objId].ov) == 'undefined' || typeof(od[objId].ov.Id) == 'undefined' || od[objId].ov.Id.length == 0) {
        onclick = '';
        if (tree == '') 
            state = stateSpace;
        else 
            state = stateEmpty;
    }
    else {
        var escapedName = name;
        escapedName = escapedName.replace(/\\/g, '\\\\');
        escapedName = escapedName.replace(/'/g, "\\'");
        onclick = 'OpenLink(\'' + itemId + '\',\'' + objId.replace(/'/g, "\\'") + '\',\'' + escapedName + '\',\'' + path + '\',\'' + tree + '\')';
        state = stateClosed;
    }
    
    
    if (tableId == '') 
        return GetItemRow(name, GetValue(objId), GetInfo(objId), od[objId].ot, onclick, itemId, tree, state, GetItemType(objId));
    else 
        InsertItem(tableId, index, name, GetValue(objId), GetInfo(objId), od[objId].ot, onclick, itemId, tree, state, GetItemType(objId));
    
    
}


function GetInfo(id){

    if (id == "*0") 
        return "optimized";
    
    if (od[id].os == 'a') 
        return 'array';
    
    if (od[id].os == 'c') {
        if (typeof(od[id].ov) == 'undefined' || typeof(od[id].ov.Id) == 'undefined' || od[id].ov.Id.length == 0) 
            return 'class (members not collected)';
        else 
            return 'class';
    }
    
    return "";
}

function GetItemType(id){

    if (od[id].os == 'a') 
        return itemArray;
    
    if (od[id].os == 'c') {
        if (typeof(od[id].ov) == 'undefined' || typeof(od[id].ov.Id) == 'undefined' || od[id].ov.Id.length == 0) 
            return itemClassNoInfo;
        else 
            return itemClass;
    }
    
    if (od[id].os == 's') 
        return itemSimple;
    
    return "";
}



function GetValue(objId){
    if (od[objId].os == 's' &amp;&amp; typeof(od[objId].ov) != 'undefined') 
        return od[objId].ov;
    else 
        return '';
}


function OpenLink(itemId, objectId, name, path, tree){
    var objRow = document.getElementById(itemId);
    if (objRow) {
        //Define index and delete row
        var index = objRow.rowIndex;
        var currTable = objRow.parentElement.parentElement;
        var currTableBody = objRow.parentElement;
        var tableId = currTable.id;
        currTableBody.deleteRow(objRow.rowIndex);
        
        var s = "";
        //Insert root
        var onClick = 'TreeExpander(\'' + itemId + '\', \'TreeVarNode\')';
        s += GetItemRow(name, '', GetInfo(objectId, -1), od[objectId].ot, onClick, itemId, tree, stateOpened, GetItemType(objectId, -1), '');
        
        for (var i = 0; i &lt; od[objectId].ov.Id.length; i++) {
            var childTree = tree;
            if (childTree.length &gt; 0) {
                if (childTree.charAt(childTree.length - 1) == treeSibling) 
                    childTree = childTree.substring(0, childTree.length - 1) + treeLine;
                else 
                    childTree = childTree.substring(0, childTree.length - 1) + treeEmpty;
            }
            
            if (i == od[objectId].ov.Id.length - 1) 
                childTree += treeLast;
            else 
                childTree += treeSibling;
            
            s += InsertObjectLink('', index + i + 1, itemId + '.' + i, '*' + od[objectId].ov.Id[i], od[objectId].ov.Name[i], path + '.' + objectId, childTree);
        }
        
        var divContainer = currTable.parentElement;
        var signRow = currTableBody.insertRow(index);
        var allTable = currTable.outerHTML;
        var sign = "&lt;TR&gt;&lt;/TR&gt;";
        var allTableArr = allTable.split(sign);
        divContainer.innerHTML = allTableArr[0] + s + allTableArr[1];
    }
}


///////////////////////////////////////////////////////////////////////////////
// Expand
///////////////////////////////////////////////////////////////////////////////

function CollapseAll(){
    var eventCounter = 1;
    var obj = document.getElementById('1sp1ex');
    while (obj != null) {
        //  Close exception info
        var row = obj.parentElement.parentElement.rows[1];
        if (typeof(row) != 'undefined' &amp;&amp; row.style.display == '') {
            obj.fireEvent("onClick");
        }
        
        //  Close all childs functions
        var funcCounter = 1;
        var obj = document.getElementById('1sp' + eventCounter + 'ev');
        while (obj != null) {
            var row = obj.parentElement.parentElement.rows[1];
            if (typeof(row) != 'undefined' &amp;&amp; row.style.display == '') {
                obj.fireEvent("onClick");
            }
            
            funcCounter++;
            var obj = document.getElementById(funcCounter + 'sp' + eventCounter + 'ev');
        }
        
        eventCounter++;
        var obj = document.getElementById('1sp' + eventCounter + 'ex');
    }
    
    //  Close all handled functions
    var funcCounter = 1;
    var obj = document.getElementById('1sp1hev');
    while (obj != null) {
        var row = obj.parentElement.parentElement.rows[1];
        if (typeof(row) != 'undefined' &amp;&amp; row.style.display == '') {
            obj.fireEvent("onClick");
        }
        
        funcCounter++;
        var obj = document.getElementById(funcCounter + 'sp1hev');
    }
    
}

function Expander(obj, prefix, child, varIds, varNames, memIds, memNames, locIds, locNames, isSource, source, isAliased, functionName, iPointer, module, version, dateModified, path, pdbPath, line, fileref, codeLines, codeLinesType, methodInfo, wrongModule, isFunction){
    if (obj.className.indexOf('Minus') &gt; 0) {
        obj.className = prefix + 'Plus' + (obj.className.indexOf('Selected') &gt; 0 ? 'Selected' : '');
        obj.parentElement.parentElement.rows[1].style.display = 'none';
    }
    else {
        obj.className = prefix + 'Minus' + (obj.className.indexOf('Selected') &gt; 0 ? 'Selected' : '');
        
        var row = obj.parentElement.parentElement.rows[1];
        if (typeof(row) == 'undefined') {
            row = obj.parentElement.parentElement.insertRow();
            var cell = row.insertCell();
            cell.className = isFunction ? 'TabContainer' : 'TabExceptionContainer';
            cell.innerHTML = OpenNodeContent(child, varIds, varNames, memIds, memNames, locIds, locNames, isSource, source, isAliased, functionName, module, version, dateModified, path, line, fileref, iPointer, pdbPath, codeLines, codeLinesType, methodInfo, wrongModule, isFunction);
            
            //  Hide function's parameters if table hadn't been built when "Show Parameters" combo was clicked
            if (document.getElementById("cbShowParameters").checked == false) {
                ShowFuncParams(document.getElementById("cbShowParameters"));
            }
        }
        else 
            row.style.display = '';
    }
}

function ExceptionExpander(mainId, exId){
    var s = '&lt;div class="ExceptionVar"&gt;&lt;table cellpadding="0" cellspacing="0" class="TreeVar" id="' + mainId + '"&gt;';
    s += Header() + InsertObjectLink('', '1', '', exId, 'exception', '', '') + '&lt;/table&gt;&lt;/div&gt;';
    return s;
}

function TabHeader(id, num, activeTab, type, body){
    return '&lt;div id="' + id + 'content' + num + '" Style="DISPLAY:' + ((activeTab == num) ? 'block' : 'none') + '"&gt;&lt;table cellpadding="0" cellspacing="0" class="TreeVar" id="' + id + type + '"&gt;' + body + '&lt;/table&gt;&lt;/div&gt;';
}

function Header(){
    return '&lt;col class="TreeVarCol1"/&gt;&lt;col class="TreeVarCol2"/&gt;&lt;col class="TreeVarCol3"/&gt;&lt;tr&gt;&lt;th class="TreeVarHeader1"&gt;Name&lt;/th&gt;&lt;th class="TreeVarHeader2"&gt;Value&lt;/th&gt;&lt;th class="TreeVarHeader3"&gt;Structure&lt;/th&gt;&lt;/tr&gt;';
}


function InsertLinks(varIds, varNames, msg){
    var s = Header();
    if (varIds.length == 0) {
        s += "&lt;td colspan=3&gt;" + msg + "&lt;/td&gt;";
    }
    else {
        for (var i = 0; i &lt; varIds.length; i++) {
            s += InsertObjectLink('', '', '', varIds[i], varNames[i], '', '');
        }
    }
    return s;
}

function TabBookmark(id, num, activeTab, text){
    return '&lt;td onmouseover="HightLightTab(true)" onmouseout="HightLightTab(false)" class="TabBookmark' + ((activeTab == num) ? 'Sel' : '') + '" id="' + id + num + '" onclick="SetTabValue(\'' + id + '\', ' + num + ')"&gt;&lt;nobr&gt;' + text + '&lt;/nobr&gt;&lt;/td&gt;';
}

function fillTemplate(tpl_string, pattern, rep_string){
    tpl = tpl_string.split(pattern);
    return tpl[0] + rep_string + tpl[1];
}

function getResultPdbUploadUrl(pdbUploadUrl, version, module){
    // Replace "&amp;#39;" with "'" symbol. 
    // Encode module for "&amp;" symbol.
    var assemblyName = module.replace(/&amp;#39;/g, "'").replace(/&amp;/g, "%26");
    return fillTemplate(pdbUploadUrl, '___VERSION_PATTERNS___', escape('&amp;fromStackFrame=true&amp;assemblyVersion=' + version + '&amp;assemblyName=' + assemblyName));
}

function OpenNodeContent(id, varIds, varNames, memIds, memNames, locIds, locNames, isSource, source, isAliased, functionName, module, version, dateModified, path, line, fileref, iPointer, pdbPath, codeLines, codeLinesType, methodInfo, wrongModule, isFunction){
    var resultPdbUploadUrl = getResultPdbUploadUrl(pdbUploadUrl, version, module);
    var emptySource = '&lt;div class="EmptySource"&gt;Source code is unreachable because the function is anonymous or the source code file cannot be accessed.&lt;/div&gt;';
    var emptyVariables = '&lt;div class=EmptySource&gt;To enable collection of values for method parameters and class members, add methods or their containing namespaces to the settings for this application in the “.NET Application Performance Monitoring” template in the Operations Console&lt;/div&gt;';
    
    var monitoringEnabled = (methodInfo != "" &amp;&amp; varIds.length == 0 &amp;&amp; memIds.length == 0) ? false : true;
    
    var activeTab = 0;
    if (varIds.length == 0) 
        if (!isFunction) 
            activeTab = 1;
        else 
            activeTab = memIds.length &gt; 0 ? 1 : 2;
    
    var s = '';
    
    //if aliased than display real name with parameters
    if (isAliased) {
        s += '&lt;span class="FunctionNameAndParemeters"&gt;' + functionName + '(';
        if (typeof(methodInfo) != 'undefined') {
            s += methodInfo;
        }
        else {
            for (var i = 0; count = varIds.length, i &lt; count; i++) {
                s += GetParameterDefinition(varIds[i], varNames[i]);
                if (i != count - 1) {
                    s += ', ';
                }
            }
        }
        s += ')&lt;/span&gt;';
        if (iPointer != '') {
            s += '  +';
            s += (isSource ? iPointer : '&lt;span class="emptySource"&gt;&lt;a href="#" onclick="' + resultPdbUploadUrl + '"&gt;' + iPointer + '&lt;/a&gt;&lt;/span&gt;');
        }
        s += '&lt;/span&gt;';
    }
    
    s += TableHead('Tab');
    
    //TabBookmarks	
    s += '&lt;tr&gt;';
    s += '&lt;td&gt;&lt;table class=TableBookmark cellspacing=0 cellpadding=0 border=0&gt;&lt;tr&gt;';
    if (isFunction) {
        s += TabBookmark(id, 0, activeTab, 'Parameters(' + varIds.length + ')');
        s += TabBookmark(id, 1, activeTab, 'Member Variables(' + memIds.length + ')');
        s += TabBookmark(id, 2, activeTab, 'Source');
        
        functionName = TransformToMSDNFormat(functionName);
    }
    else {
        s += TabBookmark(id, 0, activeTab, 'Exception data(' + varIds.length + ')');
        s += TabBookmark(id, 1, activeTab, 'Source');
    }
    
    s += '&lt;td class=TabBookmarkEmpty&gt;&lt;span class = "IconSpace" width="16" height="16" /&gt;&lt;/td&gt;';
    s += '&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;';
    s += '&lt;/tr&gt;';
    
    //Tabs content
    s += '&lt;tr&gt;&lt;td class="TabContent"&gt;';
    
    if (isFunction) {
        //parameters tab	
        
        var parametersBody = professionalLicenseLimitation ? ('&lt;tr&gt;&lt;td&gt;' + GetProfessionalLicenseLimitationMessage("Information about parameters") + '&lt;/td&gt;&lt;/tr&gt;') : InsertLinks(varIds, varNames, (!monitoringEnabled ? emptyVariables : ''));
        s += TabHeader(id, 0, activeTab, 'parameters', parametersBody);
        //members tab	
        var memberVariablesBody = professionalLicenseLimitation ? ('&lt;tr&gt;&lt;td&gt;' + GetProfessionalLicenseLimitationMessage("Information about parameters") + '&lt;/td&gt;&lt;/tr&gt;') : InsertLinks(memIds, memNames, (!monitoringEnabled ? emptyVariables : ''));
        s += TabHeader(id, 1, activeTab, 'this', memberVariablesBody);
    }
    else {
        //exception data
        s += TabHeader(id, 0, activeTab, 'exceptiondata', InsertLinks(varIds, varNames, ''));
    }
    
    //source tab
    var sourceStyle = (isFunction &amp;&amp; activeTab == 2) || (!isFunction &amp;&amp; activeTab == 1) ? '' : 'Style="DISPLAY:none"';
    s += '&lt;div id="' + id + 'content' + (isFunction ? 2 : 1) + '" ' + sourceStyle + '&gt;';
    var re = /\\/g;
    s += '&lt;table cellpadding="0" cellspacing="0" class="TreeVar"&gt;';
    
    //header
    s += '&lt;col style="width: 20%" /&gt;&lt;col style="width: 100%" /&gt;&lt;tr&gt;&lt;th class="TreeVarHeader1"&gt;Name&lt;/th&gt;&lt;th class="TreeVarHeader2"&gt;Value&lt;/th&gt;&lt;/tr&gt;';
    
    
    if (professionalLicenseLimitation) {
        s += ModulesExpandRowContent('Code', id + 'source', 'Plus');
        s += ModulesRowContent(true, 'Empty', GetProfessionalLicenseLimitationMessage("Information about source code"), id + 'source', 'none');
    }
    else {
        if (!isRestrictedMode || (isRestrictedMode &amp;&amp; isAdmin)) {
            s += ModulesExpandRowContent('Code', id + 'source', isSource ? 'Minus' : 'Plus');
        }
        
        if (isSource) {
            var file = '';
            if (fileref == '') 
                file = '&amp;#160;';
            else 
                file = '&lt;a href="#" style="text-align:left;width:100%;" onclick="Javascript:OpenSource(\'' + source.replace(/'/g, "\\'") + '\', \'' + fileref.replace(re, '\\\\') + '\', \'' + line + '\');"&gt;' + fileref + '&lt;/a&gt;';
            file = fileref.replace(re, '\\\\');
            
            //file row
            s += ModulesRowContent('middle', 'File', file, id + 'source', isSource ? 'block' : 'none');
            
            
            var sourceCode = '&lt;table class="SourceContainerCode" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;';
            
            var interestingLinesCount = 0
            if (codeLines == '') {
                sourceCode += '&amp;#160;';
            }
            else {
                for (var i = 0; i &lt; codeLines.length; i++) {
                    if (codeLinesType[i] == 'true') {
                        var lineImage = '&lt;img src="Images\AVIcode.DotNet.SystemCenter.Images.class" width="8" height="8" border="0" alt="Interesting Line" /&gt;';
                        sourceCode += '&lt;span style="color:#FF4500"&gt;' + lineImage + codeLines[i] + '\n&lt;/span&gt;';
                        interestingLinesCount++;
                    }
                    else {
                        sourceCode += codeLines[i] + '\n';
                    }
                }
            }
            
            sourceCode += '&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;';
            
            //line row
            var lineString = "";
            switch (interestingLinesCount) {
                case 0:
                    lineString = "&amp;#160;"
                    break;
                case 1:
                    if (file != "unknown file") {
                        lineString = line;
                    }
                    else {
                        lineString = "unknown";
                    }
                    break;
                default:
                    lineString = "Several Lines (first : " + line + ")";
                    break;
            }
            s += ModulesRowContent('middle', 'Line', tdcontent(lineString), id + 'source', isSource ? 'block' : 'none');
            
            
            //source fragment row
            s += ModulesRowContent('last', 'Fragment', sourceCode, id + 'source', isSource ? 'block' : 'none');
        }
        else {
            if (!isRestrictedMode || (isRestrictedMode &amp;&amp; isAdmin)) {
                s += ModulesRowContent('last', 'Empty', emptySource, id + 'source', isSource ? 'block' : 'none');
            }
            
        }
    }
    
    s += '&lt;/table&gt;&lt;/div&gt;';
    
    return s;
}

function TransformToMSDNFormat(functionName){
    if (functionName.indexOf('.ctor') &gt; 0) {
        var regExp = new RegExp("\\.(.[^\.]+)\.\.ctor$", "gi");
        if ((result = regExp.exec(functionName)) != null) {
            functionName = functionName.replace(/\.ctor/, result[1]);
        }
    }
    
    return functionName;
}

function TreeExpander(itemId, prefix){
    var objSign = document.getElementById(itemId + 'sign');
    var i = 0;
    
    if (objSign.className.indexOf('Minus') &gt; 0) {
        objSign.className = prefix + 'Plus';
        while (document.getElementById(itemId + '.' + i)) {
            ShowHide(0, itemId + '.' + i);
            
            var objSubSign = document.getElementById(itemId + '.' + i + 'sign');
            if (objSubSign) 
                if (objSubSign.className.indexOf('Minus') &gt; 0) 
                    TreeExpander(itemId + '.' + i, prefix)
            i++;
        }
    }
    else 
        if (objSign.className.indexOf('Plus') &gt; 0) {
            objSign.className = prefix + 'Minus';
            while (document.getElementById(itemId + '.' + i)) {
                ShowHide(1, itemId + '.' + i);
                i++;
            }
        }
}

function GlobalTreeExpander(itemId, showobj, prefix){
    var objSign = document.getElementById(itemId);
    
    
    if (objSign.className.indexOf('Minus') &gt; 0) {
        objSign.className = prefix + 'Plus';
        ShowHide(0, showobj);
    }
    else 
        if (objSign.className.indexOf('Plus') &gt; 0) {
            objSign.className = prefix + 'Minus';
            ShowHide(1, showobj);
        }
}


function SetTabValue(tabControlId, value){
    var i = 0;
    
    while (document.getElementById(tabControlId + i)) {
        if (i == value) {
            document.getElementById(tabControlId + i).className = "TabBookmarkSel";
            ShowHide(1, tabControlId + 'content' + i);
        }
        else {
            document.getElementById(tabControlId + i).className = "TabBookmark";
            ShowHide(0, tabControlId + 'content' + i);
        }
        i++;
    }
}


function ShowTab(id, tabNumber){
    var obj = document.getElementById(id);
    var row = obj.parentElement.parentElement.rows[1];
    if (typeof(row) == 'undefined' || row.style.display == 'none') {
        obj.fireEvent("onClick");
    }
    document.getElementById(id + tabNumber).fireEvent('onClick');
    window.event.cancelBubble = true;
}

function ShowFuncLines(val){
    if (val.checked) 
        ShowHide(1, "funcLines");
    else 
        ShowHide(0, "funcLines");
}

function ShowFuncParams(val){
    ShowHide(val.checked ? 1 : 0, "funcParams");
}

function ShowLow(val){
    if (val.checked) {
        ShowHide(1, "Low");
        ShowHide(0, "Dots");
    }
    else {
        ShowHide(0, "Low");
        ShowHide(1, "Dots");
    }
}

function ShowLowEx(val){
    if (val.className.indexOf('Minus') &gt; 0) {
        val.className = 'TreeNodePlus';
        ChangeExceptionData('1');
        ShowHide(0, "LowEx");
    }
    else {
        val.className = 'TreeNodeMinus';
        ShowHide(1, "LowEx");
    }
}

function ShowHide(mode, child){
    var objColl = document.all(child);
    
    if (objColl == null) 
        return;
    
    if (typeof(objColl.length) == 'undefined') {
        if (mode == 0) 
            objColl.style.display = 'none';
        else 
            objColl.style.display = '';
        
        return;
    }
    
    for (var i = 0; i &lt; objColl.length; i++) {
        if (mode == 0) 
            objColl[i].style.display = 'none';
        else 
            objColl[i].style.display = '';
        
    }
}

function ModulesExpander(obj, id, prefix){
    if (obj.className.indexOf('Minus') &gt; 0) {
        obj.className = 'TreeVarNodePlus';
        ShowHide(0, id);
    }
    else {
        obj.className = 'TreeVarNodeMinus';
        ShowHide(1, id);
    }
}

function ModulesContent(position, name, version, dateModified, path, pdbPath){
    var s = ModulesExpandRowContent(name + ', ' + version, position + 'module', 'Plus');
    return s;
}

function CreateRow(rowType, title, value, tooltipText, id, style, addSpace, entityClass){
    var s = '&lt;tr id="' + id + '" style="Display:' + style + ';" class="Normal"&gt;';
    s += '&lt;td style="width: 32%"&gt;';
    s += '&lt;table class="TreeNodeValue" cellpadding="0" cellspacing="0" width="100%"&gt;&lt;tr&gt;';
    
    var totalStyle = '';
    rowType = rowType.toString();
    rowType = rowType.toLowerCase();
    
    switch (rowType) {
        case 'last':
            // Last node picture.
            s += '&lt;td class="TreeNodeLast"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
        case 'middle':
            // Middle node picture.
            s += '&lt;td class="TreeNodeSibling"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
        case 'simple':
            // Simple node picture.
            if (typeof(addSpace) != "undefined" &amp;&amp; addSpace === true)
            {
                s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            }
            s += '&lt;td class="TreeNodeTypeSimple"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
        case 'array':
            // Array node picture.
            if (typeof(addSpace) != "undefined" &amp;&amp; addSpace === true)
            {
                s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            }
            s += '&lt;td class="TreeNodeTypeArray"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
        case 'class':
            // Class node picture.
            if (typeof(addSpace) != "undefined" &amp;&amp; addSpace === true)
            {
                s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            }
            s += '&lt;td class="TreeNodeTypeClass"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
        case 'total':
            // Style for 'total' row.
            totalStyle = ' style="text-align: right; font-weight: bold; padding-right: 10px;"';
            break;
        case 'nonodespace':
            // Without node space and node picture.
            break;
        default:
            // Node space without picture.
            s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
    }
    
    if (typeof(entityClass) != "undefined")
    {
        switch (entityClass)
        {
            case 'simple':
                s += '&lt;td class="TreeNodeTypeSimple"&gt;&lt;/td&gt;';
                break;
            case 'class':
                s += '&lt;td class="TreeNodeTypeClass"&gt;&lt;/td&gt;';
                break;
            case 'array':
                s += '&lt;td class="TreeNodeTypeArray"&gt;&lt;/td&gt;';
                break;
            default:
                break;
        }
    }
    
    var hint = tooltipText != "__NOTYPE__" ? ' title="' + tooltipText + '"' : "";
    
    s += '&lt;td' + totalStyle + hint + '&gt;' + (title == '' ? '&amp;nbsp;' : title) + '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;';
    s += '&lt;td' + hint + '&gt;' + (value == '' ? '&amp;nbsp;' : value) + '&lt;/td&gt;&lt;/tr&gt;';
    return s;
}


function ModulesRowContent(rowType, title, value, id, style){
    var s = '&lt;tr id="' + id + '" style="Display:' + style + ';" class="Normal"&gt;';
    s += '&lt;td style="width: 32%"&gt;';
    s += '&lt;table class="TreeNodeValue" cellpadding="0" cellspacing="0" width="100%"&gt;&lt;tr&gt;';
    
    var totalStyle = '';
    rowType = rowType.toString();
    rowType = rowType.toLowerCase();
    
    switch (rowType) {
        case 'last':
            // Last node picture.
            s += '&lt;td class="TreeNodeLast"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
        case 'middle':
            // Middle node picture.
            s += '&lt;td class="TreeNodeSibling"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
        case 'simple':
            // Simple node picture.
            s += '&lt;td class="TreeNodeTypeSimple"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
        case 'total':
            // Style for 'total' row.
            totalStyle = ' style="text-align: right; font-weight: bold; padding-right: 10px;"';
            break;
        case 'nonodespace':
            // Without node space and node picture.
            break;
        default:
            // Node space without picture.
            s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
            break;
    }
    
    s += '&lt;td' + totalStyle + '&gt;' + (title == '' ? '&amp;nbsp;' : title) + '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;';
    s += '&lt;td&gt;' + (value == '' ? '&amp;nbsp;' : value) + '&lt;/td&gt;&lt;/tr&gt;';
    return s;
}

function ModulesExpandRowContent(title, id, sign){
    var s = '&lt;tr class="Normal"&gt;&lt;td style="width: 32%;"&gt;';
    s += '&lt;table class="TreeNodeValue" cellpadding="0" cellspacing="0"&gt;';
    s += '&lt;tr&gt;&lt;td class="TreeVarNode' + sign + '" onclick="ModulesExpander(this, \'' + id + '\');"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
    s += '&lt;td class="TreeNodeAssembly"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
    s += '&lt;td&gt;' + title + '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;';
    return s;
}

//2007-01-15, A.Golovkov
//script for aspects expander
function AspectsExpander(obj, id, prefix){
    if (obj.className.indexOf('Minus') &gt; 0) {
        obj.className = 'TreeVarNodePlus';
        ShowHide(0, id);
    }
    else {
        obj.className = 'TreeVarNodeMinus';
        ShowHide(1, id);
    }
}

//2007-01-15, A.Golovkov

function ChangeExceptionData(objId){
    ChangeSelection(objId + 'ev' + 'exName', 'exceptionName', 'Name');
    //ChangeSelection(objId + 'ev'  + 'exValue', 'exceptionValue', 'Value');
    //	ChangeException(objId, 'stackelem');
    ChangeException(objId + 'ev', 'exceptiondata');
    
    ChangeExceptionHeaderSelection(objId);
}

//  Change selection on the Exception line placed on top of the stack trace
function ChangeExceptionHeaderSelection(objId){
    var counter = 1;
    var obj = document.getElementById('1sp1ex');
    while (obj != null) {
        if (counter == objId) {
            var row = obj.parentElement.parentElement.rows[1];
            if (typeof(row) == 'undefined' || row.style.display == 'none') {
                obj.fireEvent("onClick");
            }
            
            var index = obj.className.indexOf("Selected");
            if (index == -1) {
                obj.className += "Selected";
            }
        }
        else {
            var index = obj.className.indexOf("Selected");
            if (index != -1) {
                obj.className = obj.className.substr(0, index);
            }
        }
        
        counter++;
        var obj = document.getElementById('1sp' + counter + 'ex');
    }
}

function ChangeSelection(objId, tableId, style){
    objTable = document.all(tableId);
    
    for (var i = 0; i &lt; objTable.length; i++) {
        objRow = objTable[i].rows[0];
        objField = objRow.lastChild;
        
        if (objRow.id == objId) 
            objField.className = "Field" + style + "Selected";
        else 
            objField.className = "Field" + style;
    }
    
    return objTable.innerHTML;
}

function ChangeException(objId, curId){
    arrStacks = document.all(curId);
    for (var i = 0; i &lt; arrStacks.length; i++) {
        if (arrStacks[i].mainId == objId) 
            arrStacks[i].style.display = 'block'
        else 
            arrStacks[i].style.display = 'none'
    }
}

function InsertWhiteSpaces(entryId, isLast){
    var s = '&lt;table cellpadding="0" cellspacing="0" class="ExceptionTreeImage"&gt;&lt;tr&gt;';
    s += '&lt;td class="' + (isLast ? 'TreeNodeLast' : 'TreeNodeMiddle') + '"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;'
    s += '&lt;/table&gt;&lt;/tr&gt;';
    
    return s;
}

function HightLightTab(flagHightLight){
    var el = event.srcElement;
    while (el.tagName != "TD") 
        el = el.parentElement;
    if (el.className != 'TabBookmarkSel') {
        if (flagHightLight) 
            el.className = 'TabBookmarkActive';
        else 
            el.className = 'TabBookmark';
    }
}

function FuncImage(isHi){
    return '&lt;td class="TreeNodeImage"&gt;&lt;li class="TreeNodeTypeFun' + (isHi ? 'Hi' : '') + '"&gt;&lt;/li&gt;&lt;/td&gt;';
}

function OpenContentForHigh(){
    var obj = document.getElementById('High');
    if (obj != null) 
        obj.firstChild.onclick();
}


//functions for opening exception source via Intercept Plugin
var defaultPath = 'www.avicode.com';

function OpenSource(sourceName, fileName, lineNumber){
    try {
        var objDteManager = new ActiveXObject("InterceptVSPlugin.Automation.1")
        
        bRes = objDteManager.OpenSource(sourceName, fileName, lineNumber);
        if (!bRes) 
            alert("Application Diagnostics and Visual Studio integration is not properly configured on the system.");
    } 
    catch (e) {
        Install();
    }
}

function Install(){

    //AGolovkov
    //detecting if the client system is 32 or 64-bit
    var sysPluginPath = pluginPath;
    if (navigator.appVersion.toUpperCase().indexOf("WOW64") &gt; -1) 
        sysPluginPath = plugin64Path;
    
    var displayPath = defaultPath;
    
    if (sysPluginPath != defaultPath) 
        displayPath = "Application Diagnostics computer";
    
    if (window.confirm("SCOM Visual Studio Plug-In is not installed. Do you want to install it?")) {
        if (sysPluginPath == defaultPath) 
            window.open("http://www.avicode.com/intercept/InterceptV2VSPluginDownload.asp");
        else 
            window.open(sysPluginPath);
    }
}

function GetProfessionalLicenseLimitationMessage(unavailableInformation){
    var message = professionalLicenseLimitationTemplate.replace("#UnavailableInformation", unavailableInformation);
    message = "&lt;div class=\"handlerLicenseMessage\"&gt;" + message + "&lt;/div&gt;";
    return message;
}

function ModulesExpandRowContentEx(title, id, sign, value, omitExpander, hint, style, entityClass){
    var s = '&lt;tr class="Normal"&gt;';
    s += '&lt;td style="width: 32%;"&gt;';
    s += '&lt;table class="TreeNodeValue" cellpadding="0" cellspacing="0"&gt;';
    s += '&lt;tr&gt;';
    
    if (omitExpander)
    {
        s += '&lt;td&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
    }
    else
    {
        s += '&lt;td class="TreeVarNode' + sign + '" onclick="ModulesExpander(this, \'' + id + '\');"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
    }
    
    if (typeof(style) == "undefined" || style == null || style == '')
    {
        style = 'font-weight: bold;';
    }
    if (typeof(hint) == "undefined" || hint == null)
    {
        hint = '';
    }
    
    var classForBGImg = '';
    
    switch (entityClass)
    {
        case 'simple':
            classForBGImg = itemSimple;
            break;
        case 'array':
            classForBGImg = itemArray;
            break;
        case 'class':
            classForBGImg = itemClass;
            break;
        default:
            break;
    }
    
    s += '&lt;td class="' + classForBGImg + '"&gt;&lt;/td&gt;';
    s += '&lt;td&gt;&lt;span style="' + style + '" title="' + hint + '"&gt;' + title + '&lt;/span&gt;&lt;/td&gt;';
    s += '&lt;/tr&gt;';
    s += '&lt;/table&gt;';
    s += '&lt;/td&gt;';
    
    if (typeof(value) == 'undefined')
    {
        value = '';
    }
    
    s += '&lt;td title="' + hint + '"&gt;&lt;b&gt;' + value + '&lt;/b&gt;&amp;nbsp;&lt;/td&gt;';
    s += '&lt;/tr&gt;';
    return s;
}


var ContentBuilder = {

    CreateContent: function(containerId, child, tabName, globals, browserCapabilities, endUserInfo){
        var container = document.getElementById(containerId);
        if (container) {
            var div = document.createElement('DIV');
            div.innerHTML = this.CreateBlockContent(child, tabName, globals, browserCapabilities, endUserInfo);
            container.appendChild(div);
        }
    },
    
    CreateBlockContent: function(id, tabName, globals, browserCapabilities, endUserInfo){
        var activeTab = 0;
        
        var s = '';
        
        s += TableHead('Tab');
        
        //	TabBookmarks	
        s += '&lt;tr&gt;';
        s += '&lt;td&gt;&lt;table class=TableBookmark cellspacing=0 cellpadding=0 border=0&gt;&lt;tr&gt;';
        s += TabBookmark(id, 0, activeTab, tabName);
        s += '&lt;td class=TabBookmarkEmpty&gt;&amp;nbsp;&lt;/td&gt;';
        s += '&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;';
        s += '&lt;/tr&gt;';
        
        //	Tabs content
        s += '&lt;tr&gt;&lt;td class="TabContent"&gt;';
        
        //	Source tab		
        s += '&lt;div id="' + id + 'content1"&gt;';
        s += '&lt;table cellpadding="0" cellspacing="0" class="TreeVar"&gt;';
        
        switch (tabName.toString().toLowerCase()) {
            case 'globals':
                s += this.CreateGlobalsTable(globals);
                break;
            case 'browser capabilities':
                s += this.CreateBrowserTable(browserCapabilities);
                break;
            case 'end user information':
                s += this.CreateEndUserInfoTable(endUserInfo);
                break;
            default:
                break;
        }
        
        s += '&lt;/table&gt;&lt;/div&gt;';
        
        return s;
    },
    CreateGlobalsTable: function(globalsInfo){
        //return this.CreateListView(globalsInfo);
        return this.CreateTreeListView(globalsInfo, true);
    },
    
    CreatePageInfoTable: function(pageInfo){
        var tableBody = '&lt;table cellpadding="0" cellspacing="0" class="Tab"&gt;&lt;tr&gt;&lt;td class="TabContent"&gt;';
        tableBody += '&lt;div id="' + id + 'content1"&gt;&lt;table cellpadding="0" cellspacing="0" class="TreeVar"&gt;';
        tableBody += this.CreateListView(pageInfo);
        tableBody += '&lt;/table&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;';
        return tableBody;
    },
    
    CreateBrowserTable: function(browserInfo){
        return this.CreateListView(browserInfo);
    },
    CreateEndUserInfoTable: function(endUserInfo){
        //return this.CreateListView(endUserInfo);
        return this.CreateTreeListView(endUserInfo, true, true);
    },
    CreateListView: function(parameters){
        var s = '';
        s += '&lt;col style="width: 20%" /&gt;&lt;col style="width: 100%" /&gt;';
        s += '&lt;tr&gt;&lt;th class="TreeVarHeader1"&gt;Name&lt;/th&gt;&lt;th class="TreeVarHeader2"&gt;Value&lt;/th&gt;&lt;/tr&gt;';
        for (var i = 0; i &lt; parameters.length; i++) {
            var parameter = parameters[i];
            s += CreateRow('simple', parameter[0], parameter[1], parameter[2], 0, 'block');
        }
        return s;
    },

    CreateTreeListView: function (parameters, addHeader, addSpaces, parentId){
        var s = '';
        var style = 'middle';
        var id = 'TreeViewId';
        var entityClass = 'simple'
        if(addHeader)
        {
            s += '&lt;col style="width: 20%" /&gt;&lt;col style="width: 100%" /&gt;';
            s += '&lt;tr&gt;&lt;th class="TreeVarHeader1"&gt;Name&lt;/th&gt;&lt;th class="TreeVarHeader2"&gt;Value&lt;/th&gt;&lt;/tr&gt;';
            style = 'simple';
            entityClass = '';
        }
        for (var i = 0; i &lt; parameters.length; i++) {
            var parameter = parameters[i];
            var objectType = 'simple';
            switch(parameter[2])
            {
                case 'System.Array':
                    objectType = 'array';
                    break;
                case 'System.Object':
                    objectType = 'class';
                    break;
                default:
                    objectType = 'simple';
                    break;
            }
            entityClass = objectType;
            
            if(typeof(parameter[3]) == "undefined" || parameter[3] == null)
            {
                id = parameter[0];
                if (typeof(parentId) != "undefined" &amp;&amp; parentId != null)
                {
                    id = parentId + '_childId';
                }
                if(!addHeader)
                {
                    if(i == parameters.length -1)
                    {
                        style = 'last';
                    }
                    else
                    {
                        style = 'middle';
                    }
                }
                else
                {
                    style = '';
                }
                s += CreateRow(style, parameter[0], parameter[1], parameter[2], id, 'block', addSpaces, entityClass);
            }
            else
            {
                id = parameter[0] + '_childId';
                s += ModulesExpandRowContentEx(parameter[0], id, 'Minus', '', false, parameter[2], 'font-weight: normal', 'class');
                s += this.CreateTreeListView(parameter[3], false, addSpaces, parameter[0]);
            }
        }
        return s;
    }
};
                
          </xsl:comment>
        </xsl:element>
      </xsl:template>
      <!-- end of templates for AVIMOMCSMXMonitorLog -->

      <!-- templates for AVIMOMAboveThresholdMonitorLog -->
      <xsl:template match="EventData" mode="AVIMOMAboveThresholdMonitorLog">
        <xsl:for-each select="child::*">
          <xsl:if test="name(.) = 'SEVieverEventURL'">
            <xsl:text>To access the list of events happened at the time of alert generation, please open: </xsl:text>
            <xsl:value-of select="." />
          </xsl:if>
          <xsl:if test="name(.) != 'SEVieverEventURL'">
            <xsl:value-of select="name(.)" />
            <xsl:text> = </xsl:text>
            <xsl:value-of select="." />
          </xsl:if>
          <br />
        </xsl:for-each>
      </xsl:template>
      <!-- end of templates for AVIMOMAboveThresholdMonitorLog -->

      <xsl:template match="EventData" mode="XMOMASPMonitorLog">
        <table cellpadding="0" cellspacing="0" class="AlignByCompany">
          <tr class="AlignByCompany">
            <td class="AlignByCompany">

              <div class="HandlersFrame">

                <xsl:for-each select="*[local-name()='log']">
                  <table cellpadding="0" cellspacing="0" class="Header">
                    <tr>
                      <td class="HeaderTitle" onclick="GlobalTreeExpander('exceptionChain','exceptionRows','TreeNode');">Exception</td>
                      <td id="exceptionChain" class="TreeNodeMinus" onclick="GlobalTreeExpander('exceptionChain','exceptionRows','TreeNode');">
                        <li>
                        </li>
                      </td>
                    </tr>
                  </table>
                  <table cellpadding="0" cellspacing="0" id="exceptionRows" class="ExceptionTree">
                    <xsl:for-each select="events/event">
                      <xsl:call-template name="ExceptionRow" />
                    </xsl:for-each>
                  </table>
                  <table cellpadding="0" cellspacing="0" class="Header">
                    <tr>
                      <td class="HeaderTitle" onclick="GlobalTreeExpander('exceptionStackH','mainTreeFun','TreeNode');">Stack</td>
                      <td id="exceptionStackH" class="TreeNodeMinus" onclick="GlobalTreeExpander('exceptionStackH','mainTreeFun','TreeNode');">
                        <li>
                        </li>
                      </td>
                    </tr>
                  </table>
                  <xsl:call-template name="FunctionStack" />
                  <!--add modules stack-->
                  <xsl:if test="count(modules/module) &gt; 0">
                    <table cellpadding="0" cellspacing="0" table="1" class="Header">
                      <tr>
                        <td class="HeaderTitle" onclick="GlobalTreeExpander('modulesStack','moduleRows','TreeNode');">Modules List</td>
                        <td id="modulesStack" class="TreeNodePlus" onclick="GlobalTreeExpander('modulesStack','moduleRows','TreeNode');">
                          <li>
                          </li>
                        </td>
                      </tr>
                    </table>
                    <div id="moduleRows" style="Display:none;" class="ModulesVar">
                      <table cellpadding="0" cellspacing="0" class="TreeVar">
                        <col class="TreeVarCol1" />
                        <col class="TreeVarCol2" />
                        <tr>
                          <th class="TreeVarHeader1">Name</th>
                          <th class="TreeVarHeader2">Value</th>
                        </tr>
                        <xsl:for-each select="modules/module">
                          <Script Language="JavaScript">
                            <xsl:text>document.write(ModulesContent('</xsl:text>
                            <xsl:value-of select="position()" />
                            <xsl:text>','</xsl:text>
                            <xsl:value-of select="name" />
                            <xsl:text>','</xsl:text>
                            <xsl:value-of select="version" />
                            <xsl:text>','</xsl:text>
                            <xsl:value-of select="dateModified" />
                            <xsl:text>','</xsl:text>
                            <xsl:value-of select="path" />
                            <xsl:text>'));</xsl:text>
                          </Script>
                        </xsl:for-each>
                      </table>
                    </div>
                  </xsl:if>
                </xsl:for-each>

              </div>

            </td>
          </tr>
          <tr>
            <td class="EmptySourceByCompany">
              .NET monitoring powered by AVIcode technology. Information on additional capabilities available at <A title="http://www.avicode.com/" href="http://www.avicode.com/OpsMgr2007.htm">www.avicode.com</A>
            </td>
          </tr>
        </table>

      </xsl:template>
      <xsl:template name="ExceptionRow">
        <tr>
          <xsl:if test="position() != 1">
            <xsl:attribute name="id">LowEx</xsl:attribute>
            <xsl:attribute name="style">Display:none;</xsl:attribute>
          </xsl:if>
          <td>
            <table cellpadding="0" cellspacing="0" id="exceptionValue" class="ExceptionTreeVal">
              <tr id="{position()}evexValue">
                <td>
                  <xsl:if test="position() != 1">
                    <Script Language="JavaScript">
                      <xsl:text>document.write(InsertWhiteSpaces('</xsl:text>
                      <xsl:value-of select="position()" />
                      <xsl:text>'));</xsl:text>
                    </Script>
                  </xsl:if>
                </td>
                <td>
                  <table cellpadding="0" cellspacing="0" id="exceptionName" class="ExceptionTreeName">
                    <tr id="{position()}evexName">
                      <xsl:if test="position()=1 and position()!=last()">
                        <td id="showEx" class="TreeNodePlus" onclick="ShowLowEx(this);">
                          <li>
                          </li>
                        </td>
                      </xsl:if>
                      <td>
                        <xsl:attribute name="class">
                          <xsl:if test="position() = 1">FieldNameSelected</xsl:if>
                          <xsl:if test="position() != 1">FieldName</xsl:if>
                        </xsl:attribute>
                        <xsl:attribute name="onclick">
                          JavaScript:ChangeExceptionData('<xsl:value-of select="position()" />ev');
                        </xsl:attribute>
                        <xsl:value-of select="exception/type" />
                        <xsl:text>: </xsl:text>
                      </td>
                    </tr>
                    <tr id="LowEx" style="Display:none;">
                      <xsl:if test="position()!=last()">
                        <td class="FieldNameLine">
                        </td>
                      </xsl:if>
                    </tr>
                  </table>
                </td>
                <td>
                  <xsl:attribute name="class">
                    <xsl:if test="position() = 1">FieldValueSelected</xsl:if>
                    <xsl:if test="position() != 1">FieldValue</xsl:if>
                  </xsl:attribute>
                  <xsl:value-of select="exception/message" />
                </td>
              </tr>
            </table>
          </td>
        </tr>
      </xsl:template>
      <xsl:template name="FunctionStack">
        <div id="mainTreeFun">
          <xsl:for-each select="events/event/stack">
            <div id="stackelem">
              <xsl:attribute name="mainId">
                <xsl:value-of select="position()" />
                <xsl:text>ev</xsl:text>
              </xsl:attribute>
              <xsl:attribute name="Style">
                <xsl:if test="position() != 1">DISPLAY:none</xsl:if>
                <xsl:if test="position() = 1">DISPLAY:block</xsl:if>
              </xsl:attribute>
              <xsl:call-template name="stack">
                <xsl:with-param name="mainId">
                  <xsl:value-of select="position()" />
                  <xsl:text>ev</xsl:text>
                </xsl:with-param>
              </xsl:call-template>
            </div>
          </xsl:for-each>
        </div>
      </xsl:template>
      <xsl:template name="stack">
        <xsl:param name="mainId" />
        <table class="TreeFun" cellspacing="0" cellpadding="0">
          <xsl:for-each select="stackPoint">
            <tr>
              <td class="TreeNodeImage">
                <li class="TreeNodeTypeFun">
                </li>
              </td>
              <td>
                <table cellspacing="0" cellpadding="0" class="TreeNode">
                  <tr>
                    <td id="{position()}sp{$mainId}" class="TreeNodeDetailsPlus">
                      <xsl:attribute name="onclick">
                        <xsl:text>Expander(this,'TreeNodeDetails',</xsl:text>
                        <xsl:text>'</xsl:text>
                        <xsl:value-of select="position()" />
                        <xsl:text>sp','</xsl:text>
                        <xsl:call-template name="ModuleInfo">
                          <xsl:with-param name="module">
                            <xsl:value-of select="module" />
                          </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>);</xsl:text>
                      </xsl:attribute>
                      <li class="TreeNodeValue">
                        <xsl:value-of select="method" />
                      </li>
                    </td>
                  </tr>
                </table>
              </td>
            </tr>
          </xsl:for-each>
        </table>
      </xsl:template>
      <xsl:template name="ModuleInfo">
        <xsl:param name="module" />
        <xsl:if test="count(//modules/module[path=$module]) &gt; 0">
          <xsl:variable name="moduleInfo" select="//modules/module[path=$module]" />
          <xsl:value-of select="$moduleInfo/name" />
          <xsl:text>','</xsl:text>
          <xsl:value-of select="$moduleInfo/version" />
          <xsl:text>','</xsl:text>
          <xsl:value-of select="$moduleInfo/dateModified" />
          <xsl:text>','</xsl:text>
          <xsl:value-of select="$moduleInfo/path" />
          <xsl:text>'</xsl:text>
        </xsl:if>
        <xsl:if test="count(//modules/module[path=$module]) = 0">
          <xsl:text>','','','',''</xsl:text>
        </xsl:if>
      </xsl:template>
      <xsl:template match="EventData" mode="PMOMASPMonitorLog">
        <table cellpadding="0" cellspacing="0" class="AlignByCompany">
          <tr class="AlignByCompany">
            <td class="AlignByCompany">

              <div class="HandlersFrame">
                <xsl:for-each select="*[local-name()='log']">
                  <!-- Slowest Group -->
                  <table cellpadding="0" cellspacing="0" class="Header">
                    <tr>
                      <td class="HeaderTitle" onclick="GlobalTreeExpander('slowestHeader', 'slowest', 'TreeNode');">Slowest Node</td>
                      <td id="slowestHeader" class="TreeNodeMinus" onclick="GlobalTreeExpander('slowestHeader', 'slowest', 'TreeNode');">
                        <li>
                        </li>
                      </td>
                    </tr>
                  </table>
                  <table cellpadding="0" cellspacing="0" class="TreeFun" id="slowest">
                    <xsl:for-each select="//callGroup[count(@link)=1]">
                      <tr>
                        <td>
                          <table cellpadding="0" cellspacing="0" class="TreeNode">
                            <tr>
                              <td class="SlowestTime">
                                <nobr>
                                  <xsl:value-of select="@duration" />
                                  <xsl:text>   (</xsl:text>
                                  <xsl:value-of select="@percent" />
                                  <xsl:text>)</xsl:text>
                                </nobr>
                              </td>
                              <td class="TreeValue">
                                <xsl:value-of select="@name" />
                              </td>
                            </tr>
                          </table>
                        </td>
                      </tr>
                    </xsl:for-each>
                  </table>
                  <!-- All Groups -->
                  <table cellpadding="0" cellspacing="0" class="Header">
                    <tr>
                      <td class="HeaderTitle" onclick="GlobalTreeExpander('perfView','groupView','TreeNode');">Stack</td>
                      <td id="perfView" class="TreeNodeMinus" onclick="GlobalTreeExpander('perfView','groupView','TreeNode');">
                        <li>
                        </li>
                      </td>
                    </tr>
                  </table>
                  <table cellpadding="0" cellspacing="0" class="TreeFun" id="groupView">
                    <xsl:for-each select="events/event">
                      <tr>
                        <td>
                          <table cellpadding="0" cellspacing="0" class="TreeNode" id="main">
                            <tr>
                              <xsl:if test="count(//callGroups/callGroup)&gt;0">
                                <td id="mainsign" class="TreeNodeMinus" onclick="TreeExpander('main','TreeNode');">
                                  <li>
                                  </li>
                                </td>
                              </xsl:if>
                              <td class="TreeNodeTypeFun">
                              </td>
                              <td class="TreeNodeTime">
                                <nobr>
                                  <xsl:value-of select="processTime" />
                                </nobr>
                              </td>
                              <td class="TreeNodeValue">
                                <xsl:value-of select="stack/stackPoint/description" />
                              </td>
                            </tr>
                          </table>
                        </td>
                      </tr>
                    </xsl:for-each>
                    <xsl:if test="count(callGroups/callGroup)&gt;0">
                      <xsl:for-each select="callGroups/callGroup">
                        <tr id="main.{position()-1}" style="Display:block;">
                          <td>
                            <table cellpadding="0" cellspacing="0" class="TreeNode">
                              <tr>
                                <xsl:if test="position()=last()">
                                  <td class="TreeNodeLast">
                                    <li>
                                    </li>
                                  </td>
                                </xsl:if>
                                <xsl:if test="position()!=last()">
                                  <td class="TreeNodeSibling">
                                    <li>
                                    </li>
                                  </td>
                                </xsl:if>
                                <td id="main.{position()-1}sign" class="TreeNodeSimple">
                                  <li>
                                  </li>
                                </td>
                                <td class="TreeNodeFunctionType">
                                </td>
                                <td class="TreeNodeTimeBasic">
                                  <nobr>
                                    <xsl:value-of select="@duration" />
                                    <xsl:text>   (</xsl:text>
                                    <xsl:value-of select="@percent" />
                                    <xsl:text>)</xsl:text>
                                  </nobr>
                                </td>
                                <td class="TreeValue">
                                  <xsl:value-of select="@name" />
                                </td>
                                <xsl:if test="@count and (@count!='')">
                                  <td class="TreeNodeValue">
                                    <xsl:text>[</xsl:text>
                                    <xsl:value-of select="@count" />
                                    <xsl:text> call</xsl:text>
                                    <xsl:if test="@count!='1'">
                                      <xsl:text>s</xsl:text>
                                    </xsl:if>
                                    <xsl:text>]</xsl:text>
                                  </td>
                                </xsl:if>
                              </tr>
                            </table>
                          </td>
                        </tr>
                      </xsl:for-each>
                    </xsl:if>
                  </table>
                </xsl:for-each>
              </div>

            </td>
          </tr>
          <tr>
            <td class="EmptySourceByCompany">
              .NET monitoring powered by AVIcode technology. Information on additional capabilities available at <A title="http://www.avicode.com/" href="http://www.avicode.com/OpsMgr2007.htm">www.avicode.com</A>
            </td>
          </tr>
        </table>

      </xsl:template>
      <xsl:template name="XMonitorScript">
        <xsl:element name="script">
          <xsl:comment>
            

function TableHead(className){
    return '&lt;table class="' + className + '"  cellpadding="0" cellspacing="0"&gt;';
}

///////////////////////////////////////////////////////////////////////////////
// Expand
///////////////////////////////////////////////////////////////////////////////

function Expander(obj, prefix, child, module, version, dateModified, path)
{	
    if (obj.className.indexOf('Minus') &gt; 0)
    {
        obj.className = prefix + 'Plus';
        obj.parentElement.parentElement.rows[1].style.display = 'none';		
    }
    else
    {		
        obj.className = prefix + 'Minus';
        
        var row = obj.parentElement.parentElement.rows[1];				
        if (typeof(row) == 'undefined')
        {			
            row = obj.parentElement.parentElement.insertRow();			
            var cell = row.insertCell();			
            cell.innerHTML = OpenNodeContent(child, module, version, dateModified, path);					
                
        }
        else
            row.style.display = '';			
    }
}

function TabHeader(id, num, activeTab, type, body){	
    return '&lt;div id="' + id + 'content' + num + '" Style="DISPLAY:' + ((activeTab==num) ? 'block' : 'none') + '"&gt;&lt;table cellpadding="0" cellspacing="0" class="TreeVar" id="' + id + type + '"&gt;&lt;tr&gt;&lt;td&gt;' + body + '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;';
}

function TabBookmark(id, num, activeTab, text){
    return  '&lt;td onmouseover="HightLightTab(true)" onmouseout="HightLightTab(false)" class="TabBookmark' + ((activeTab==num) ? 'Sel' : '') + '" id="' + id + num + '" onclick="SetTabValue(\'' + id + '\', ' + num + ')"&gt;&lt;nobr&gt;' + text + '&lt;/nobr&gt;&lt;/td&gt;';
}

function OpenNodeContent(id, module, version, dateModified, path)
{	
    var activeTab = 3;
    
    var s = TableHead('Tab');
    
    //Tabs content
    s += '&lt;tr&gt;&lt;td class="TabContent" colspan="1"&gt;';		

    //source tab
    s += '&lt;div id="' + id + 'content3" Style="DISPLAY:block"&gt;';
    s += '&lt;table cellpadding="0" cellspacing="0" class="TreeVar"&gt;';
        
    //header
    s += '&lt;col style="width: 20%" /&gt;&lt;col style="width: 100%" /&gt;&lt;tr&gt;&lt;th class="TreeVarHeader1"&gt;Name&lt;/th&gt;&lt;th class="TreeVarHeader2"&gt;Value&lt;/th&gt;&lt;/tr&gt;';
    
    //assembly info
    s += ModulesExpandRowContent('Assembly', id + 'assembly', 'Minus');		
    s += ModulesRowContent(false, 'Name', module + ((version != '') ? ', ' + version : ''), id + 'assembly', 'block'); 	
    s += ModulesRowContent(false, 'Date Modified', dateModified, id + 'assembly', 'block'); 
    s += ModulesRowContent(true, 'Assembly Path', path, id + 'assembly', 'block'); 	
    
    s += '&lt;/div&gt;';									
        
    return s;	
}

function GlobalTreeExpander(itemId, showobj, prefix)
{
    var objSign = document.getElementById(itemId);  
   
    
    if (objSign.className.indexOf('Minus') &gt; 0)
    {
        objSign.className = prefix + 'Plus';		
        ShowHide(0, showobj);	      	
    }	
    else if (objSign.className.indexOf('Plus') &gt; 0)
    {
        objSign.className = prefix + 'Minus';
        ShowHide(1, showobj);	
    }
}

function SetTabValue(tabControlId, value){
    var i = 0;
 
    while (document.getElementById(tabControlId + i)){
        if (i == value){
            document.getElementById(tabControlId + i).className = "TabBookmarkSel";
            ShowHide(1, tabControlId + 'content' + i);
        } else {
            document.getElementById(tabControlId + i).className = "TabBookmark";
            ShowHide(0, tabControlId + 'content' + i);	    
        }    
        i ++;
    }
}

function ShowHide(mode, child)
{
    var objColl = document.all(child);		
    
    if (typeof(objColl.length) == 'undefined')
    {
        if (mode == 0)
            objColl.style.display = 'none';
        else
            objColl.style.display = '';
        
        return;
    }
    
    for (var i = 0; i &lt; objColl.length; i++)
    {
        if (mode == 0)
            objColl[i].style.display = 'none';
        else
            objColl[i].style.display = '';
            
    }
}

function ModulesExpander(obj, id, prefix){
    if (obj.className.indexOf('Minus') &gt; 0)
    {
        obj.className = 'TreeVarNodePlus';		
        ShowHide(0, id);    
    }
    else    
    {
        obj.className = 'TreeVarNodeMinus';
        ShowHide(1, id);    
    }
}

function ModulesContent(position, name, version, dateModified, path)
{
    var s = ModulesExpandRowContent(name + ', ' + version, position + 'module', 'Plus');
    s += ModulesRowContent(false, 'Date Modified', dateModified, position + 'module', 'none'); 
    s += ModulesRowContent(true, 'Assembly Path', path, position + 'module', 'none');  	
    return s;
}

function ModulesRowContent(isLast, title, value, id, style){
    var s = '&lt;tr id="' + id + '" style="Display:' + style + ';" class="Normal"&gt;';
    s += '&lt;td style="width: 32%"&gt;';
    s += '&lt;table class="TreeNodeValue" cellpadding="0" cellspacing="0"&gt;&lt;tr&gt;';
    
    if (isLast)
        s += '&lt;td class="TreeNodeLast"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
    else
        s += '&lt;td class="TreeNodeSibling"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';	
    
    s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
    s += '&lt;td&gt;' + title + '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;';
    s += '&lt;td&gt;' + value + '&lt;/td&gt;&lt;/tr&gt;';
    return s;
}

function ModulesExpandRowContent(title, id, sign){
    var s = '&lt;tr class="Normal"&gt;&lt;td style="width: 32%;"&gt;';
    s += '&lt;table class="TreeNodeValue" cellpadding="0" cellspacing="0"&gt;';
    s += '&lt;tr&gt;&lt;td class="TreeVarNode' + sign + '" onclick="ModulesExpander(this, \'' + id + '\');"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
    s += '&lt;td class="TreeNodeAssembly"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
    s += '&lt;td&gt;' + title + '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;';
    return s;
}

function HightLightTab(flagHightLight)
{
    var el = event.srcElement;
    while(el.tagName != "TD") el = el.parentElement;
    if(el.className != 'TabBookmarkSel')
    {
        if(flagHightLight)
            el.className = 'TabBookmarkActive';
        else
            el.className = 'TabBookmark';
    }
}


function ChangeExceptionData(objId)
{	
    ChangeSelection(objId + 'exName', 'exceptionName', 'Name');
    ChangeSelection(objId + 'exValue', 'exceptionValue', 'Value');
    ChangeException(objId, 'stackelem');	
}


function ChangeSelection(objId, tableId, style)
{
    objTable = document.all(tableId);	
    
    for (var i = 0; i &lt; objTable.length; i++)
    {
        objRow = objTable[i].rows[0];		
        objField = objRow.lastChild;			
        
        if (objRow.id == objId)					
            objField.className = "Field" + style + "Selected";		
        else
            objField.className = "Field" + style;			
    }		
    
    return objTable.innerHTML;	
}

function ChangeException(objId, curId)
{	
    arrStacks = document.all(curId);
    for (var i = 0; i &lt; arrStacks.length; i++)
    {		
        if (arrStacks[i].mainId == objId)
            arrStacks[i].style.display = 'block'
        else		
            arrStacks[i].style.display = 'none'			
    }
}

function InsertWhiteSpaces(entryId)
{	
    var s = '&lt;table cellpadding="0" cellspacing="0" class="ExceptionTreeImage"&gt;&lt;tr&gt;';
    for (var i = 1; i &lt; entryId - 1; i++){
        s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
    }
    
    if (entryId == 1){
        s += '&lt;td class="TreeNodeFirst"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;'
        //s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
    }
    else{
        //s += '&lt;td class="TreeNodeSpace"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;';
        s += '&lt;td class="TreeNodeLast"&gt;&lt;li&gt;&lt;/li&gt;&lt;/td&gt;'
    }	
    
    s += '&lt;/table&gt;&lt;/tr&gt;';	
    
    return s;
}

function ShowLowEx(val){      
    if (val.className.indexOf('Minus') &gt; 0)
    {
        val.className = 'TreeNodePlus';
        ChangeExceptionData('1ev');
        ShowHide(0, "LowEx");    
    }
    else    
    {
        val.className = 'TreeNodeMinus';
        ShowHide(1, "LowEx");    
    }
}        

          </xsl:comment>
        </xsl:element>
      </xsl:template>
      <xsl:template name="PMonitorScript">
        <xsl:element name="script">
          <xsl:comment>
            
function TreeExpander(itemId, prefix)
{
    var objSign = document.getElementById(itemId + 'sign');  
    var i = 0;
    
    if (objSign.className.indexOf('Minus') &gt; 0)
    {
        objSign.className = prefix + 'Plus';
        while (document.getElementById(itemId + '.' + i)){
            ShowHide(0, itemId + '.' + i);
            
            var objSubSign = document.getElementById(itemId + '.' + i + 'sign');
            if (objSubSign)
                if (objSubSign.className.indexOf('Minus') &gt; 0)
                    TreeExpander(itemId + '.' + i, prefix)
            i ++;
        }			
    }	
    else if (objSign.className.indexOf('Plus') &gt; 0)
    {
        objSign.className = prefix + 'Minus';
        while (document.getElementById(itemId + '.' + i)){
            ShowHide(1, itemId + '.' + i);
            
            i ++;
        }			
    }
}

function GlobalTreeExpander(itemId, showobj, prefix)
{
    var objSign = document.getElementById(itemId);  
   
    
    if (objSign.className.indexOf('Minus') &gt; 0)
    {
        objSign.className = prefix + 'Plus';		
        ShowHide(0, showobj);	      	
    }	
    else if (objSign.className.indexOf('Plus') &gt; 0)
    {
        objSign.className = prefix + 'Minus';
        ShowHide(1, showobj);	
    }
}

function ShowHide(mode, child)
{
    var objColl = document.all(child);
    
    if (typeof(objColl.length) == 'undefined'){
        if (mode == 0)
            objColl.style.display = 'none';
        else
            objColl.style.display = '';		
        return;
    }
    
    for (var i = 0; i &lt; objColl.length; i++){
        if (mode == 0)
            objColl[i].style.display = 'none';
        else
            objColl[i].style.display = '';			
    }
}

          </xsl:comment>
        </xsl:element>
      </xsl:template>

      <xsl:template name="CSS">
        <xsl:element name="style">
          .HandlersFrame
          {
          background-color: White;
          width: 100%;
          height: 100%;
          font: 11px arial;
          }

          .HandlersFrame li
          {
          vertical-align: top;
          list-style-image: none;
          list-style-type: none;
          background-repeat: no-repeat;
          }

          .HandersFrame TD
          {
          font: 11px arial;
          }

          /*
          ********************************************************
          Header
          ********************************************************
          */

          .Header
          {
          margin-top: 10px;
          margin-bottom: 5px;
          padding-right: 1px;
          padding-left: 6px;
          padding-bottom: 1px;
          width: 100%;
          padding-top: 1px;
          border-bottom: 1px solid #0066CC;

          }


          .HeaderTitle
          {
          text-align: right;
          font: bold 10px verdana;
          color: #0066CC;
          cursor:hand;
          }


          /*By Company ==================================================*/
          .AlignByCompany
          {
          background-color: White;
          height: 100%;
          width: 100%;
          vertical-align: top;
          }

          .EmptySourceByCompany
          {
          width: 100%;
          padding: 5px 5px 5px 5px;
          color: #828282;
          text-align: right;
          font: 11px arial;
          }
          /*=============================================================*/

          .HeaderInput
          {
          margin-top: 0px;
          margin-bottom: 5px;
          padding-right: 1px;
          padding-left: 6px;
          padding-bottom: 1px;
          width: 100%;
          padding-top: 1px;
          text-align:right;

          }

          .HeaderInput LABEL
          {
          font:11px arial;
          text-align:right;
          cursor:hand;
          }

          .HeaderShowMode
          {
          font: 11px verdana;
          }

          .HeaderInput INPUT
          {
          width: 14px;
          margin-right:0px;
          text-align:right;
          }

          .Header TR
          {
          height:100%;
          }

          .Header TR TD
          {
          height:100%;

          }

          .Header .TreeNodeMinus LI
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.minus1')" />);
          padding-bottom: 2px;
          }

          .Header .TreeNodePlus LI
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.plus')" />);
          padding-bottom: 2px;
          }

          .Header .TreeNodeMinus
          {
          height:100%;
          width:13px;
          padding-bottom: 2px;
          background-image:none;
          }

          .Header .TreeNodePlus
          {
          height:100%;
          width:13px;
          padding-bottom: 2px;
          }



          /*
          ********************************************************
          Field name and value
          ********************************************************
          */


          .FieldName
          {
          font: bold 11px arial;
          padding: 1px 2px 1px 2px;
          color: Black;
          vertical-align: top;
          border-bottom: #efefef 1px solid;
          cursor:hand;
          }

          .FieldNameSelected
          {
          color: #C00E01;
          font: bold 11px arial;
          padding: 1px 2px 1px 2px;
          vertical-align: top;
          border-bottom: #efefef 1px solid;
          cursor:hand;
          }

          .FieldValue
          {
          font: 11px arial;
          vertical-align: top;
          padding: 1px 2px 1px 2px;
          color: #404040;
          border-bottom: #efefef 1px solid;
          }

          .FieldValueSelected
          {
          font: 11px arial;
          vertical-align: top;
          padding: 1px 2px 1px 2px;
          color: #C00E01;
          border-bottom: #efefef 1px solid;
          }

          .FieldTable
          {
          margin-top: 10px;
          width: 100%;
          }

          .FieldTable .FieldName
          {
          vertical-align: top;
          padding: 1px 2px 1px 2px;
          color: Black;
          background-color: #efefef;
          border-top: white 1px solid;
          border-left: white 1px solid;
          }

          .FieldTable .FieldValue
          {
          vertical-align: top;
          padding: 1px 2px 1px 2px;
          color: Black;
          border-top: white 1px solid;
          border-left: white 1px solid;
          }

          /*
          ********************************************************
          ExceptionTree
          ********************************************************
          */

          .ExceptionTree
          {
          table-layout:fixed;
          }

          .ExceptionTree .SimpleFieldName
          {
          font: bold 11px arial;
          }

          .ExceptionTree .SimpleFieldValue
          {
          font: 11px arial;
          }

          .ExceptionTreeImage
          {
          padding: 0px 6px 0px 0px;
          }

          .ExceptionTreeVal
          {
          font: 11px arial;
          vertical-align:top;
          table-layout:auto;
          height:100%;
          width: 100%;
          border-bottom: #efefef 1px solid;
          overflow: hidden;
          text-overflow: ellipsis;
          }

          .ExceptionTreeVal TR
          {
          vertical-align:top;
          margin-right: 0px;
          }

          .ExceptionTreeName TR TD
          {
          margin-right: 0px;
          }

          .ExceptionTreeName
          {
          height: 100%;
          }

          .ExceptionTreeName .FieldName
          {
          font: bold 11px arial;
          padding: 1px 0px 1px 2px;
          color: Black;
          vertical-align: top;
          cursor: hand;
          border: none;
          }

          .ExceptionTreeName .FieldNameLine
          {
          height: 100%;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.bgrNode')" />);
          background-repeat:repeat-y;
          }

          .ExceptionTreeName .FieldNameSelected
          {
          vertical-align:top;
          color: #C00E01;
          font: bold 11px arial;
          padding: 1px 0px 1px 2px;
          cursor:hand;
          border: none;
          }

          .ExceptionTreeVal .FieldValue
          {
          width: 100%;
          font: 11px arial;
          vertical-align: top;
          padding: 1px 2px 1px 0px;
          color: Black;
          border: none;
          overflow: hidden;
          text-overflow: ellipsis;
          }

          .ExceptionTreeVal .FieldValueSelected
          {
          width: 100%;
          font: 11px arial;
          vertical-align: top;
          padding: 1px 2px 1px 0px;
          color: #C00E01;
          border: none;
          overflow: hidden;
          text-overflow: ellipsis;
          }

          .ExceptionTreeName .TreeNodePlus
          {
          height: 13px;
          width: 13px;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.plus')" />);
          background-repeat:no-repeat;
          }

          .ExceptionTreeName .TreeNodeMinus
          {
          height: 13px;
          width: 13px;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.minus1')" />);
          background-repeat:no-repeat;
          }

          .ExceptionTreeVal .ExceptionTreeImage .TreeNodeFirst
          {
          width: 26px;
          padding: 0px 6px 0px 0px;
          }

          .ExceptionTreeVal .ExceptionTreeImage .TreeNodeFirst LI
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.lastNode1')" />);
          }

          .ExceptionTreeVal .ExceptionTreeImage .TreeNodeLast
          {
          width: 13px;
          }

          .ExceptionTreeVal .ExceptionTreeImage .TreeNodeSpace
          {
          width: 13px;
          }

          .ExceptionTreeVal .ExceptionTreeImage .TreeNodeLast LI
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.lastNode')" />);
          }


          /*
          ********************************************************
          Source information
          ********************************************************
          */

          .EmptyTab
          {
          width: 100%;
          padding: 5px 5px 5px 5px;
          color: #828282;
          text-align: center;
          font: 11px arial;
          border: solid 1px white;
          }

          .EmptyTabClick
          {
          color: #828282;
          font: 11px arial;
          text-decoration: underline;
          cursor:hand;
          }

          .EmptySource
          {
          width: 100%;
          padding: 5px 5px 5px 5px;
          color: #828282;
          text-align: left;
          font: 11px arial;
          }

          .SourceContainer
          {
          width: 100%;
          background: #EFEFEF;
          }

          .TreeVar .Normal TR TD A
          {
          text-align: left;
          width: 100%;
          color: #000080;
          text-decoration: underline;
          }

          .SourceContainerCode pre
          {
          margin: 0px;
          padding: 0px;
          word-wrap: break-word;
          word-break: normal;
          }

          .SourceContainerCode
          {
          table-layout:fixed;
          }

          .TreeVar .SourceContainerCode TR TD
          {
          border: medium none;
          }

          .TreeNode .SourceContainer .Legend
          {
          width: 15%;
          text-align: left;
          background-color: #c4c4c4;
          }

          .SourceContainer TR TD
          {
          border-right: medium none;
          border-top: white 1px solid;
          border-left: white 1px solid;
          border-bottom: medium none;
          padding: 1px 2px 1px 2px;
          }


          /*
          ********************************************************
          Slowest nodes container
          ********************************************************
          */


          .SlowestNodes
          {
          padding: 2px;
          padding-left: 8px;
          margin-bottom: 12px;
          text-align:left;
          table-layout:fixed;
          }

          .SlowestNodes .TreeNodeValue
          {
          font: 11px arial;
          word-wrap: break-word;
          }

          .SlowestNodes .TimeLink
          {
          font: 11px arial;
          width: 74px;
          }

          /*
          ********************************************************
          Long strings
          ********************************************************
          */


          .LongString
          {
          width: 22px;
          height:20px;
          background-position:100% 100%;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.copy')" />);
          cursor:hand;
          vertical-align:middle;
          }

          /*
          ********************************************************
          Tab control
          ********************************************************
          */

          table.Tab
          {
          padding-right: 0px;
          padding-left: 0px;
          padding-bottom: 0px;
          margin: 8px 0px 12px 0px;
          width: 100%;
          padding-top: 0px;
          background-color: #ffffff;
          table-layout: auto;
          }
          table.Tab td.TabBookmarkSel
          {
          padding-left: 10px;
          padding-right: 10px;
          padding-bottom: 1px;
          background-color: #C4C4C4;
          cursor: default;
          text-align: center;
          width: 250px;
          font: bolder;
          border-right: outset 1px;
          border-top: outset 1px;
          }
          table.Tab td.TabBookmark
          {
          color: #404040;
          padding-left: 10px;
          padding-right: 10px;
          border-top: solid 1px white;
          margin-top: 5px;
          cursor: hand;
          background-color: #F6F6F6;
          text-align: center;
          width: 250px;
          }
          table.Tab td.TabBookmarkActive
          {
          color: #0066CC;
          text-decoration: underline;
          padding-left: 10px;
          padding-right: 10px;
          border-top: solid 1px white;
          cursor: hand;
          background-color: #F6F6F6;
          text-align: center;
          width: 250px;
          }
          table.Tab td.TabBookmarkEmpty
          {
          width: 1000px;
          }
          table.Tab td.TabContent
          {
          border-right: outset 1px;
          border-bottom: outset 1px;
          }

          /*
          ********************************************************
          Function Tree
          ********************************************************
          */

          .TreeFun
          {
          background-color: White;
          width: 100%;
          table-layout:auto;
          }

          .TreeFun TR TD
          {
          vertical-align: top;
          border-bottom: #efefef 1px solid;
          }

          /*
          ********************************************************
          Variable Tree
          ********************************************************
          */

          .ExceptionVar
          {
          border: outset 1px;
          border-top: none;
          width: 100%;
          }

          .ModulesVar
          {
          border: outset 1px;
          border-top: none;
          width: 100%;
          }


          .TreeVar
          {
          width: 100%;
          /*
          border: outset 1px;
          border-top: none;
          */
          table-layout:fixed;
          font: 11px arial;
          overflow: hidden;
          text-overflow: ellipsis;
          }

          .TreeVar TH
          {
          font: 11px arial;
          background-color: #c4c4c4;
          text-align: left;
          border-bottom: 1px solid white;
          border-right: 1px solid white;
          border-top: #efefef 1px solid;
          padding: 1px 2px 1px 2px;
          }

          .TreeVar TR TD
          {
          font: 11px arial;
          vertical-align: top;
          background-color: #efefef;
          height: 100%;
          border-bottom: 1px solid white;
          border-right: 1px solid white;
          padding: 1px 2px 1px 2px;
          }

          .TreeVar .Normal
          {
          }
          .TreeVar .Alive
          {
          }

          .TreeVar .Normal TD
          {
          vertical-align:top;
          color: '';
          height: 100%;
          border-bottom: 1px solid white;
          border-right: 1px solid white;
          padding: 1px 2px 1px 2px;
          }

          .TreeVar .Alive TD
          {
          vertical-align: top;
          color: #ff6600;
          height: 100%;
          border-bottom: 1px solid white;
          border-right: 1px solid white;
          padding: 1px 2px 1px 2px;
          }

          .TreeVarHeader1
          {
          padding-left: 10px;
          padding-right: 10px;
          width: 28%;
          }

          .TreeVarHeader2
          {
          padding-left: 10px;
          padding-right: 10px;
          width: 60%;
          }

          .TreeVarHeader3
          {
          padding-left: 10px;
          padding-right: 10px;
          width: 12%;
          }
          .TreeVarCol1
          {
          overflow: hidden;
          text-overflow: ellipsis;
          }
          .TreeVarCol2
          {
          word-wrap: break-word;
          word-break: normal;
          }
          .TreeVarCol3
          {

          }

          .TreeVar .TreeNode TR TD
          {
          padding: 0px;
          border-right: medium none;
          border-top: medium none;
          border-left: medium none;
          border-bottom: medium none;
          }

          /*
          ********************************************************
          Common Tree
          ********************************************************
          */

          .TreeNode
          {
          font: 11px arial;
          height: 100%;
          table-layout: fixed;
          text-align: left;
          }

          .TreeNodeImage
          {
          height: 100%;
          width: 1px;
          }


          .TreeNode TR TD
          {
          padding: 0px;
          border-right: medium none;
          border-top: medium none;
          border-left: medium none;
          border-bottom: medium none;
          font: 11px arial;
          overflow: hidden;
          text-overflow: ellipsis;
          }

          .TreeVar .TreeNodeValue TR TD
          {
          padding: 0px;
          border-right: medium none;
          border-top: medium none;
          border-left: medium none;
          border-bottom: medium none;
          font: 11px arial;
          height: 16px;

          }

          .TreeVar .TreeNodeValue
          {
          padding: 0px;
          height: 100%;
          vertical-align: top;
          }


          .TreeNode .TreeValue
          {
          padding-left: 1px;
          height: 100%;
          vertical-align: top;
          }

          .TreeNodeValueHigh
          {
          padding: 0px;
          color: #C00E01;
          vertical-align: top;
          }

          .TreeNodeValueLow
          {
          padding: 0px;
          color: #828282;
          vertical-align: top;
          }


          /*
          ********************************************************
          Icons for tree
          ********************************************************
          */

          .TreeNodeLast
          {
          width: 13px;
          }

          .TreeNodeLast LI
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.lastNode')" />);
          }

          .TreeNodePlus
          {
          height: 100%;
          width: 13px;
          }
          .TreeNodePlus LI
          {

          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.plus')" />);
          }

          .TreeNodeMinus
          {
          height: 100%;
          width: 13px;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.bgrNode')" />);
          }

          .TreeNodeMinus LI
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.minus1')" />);
          }

          .TreeNodeSibling
          {
          width: 13px;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.bgrNode')" />);
          background-repeat: repeat-y;
          }
          .TreeNodeSibling LI
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.siblingNode')" />);
          }
          .TreeNodeSimple
          {
          width: 13px;
          }
          .TreeNodeSimple LI
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.simpleNode')" />);
          }

          .TreeNodeAssembly
          {
          width: 13px;
          }
          .TreeNodeAssembly LI
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.gears')" />);
          }

          .TreeNodeFunctionType
          {
          height: 14px;
          width: 24px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.fns')" />);
          }


          .TreeNodeLine
          {
          width: 13px;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.bgrNode')" />);
          background-repeat: repeat-y;
          }
          .TreeNodeLine LI
          {
          }

          .TreeNodeSpace
          {
          width: 13px;
          }
          .TreeNodeSpace LI
          {
          }
          .TreeNodeEChainIn
          {
          width: 13px;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.eChainIn')" />);
          cursor:hand;
          background-repeat:no-repeat;

          }

          .TreeNodeEChainOut
          {
          width: 13px;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.eChainOut')" />);
          cursor:hand;
          background-repeat:no-repeat;

          }

          .TreeNodePChainIn
          {
          width: 13px;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.pChainIn')" />);
          cursor:hand;
          background-repeat:no-repeat;


          }

          .TreeNodePChainOut
          {
          width: 13px;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.pChainOut')" />);
          cursor:hand;
          background-repeat:no-repeat;

          }

          /*
          for variable tree
          */

          .TreeVarNodeMinus
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.bgrNode')" />);
          background-repeat: repeat-y;
          width: 13px;
          }
          .TreeVarNodeMinus LI
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.minus2')" />);
          }

          .TreeVarNodePlus
          {
          width: 13px;
          }

          .TreeVarNodePlus LI
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.plus')" />);
          }

          .TreeVarNodeSimple
          {
          width: 13px;
          }
          .TreeVarNodeSimple LI
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.simpleNode')" />);
          }

          .TreeVarNodeSpace
          {
          width: 13px;
          }

          .TreeVarNodeSpace LI
          {
          /*background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.spaceNode')" />);*/
          }

          .TreeNodeValueName
          {
          table-layout:fixed;
          overflow: hidden;
          text-overflow: ellipsis;
          }

          .TreeNodeValueName TR TD
          {
          overflow: hidden;
          text-overflow: ellipsis;
          }


          /*
          ********************************************************
          Icons for details
          ********************************************************
          */

          .TreeNodeDetailsPlus
          {
          cursor: hand;
          }
          .TreeNodeDetailsPlus LI
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.detailsPlus')" />);
          }
          .TreeNodeDetailsMinus
          {
          cursor: hand;
          }

          .TreeNodeDetailsMinus LI
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.detailsMinus')" />);
          }



          /*
          ********************************************************
          Time
          ********************************************************
          */

          .TimeLink
          {
          font: 11px arial;
          vertical-align: top;
          padding-right: 4px;
          cursor: hand;
          color: #ff6600;
          text-decoration: underline;
          }

          .SlowestTime
          {
          font: 11px arial;
          vertical-align: top;
          padding-right: 4px;
          color: #ff6600;
          text-decoration: underline;
          width: 124px;
          }


          .TreeNodeTime
          {
          padding-left: 6px;
          width: 74px;
          color: #003c39;
          }

          .TreeNodeTimeBasic
          {
          padding-left: 6px;
          width: 124px;
          color: #003c39;
          }

          .TreeNodeTimeHigh
          {
          padding-left: 6px;
          width: 74px;
          color: #ff6600;
          }

          /*
          ********************************************************
          Parameters
          ********************************************************
          */

          .TreeNodeValueType
          {
          padding-right: 4px;
          padding-left: 1px; /*color: #003063;*/
          font-style: italic;
          }

          .TreeNodeValueParam
          {
          padding-right: 1px;
          padding-left: 4px; /*color: #828282;*/
          }

          /*
          ********************************************************
          Parameters
          ********************************************************
          */

          .FunctionNameAndParemeters
          {
          color: #828282;/*#0099ff;*/
          }

          /*
          ********************************************************
          Icons for objects
          ********************************************************
          */

          .TreeNodeTypeObj
          {
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.obj')" />);
          }
          .TreeNodeTypeFun
          {
          height: 14px;
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.fn')" />);
          }

          .TreeNodeTypeEmptyFun
          {
          height: 14px;
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.emptyFun')" />);
          }

          .TreeNodeTypeProp
          {
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.prop')" />);
          }
          .TreeNodeTypeSimple
          {
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.object')" />);
          }
          .TreeNodeTypeArray
          {
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.array')" />);
          }
          .TreeNodeTypeClass
          {
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.class')" />);
          }


          .TreeNodeTypeClassCycle
          {
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.classCicle')" />);
          }
          .TreeNodeTypeClassNoInfo
          {
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.classNoInfo')" />);
          }
          .TreeNodeTypeSimpleString
          {
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.object')" />);
          }
          .TreeNodeTypeSimpleBoolean
          {
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.object')" />);
          }

          .TreeNodeTypeSimpleChar
          {
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('Microsoft.SystemCenter.ASPNET20.2007', '31bf3856ad364e35', 'Microsoft.SystemCenter.ASPNET20.2007.Image.object')" />);
          }


          /*
          **********************
          Web Services Styles
          **********************
          */
          .Text
          {
          text-align:left;
          padding-left: 0px;
          color: #000000;//#435A4E;
          line-height: 11px;
          font-size: 9px;
          font-family:Arial;
          cursor:hand;
          }



          .TextExtr
          {
          text-align:left;
          padding-left: 0px;
          color: #000000;
          line-height: 11px;
          font-size: 9px;
          font-family:Arial;
          cursor:hand;
          }

          .Text_Header
          {

          font-weight:bolder;
          font-size:11px;
          }

          .DurationExtr
          {
          text-align:center;
          color: #b85454;
          font-size: 12px;
          font-family:Arial;
          font-weight:bold;
          font-style:italic;
          }

          .Duration
          {
          text-align:center;
          color: #435A4E;
          font-size: 12px;
          font-family:Arial;
          font-style:italic;
          }
          /*
          **************************
          End Web Services Styles
          **************************
          */
        </xsl:element>
      </xsl:template>
      <!-- new stylesheets -->
      <xsl:template name="AVIMOMCSS">
        <xsl:element name="style">
          A:LINK		{color: #255e80; text-decoration: none;}
          A:VISITED	{color: #255e80; text-decoration: none;}
          A:HOVER		{color: #255e80; text-decoration: underline;}

          .AlignByCompany
          {
          background-color: White;
          height: 100%;
          width: 100%;
          vertical-align: top;
          }

          .EmptySourceByCompany
          {
          width: 100%;
          padding: 5px 5px 5px 5px;
          color: #828282;
          text-align: right;
          font: 11px arial;
          }

          .HandlersFrame
          {
          background-color: White;
          width: 100%;
          height: 100%;
          font: 11px tahoma;
          }

          .HandlersFrame li
          {
          vertical-align: top;
          list-style-image: none;
          list-style-type: none;
          background-repeat: no-repeat;
          }

          .HandersFrame TD
          {
          font: 11px tahoma;
          }

          /*
          ********************************************************
          Header
          ********************************************************
          */

          .Header
          {
          margin-top: 10px;
          margin-bottom: 5px;
          padding-right: 1px;
          padding-left: 6px;
          padding-bottom: 1px;
          width: 100%;
          padding-top: 1px;
          border-bottom: 1px solid #29719c;

          }


          .HeaderTitle
          {
          text-align: right;
          font: bold 11px tahoma;
          color: #29719c;
          cursor:hand;
          }

          .HeaviestResourcesTitle
          {
          height: 16px;
          padding-left: 25px;
          background: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.grouprootfunction')" />) no-repeat left top;
          }

          table.HeaviestResourcesTable td.HeaviestResourceValue
          {
          padding: 0 20px 0 20px;
          }

          .HeaderInput
          {
          margin-top: 0px;
          margin-bottom: 5px;
          padding-right: 1px;
          padding-left: 6px;
          padding-bottom: 1px;
          width: 100%;
          padding-top: 1px;
          text-align:right;

          }

          .HeaderInput LABEL
          {
          font:11px tahoma;
          text-align:right;
          cursor:hand;
          }

          .HeaderInput td.ExpandAll
          {
          padding: 0 0 0 10px;
          white-space: nowrap;
          color: #d14c4c;
          height: 13px;
          width: 60px;
          cursor: hand;
          text-decoration: underline;
          background: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.expandall')" />) no-repeat left center;
          }

          .HeaderInput td.CollapseAll
          {
          padding: 0;
          height: 13px;
          width: 14px;
          cursor: hand;
          /*background: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.collapseall')" />) no-repeat left center;*/
          }

          .HeaderInput td.CheckBox
          {
          text-align: left;
          width: 135px;
          }

          .HeaderShowMode
          {
          font: 11px verdana;
          }

          .HeaderInput INPUT
          {
          width: 14px;
          margin-right:0px;
          text-align:right;
          }

          .Header TR
          {
          height:100%;
          }

          .Header TR TD
          {
          height:100%;

          }

          .Header .TreeNodeMinus LI
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.minus1')" />);
          padding-bottom: 2px;
          }

          .Header .TreeNodePlus LI
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.plus')" />);
          padding-bottom: 2px;
          }

          .Header .TreeNodeMinus
          {
          height:100%;
          width:13px;
          padding-bottom: 2px;
          background-image:none;
          }

          .Header .TreeNodePlus
          {
          height:100%;
          width:13px;
          padding-bottom: 2px;
          }

          .PageInfoHeader
          {
          border: 0px solid;
          width: 100%;
          padding: 0;
          margin: 0;
          }

          .PageInfoHeader .TreeNodePlus
          {
          padding: 0 0 0 16px;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.plus')" />);
          background-repeat: no-repeat;
          cursor: hand;
          }

          .PageInfoHeader .TreeNodeMinus
          {
          padding: 0 0 0 16px;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.minus1')" />);
          background-repeat: no-repeat;
          cursor: hand;
          }

          .PageInfoContent
          {
          width: 100%;
          padding: 0px 24px 0px 16px;
          }

          .PageInfoContent .TabContent
          {
          border-top: 1px solid #94b5e7;
          }

          .PageInfoContainer
          {
          width: 100%;
          border-bottom: 1px dotted #d6d6ce;
          padding: 11px 0 2px 0;
          }

          /*
          ********************************************************
          Field name and value
          ********************************************************
          */


          .FieldName,
          .FieldName a,
          .FieldName a:hover,
          .FieldName a:visited,
          .FieldName a:active
          {
          font:11px tahoma;
          padding: 1px 2px 1px 2px;
          color: Black;
          vertical-align: top;
          cursor:hand;
          }

          .FieldNameSelected,
          .FieldNameSelected a,
          .FieldNameSelected a:hover,
          .FieldNameSelected a:visited,
          .FieldNameSelected a:active
          {
          color: #C00E01;
          font:11px tahoma;
          padding: 1px 2px 1px 2px;
          vertical-align: top;
          cursor:hand;
          }

          .FieldName a,
          .FieldName a:hover,
          .FieldName a:visited,
          .FieldName a:active,
          .FieldNameSelected a,
          .FieldNameSelected a:hover,
          .FieldNameSelected a:visited,
          .FieldNameSelected a:active
          {
          font-weight: bold;
          }

          .FieldValue
          {
          font: 11px tahoma;
          vertical-align: top;
          padding: 1px 2px 1px 2px;
          color: #0000FF;
          /*color: #404040;*/
          word-wrap: break-word;
          }

          .FieldValueSelected
          {
          font: 11px tahoma;
          vertical-align: top;
          padding: 1px 2px 1px 2px;
          color: #C00E01;
          word-wrap: break-word;
          }

          .FieldTable
          {
          margin-top: 10px;
          width: 100%;
          }

          .FieldTable .FieldName
          {
          vertical-align: top;
          padding: 1px 2px 1px 2px;
          color: Black;
          background-color: #efefef;
          border-top: white 1px solid;
          border-left: white 1px solid;
          }

          .FieldTable .FieldValue
          {
          vertical-align: top;
          padding: 1px 2px 1px 2px;
          color: Black;
          border-top: white 1px solid;
          border-left: white 1px solid;
          }

          /*
          ********************************************************
          ExceptionTree
          ********************************************************
          */

          /*04-APR-2007 AGolovkov - fixing Exception Chain layout*/
          .ExceptionTree
          {
          width: 100%;
          table-layout:fixed;
          }

          .ExceptionTreeMiddle,
          .ExceptionTreeLast
          {
          vertical-align: top;
          width: 13px;
          height: 100%;
          }

          .ExceptionTreeMiddle
          {
          background: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.bgrNode')" />);
          }

          .ExceptionTreeMiddle DIV
          {
          width: 13px;
          height: 13px;
          background: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.middleNode')" />) no-repeat;
          }

          .ExceptionTreeLast DIV
          {
          width: 13px;
          height: 13px;
          background: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.lastNode1')" />) no-repeat;
          }

          .ExceptionTreeVal
          {
          font: 11px tahoma;
          vertical-align:top;
          table-layout:auto;
          height:100%;
          width: 100%;
          border-bottom: #efefef 1px solid;
          overflow: hidden;
          text-overflow: ellipsis;
          padding: 0px;
          margin: 0px;
          }

          .ExceptionTreeVal TR
          {
          vertical-align:top;
          margin-right: 0px;

          }

          .ExceptionTreeName
          {
          height: 100%;
          table-layout: fixed;
          }

          .ExceptionTreeName .FieldName
          {
          width: 100%;
          font: 11px tahoma;
          padding: 1px 0px 1px 2px;
          color: Black;
          vertical-align: top;
          cursor: hand;
          border: none;
          word-wrap: break-word;
          }

          .ExceptionTreeName .FieldNameSelected
          {
          width: 100%;
          vertical-align:top;
          color: #C00E01;
          font: 11px tahoma;
          padding: 1px 0px 1px 2px;
          cursor:hand;
          border: none;
          word-wrap: break-word;
          }


          .ExceptionTreeName .FieldName A,
          .ExceptionTreeName .FieldNameSelected A
          {
          font-weight: bold;
          }

          .ExceptionTreeName .FieldName DIV,
          .ExceptionTreeName .FieldNameSelected DIV
          {
          width: 100%;
          display: table-cell;
          word-wrap: break-word;
          }

          .ExceptionTreeName .TreeNodePlus
          .ExceptionTreeName .TreeNodeMinus,
          .ExceptionTreeName .TreeNodeEmpty
          {
          width: 13px;
          padding: 0px;
          margin: 0px;
          text-align: left;
          vertical-align: top;
          }

          .ExceptionTreeName .TreeNodePlus
          .ExceptionTreeName .TreeNodeMinus
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.minus1')" />) repeat-y;
          }


          .ExceptionTreeName .TreeNodePlus DIV,
          .ExceptionTreeName .TreeNodeMinus DIV
          {
          height: 13px;
          width: 13px;
          padding: 0px;
          margin: 0px;
          text-align: left;
          vertical-align: top;
          }

          .ExceptionTreeName .TreeNodePlus DIV
          {

          background: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.plus')" />)  no-repeat;
          }

          .ExceptionTreeName .TreeNodeMinus DIV
          {

          background: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.minus1')" />)  no-repeat;
          }
          /*04-APR-2007 AGolovkov End*/



          /*
          ********************************************************
          Source information
          ********************************************************
          */

          .EmptyTab
          {
          width: 100%;
          padding: 5px 5px 5px 5px;
          color: #828282;
          text-align: center;
          font: 11px tahoma;
          border: solid 1px white;
          }

          .EmptyTabClick
          {
          color: #828282;
          font: 11px tahoma;
          text-decoration: underline;
          cursor:hand;
          }

          div.EmptySource
          {
          width: 100%;
          padding: 5px 5px 5px 5px;
          color: #828282;
          text-align: left;
          font: 11px tahoma;
          }

          .EmptySource a
          {
          color: #009cff;
          }

          .EmptySource a:hover
          {
          color: #009cff;
          }

          .EmptySource a:visited
          {
          color: #009cff;
          }

          .SourceContainer
          {
          width: 100%;
          background: #EFEFEF;
          }

          .TreeVar .Normal TR TD A
          {
          text-align: left;
          width: 100%;
          color: #255e80;
          }

          .SourceContainerCode pre
          {
          margin: 0px;
          padding: 0px;
          word-wrap: break-word;
          word-break: normal;
          }

          .SourceContainerCode
          {
          table-layout:fixed;
          }

          .TreeVar .SourceContainerCode TR TD
          {
          border: medium none;
          }

          .TreeNode .SourceContainer .Legend
          {
          width: 15%;
          text-align: left;
          background-color: #c4c4c4;
          }

          .SourceContainer TR TD
          {
          border-right: medium none;
          border-top: white 1px solid;
          border-left: white 1px solid;
          border-bottom: medium none;
          padding: 1px 2px 1px 2px;
          }


          /*
          ********************************************************
          Slowest nodes container
          ********************************************************
          */


          .SlowestNodes
          {
          padding: 2px;
          padding-left: 8px;
          margin-bottom: 12px;
          text-align:left;
          table-layout:fixed;
          }

          .SlowestNodes .TreeNodeValue
          {
          font: 11px tahoma;
          word-wrap: break-word;
          }

          .SlowestNodes .TimeLink
          {
          font: 11px tahoma;
          width: 100px;
          text-decoration: none;
          }

          .SlowestNodes .TimeLink .processTime
          {
          color: #003c39;
          }

          /*
          ********************************************************
          Long strings
          ********************************************************
          */


          .LongString
          {
          width: 22px;
          height:20px;
          background-position:100% 100%;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.copy')" />);
          cursor:hand;
          vertical-align:middle;
          }

          /*
          ********************************************************
          Tab control
          ********************************************************
          */

          td.TabContainer
          {
          }

          td.TabExceptionContainer
          {
          padding: 0 15px 0 36px;
          }

          table.Tab
          {
          padding: 0px;
          margin: 8px 0px 12px 0px;
          width: 100%;
          background-color: #fff;
          table-layout: auto;
          }

          table.Tab table.TableBookmark
          {
          width: 100%;
          padding: 0;
          }

          table.Tab td.TabBookmarkSel
          {
          padding-left: 10px;
          padding-right: 10px;
          padding-bottom: 1px;
          background-color: #d6e7f7;
          cursor: default;
          text-align: center;
          width: 80px;
          font: bold;
          border-top: 1px solid #94b5e7;
          border-left: 1px solid #94b5e7;
          border-bottom: solid 1px #94b5e7;
          }
          table.Tab td.TabBookmark
          {
          color: black;
          padding-left: 10px;
          padding-right: 10px;
          border-top: 1px solid #94b5e7;
          border-left: 1px solid #94b5e7;
          border-bottom: solid 1px #94b5e7;
          margin-top: 5px;
          cursor: hand;
          background-color: #eff7ff;
          text-align: center;
          width: 80px;
          }
          table.Tab td.TabBookmarkActive
          {
          color: #3366a7;
          text-decoration: underline;
          padding-left: 10px;
          padding-right: 10px;
          border-top: 1px solid #94b5e7;
          border-left: 1px solid #94b5e7;
          border-bottom: solid 1px #94b5e7;
          cursor: hand;
          background-color: #eff7ff;
          text-align: center;
          width: 80px;
          }
          table.Tab td.TabBookmarkEmpty
          {
          width: 1000px;
          border-bottom: 1px solid #94b5e7;
          border-left: 1px solid #94b5e7;
          text-align: right;
          }
          table.Tab td.TabContent
          {
          padding: 0px;
          border-right: 1px solid #94b5e7;
          border-bottom: 1px solid #94b5e7;
          border-left: 1px solid #94b5e7;
          vertical-align: top;

          /**
          * If there aren't any rows in the TreeVar table (below the header row)
          * we want to see empty space there.
          * In other cases this conditions will be ignored and the table will be higher then 35px.
          **/
          height: 35px;
          }

          table.Tab td.TabContent div
          {
          }

          table.Tab td.TabContent div div
          {
          border: 0;
          }

          /*
          ********************************************************
          Function Tree
          ********************************************************
          */

          .TreeFun
          {
          background-color: White;
          width: 100%;
          table-layout:auto;
          }

          .TreeFun TR TD
          {
          vertical-align: top;
          border-bottom: #D4D0C8 1px solid;
          }

          /*
          ********************************************************
          Variable Tree
          ********************************************************
          */

          .ExceptionVar
          {
          border: 1px solid #94b5e7;
          width: 100%;
          }

          .ModulesVar
          {
          border: 1px solid #94b5e7;
          width: 100%;
          }


          .TreeVar
          {
          width: 100%;
          table-layout:fixed;
          font: 11px tahoma;
          overflow: hidden;
          text-overflow: ellipsis;
          }

          .TreeVar TH
          {
          font: 11px tahoma;
          background-color: #d6e7f7;
          text-align: left;
          border-right: 1px solid white;
          border-bottom: 1px solid #94b5e7;
          padding: 1px 2px 1px 2px;
          }

          .TreeVar TR TD
          {
          font: 11px tahoma;
          vertical-align: top;
          background-color: #fff;
          height: 100%;
          border-right: 1px solid #d6d6ce;
          /*border-bottom: 1px solid #e6e6e6;*/
          padding: 1px 2px 1px 2px;
          }

          .TreeVar .Normal
          {
          }
          .TreeVar .Alive
          {
          }

          .TreeVar .Normal TD
          {
          vertical-align:top;
          color: '';
          height: 100%;
          border-bottom: 1px solid #d6d6ce;
          border-right: 1px solid #d6d6ce;
          padding: 1px 2px 1px 2px;
          }

          .TreeVar .Alive TD
          {
          vertical-align: top;
          color: #ff6600;
          height: 100%;
          padding: 1px 2px 1px 2px;
          border-bottom: 1px solid #d6d6ce;
          border-right: 1px solid #d6d6ce;
          }

          .TreeVarHeader1
          {
          padding-left: 10px;
          padding-right: 10px;
          width: 28%;
          }

          .TreeVarHeader2
          {
          padding-left: 10px;
          padding-right: 10px;
          width: 60%;
          }

          .TreeVarHeader3
          {
          padding-left: 10px;
          padding-right: 10px;
          width: 12%;
          }
          .TreeVarCol1
          {
          overflow: hidden;
          text-overflow: ellipsis;
          }
          .TreeVarCol2
          {
          word-wrap: break-word;
          word-break: normal;
          }
          .TreeVarCol3
          {

          }

          .TreeVar .TreeNode TR TD
          {
          padding: 0px;
          border-right: medium none;
          border-top: medium none;
          border-left: medium none;
          border-bottom: medium none;
          }

          /*
          ********************************************************
          Common Tree
          ********************************************************
          */

          /* AGolovkov - new common tree styles */
          .TreeRow
          {
          width: 100%;
          height: 100%;
          display: table-row;
          }

          .TreeRow DIV
          {
          float: left;
          }

          .TreeRow DIV.TreeNodePlus
          .TreeRow DIV.TreeNodeMinus,
          .TreeRow DIV.TreeNodeEmpty
          {
          width: 13px;
          height: 100%;
          padding: 0px;
          margin: 0px;
          text-align: left;
          vertical-align: top;
          display: table-cell;
          }

          .TreeRow DIV.TreeNodePlus
          .TreeRow DIV.TreeNodeMinus
          {
          background: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.bgrNode')" />) repeat-y;

          }


          .TreeRow DIV.TreeNodePlus DIV,
          .TreeRow DIV.TreeNodeMinus DIV,
          .TreeRow DIV.TreeNodeEmpty DIV
          {
          height: 13px;
          width: 13px;
          padding: 0px;
          margin: 0px;
          text-align: left;
          vertical-align: top;
          }

          .TreeRow DIV.TreeNodePlus DIV
          {
          background: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.plus')" />) repeat-y;
          }

          .TreeRow DIV.TreeNodeMinus DIV
          {
          background: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.minus1')" />) repeat-y;

          }

          .TreeRow DIV.TreeNodeTime
          {
          padding: 0 0 0 6px;
          width: 74px;
          height: 100%;
          color: #003c39;
          vertical-align: top;
          white-space: nowrap;
          text-overflow: ellipsis;
          display: table-cell;
          }

          .TreeRow DIV.TreeNodeValue
          {
          height: 100%;
          min-width: 200px;
          display: table-cell;
          }
          /* AGolovkov End */



          .ExceptionData
          {
          table-layout: fixed;
          }

          .ExceptionData,
          .ExceptionData td.TreeNodeDetailsPlus,
          .ExceptionData td.TreeNodeDetailsMinus,
          .ExceptionData td.TreeNodeDetailsPlusSelected,
          .ExceptionData td.TreeNodeDetailsMinusSelected
          {
          word-wrap: break-word;
          }

          .ExceptionData td.TreeNodeDetailsPlus li,
          .ExceptionData td.TreeNodeDetailsMinus li
          {
          font: 11px tahoma;
          padding-bottom: 2px;
          /*word-wrap: break-word;*/
          }

          .ExceptionData td.TreeNodeDetailsPlusSelected li,
          .ExceptionData td.TreeNodeDetailsMinusSelected li
          {
          diasplay: block;
          font: 11px tahoma;
          color: #ad1b1b;
          cursor: hand;
          /*word-wrap: break-word;*/
          }

          .ExceptionData td.TreeNodeDetailsPlusSelected li i,
          .ExceptionData td.TreeNodeDetailsMinusSelected li i
          {
          color: Black;
          }

          .TreeNode
          {
          font: 11px tahoma;
          height: 100%;
          table-layout: fixed;
          text-align: left;
          }


          .TreeNodeImage
          {
          height: 100%;
          width: 1px;
          }


          .TreeNode TR TD
          {
          padding: 0px;
          border: 0px solid;
          font: 11px tahoma;
          height: 100%;
          word-wrap: break-word;
          }

          .TreeVar .TreeNodeValue TR TD
          {
          padding: 0px;
          border-right: medium none;
          border-top: medium none;
          border-left: medium none;
          border-bottom: medium none;
          font: 11px tahoma;
          height: 16px;
          }

          .TreeNodeValue
          {

          }

          .TreeNodeValue .TreeNode
          {
          overflow: visible;
          }

          .TreeVar .TreeNodeValue
          {
          padding: 0px;
          height: 100%;
          vertical-align: top;
          }


          .TreeNode .TreeValue
          {
          padding-left: 1px;
          height: 100%;
          vertical-align: top;
          }

          .TreeNodeValueHigh
          {
          padding: 0px;
          color: #C00E01;
          vertical-align: top;
          width: 100%;
          }

          .TreeNodeValueLow
          {
          padding: 0px;
          color: #828282;
          vertical-align: top;
          width: 100%;
          }

          span.FuncParams
          {
          color: #373e61;
          }

          span.IconSpace
          {
          width: 15px;
          height: 15px;
          }

          div.FuncIcons
          {
          /*margin-left: 7px;*/
          float: left;
          height: 100%;
          }

          div.FuncName
          {
          padding-left: 1px;
          float: left;
          word-wrap: break-word;
          white-space: normal;
          height: 100%;
          }

          tr.Dots td {
          padding-left: 80px;
          }
          /*
          ********************************************************
          Icons for tree
          ********************************************************
          */

          /* AGolovkov - new common tree styles */
          .TreeRow DIV.TreeNodeLast,
          .TreeRow DIV.TreeNodeFirst,
          .TreeRow DIV.TreeNodeSibling,
          .TreeRow DIV.TreeNodeSimple
          {
          width: 13px;
          height: 100%;
          vertical-align: top;
          }

          .TreeRow DIV.TreeNodeSibling
          {
          background: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.bgrNode')" />) repeat-y;
          }

          .TreeRow DIV.TreeNodeLast DIV,
          .TreeRow DIV.TreeNodeFirst DIV,
          .TreeRow DIV.TreeNodeSibling DIV,
          .TreeRow DIV.TreeNodeSimple DIV
          {
          width: 13px;
          height: 13px;
          }

          .TreeRow DIV.TreeNodeFirst DIV
          {
          background: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.firstNode')" />) no-repeat;
          }

          .TreeRow DIV.TreeNodeLast DIV
          {
          background: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.lastNode')" />) no-repeat;
          }

          .TreeRow DIV.TreeNodeSibling DIV
          {
          background: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.siblingNode')" />) no-repeat;
          }

          .TreeRow DIV.TreeNodeSimple DIV
          {
          background: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.simpleNode')" />) no-repeat;
          }

          .TreeRow DIV.TreeNodeTypeFun
          {
          height: 14px;
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.fn')" />);
          }
          .TreeRow DIV.TreeNodeTypeFunHi
          {
          height: 14px;
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.fnhi')" />);
          }


          .TreeRow DIV.TreeNodeTypeEmptyFun
          {
          height: 14px;
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.emptyFun')" />);
          }
          /* AGolovkov End */



          .TreeNodeLast,
          .TreeNodeFirst
          {
          width: 13px;
          }

          .TreeNodeFirst LI
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.firstNode')" />);
          }

          .TreeNodeLast LI
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.lastNode')" />);
          }

          .TreeNodePlus
          {
          height: 100%;
          width: 13px;
          }
          .TreeNodePlus LI
          {

          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.plus')" />);
          }

          .TreeNodeMinus
          {
          height: 100%;
          width: 13px;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.bgrNode')" />);
          }

          .TreeNodeMinus LI
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.minus1')" />);
          }

          .TreeNodeSibling
          {
          width: 13px;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.bgrNode')" />);
          background-repeat: repeat-y;
          }
          .TreeNodeSibling LI
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.siblingNode')" />);
          }
          .TreeNodeSimple
          {
          width: 13px;
          }
          .TreeNodeSimple LI
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.simpleNode')" />);
          }

          .TreeNodeAssembly
          {
          width: 13px;
          }
          .TreeNodeAssembly LI
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.gears')" />);
          }

          .TreeNodeTarget
          {
          width: 13px;
          }
          .TreeNodeTarget LI
          {
          background: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.target2')" />) no-repeat;
          }

          .TreeNodeAction
          {
          width: 13px;
          }
          .TreeNodeAction LI
          {
          background: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.action2')" />) no-repeat;
          }

          .TreeNodeSecurity
          {
          width: 13px;
          }
          .TreeNodeSecurity LI
          {
          background: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.security2')" />) no-repeat;
          }

          .TreeNodeFunctionType
          {
          height: 14px;
          width: 24px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.fns')" />);
          }


          .TreeNodeLine
          {
          width: 13px;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.bgrNode')" />);
          background-repeat: repeat-y;
          }
          .TreeNodeLine LI
          {
          }

          .TreeNodeSpace
          {
          width: 13px;
          }
          .TreeNodeSpace LI
          {
          }
          .TreeNodeEChainIn
          {
          width: 20px;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.eChainIn')" />);
          cursor:hand;
          background-repeat:no-repeat;
          background-position: right;
          height: 15px;

          }

          .TreeNodeEChainOut
          {
          width: 20px;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.eChainOut')" />);
          cursor:hand;
          background-repeat:no-repeat;
          background-position: right;
          height: 15px;

          }

          .TreeNodePChainIn
          {
          width: 20px;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.pChainIn')" />);
          cursor:hand;
          background-repeat:no-repeat;
          background-position: right;
          height: 15px;

          }

          .TreeNodePChainOut
          {
          width: 20px;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.pChainOut')" />);
          cursor:hand;
          background-repeat:no-repeat;
          background-position: right;
          height: 15px;
          }

          /*
          for variable tree
          */

          .TreeVarNodeMinus
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.bgrNode')" />);
          background-repeat: repeat-y;
          width: 13px;
          }
          .TreeVarNodeMinus LI
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.minus1')" />);
          }

          .TreeVarNodePlus
          {
          width: 13px;
          }

          .TreeVarNodePlus LI
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.plus')" />);
          }

          .TreeVarNodeSimple
          {
          width: 13px;
          }
          .TreeVarNodeSimple LI
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.simpleNode')" />);
          }

          .TreeVarNodeSpace
          {
          width: 13px;
          }

          .TreeVarNodeSpace LI
          {
          /*background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.spaceNode')" />);*/
          }

          .TreeNodeValueName
          {
          table-layout:fixed;
          word-wrap: normal;
          }

          .TreeNodeValueName TR TD
          {
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
          }

          .TreeVar .TreeNodeValueNameFixed TR TD
          {
          padding-left: 0px;
          border-right: medium none;
          border-top: medium none;
          border-left: medium none;
          border-bottom: medium none;
          font: 11px tahoma;
          height: 16px;

          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
          }

          .TreeNodeValueNameFixed
          {
          table-layout: fixed;
          }

          .TreeNodeValueNameFixed tr td
          {
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
          }

          .TreeNodeValueNameFixed tr td a
          {
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
          }

          .TreeNodeValueNameFixed .TreeNode
          {
          overflow: visible;
          }

          .TreeVar .TreeNodeValueNameFixed
          {
          padding: 0px;
          height: 100%;
          vertical-align: top;
          }

          /*
          ********************************************************
          Icons for details
          ********************************************************
          */



          .TreeNodeDetailsPlus,
          .TreeNodeDetailsPlusSelected,
          .TreeNodeDetailsMinus,
          .TreeNodeDetailsMinusSelected
          {
          cursor: hand;
          padding: 0;
          overflow: hidden;
          /*word-wrap: break-word;*/
          }
          .TreeNodeDetailsPlus LI,
          .TreeNodeDetailsPlusSelected LI
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.detailsPlus1')" />);
          padding: 0 0 0 12px;
          /*word-wrap: break-word;*/
          width: 100%;
          }

          .TreeNodeDetailsMinus LI,
          .TreeNodeDetailsMinusSelected LI
          {
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.detailsMinus1')" />);
          padding: 0 0 0 12px;
          /*word-wrap: break-word;*/
          width: 100%;
          }



          /*
          ********************************************************
          Time
          ********************************************************
          */

          .TimeLink
          {
          font: 11px tahoma;
          vertical-align: top;
          padding-right: 4px;
          cursor: hand;
          color: #d14c4c;
          text-decoration: underline;
          }

          .SlowestTime
          {
          font: 11px tahoma;
          vertical-align: top;
          padding-right: 4px;
          color: #ff6600;
          text-decoration: underline;
          width: 124px;
          }


          .TreeNodeTime
          {
          padding-left: 6px;
          width: 74px;
          color: #003c39;
          }

          .TreeNodeTimeBasic
          {
          padding-left: 6px;
          width: 124px;
          color: #003c39;
          }

          .TreeNodeTimeHigh
          {
          padding-left: 6px;
          width: 74px;
          color: #d14c4c;
          }

          /*
          ********************************************************
          Parameters
          ********************************************************
          */

          .TreeNodeValueType
          {
          padding-right: 4px;
          padding-left: 1px; /*color: #003063;*/
          font-style: italic;
          }

          .TreeNodeValueParam
          {
          padding-right: 1px;
          padding-left: 4px; /*color: #828282;*/
          }

          /*
          ********************************************************
          Parameters
          ********************************************************
          */

          .FunctionNameAndParemeters
          {
          color: #828282;/*#0099ff;*/
          padding-left: 45px;
          }

          /*
          ********************************************************
          Icons for objects
          ********************************************************
          */

          .TreeNodeTypeObj
          {
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.obj')" />);
          }
          .TreeNodeTypeFun
          {
          height: 14px;
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.fn')" />);
          }
          .TreeNodeTypeFunHi
          {
          height: 14px;
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.fnhi')" />);
          }


          .TreeNodeTypeEmptyFun
          {
          height: 14px;
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.emptyFun')" />);
          }

          .TreeNodeTypeProp
          {
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.prop')" />);
          }
          .TreeNodeTypeSimple
          {
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.object')" />);
          }
          .TreeNodeTypeArray
          {
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.array')" />);
          }
          .TreeNodeTypeClass
          {
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.class')" />);
          }


          .TreeNodeTypeClassCycle
          {
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.classCicle')" />);
          min-height: 20px;
          }
          .TreeNodeTypeClassNoInfo
          {
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.classNoInfo')" />);
          }
          .TreeNodeTypeSimpleString
          {
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.object')" />);
          }
          .TreeNodeTypeSimpleBoolean
          {
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.object')" />);
          }

          .TreeNodeTypeSimpleChar
          {
          width: 20px;
          background-repeat: no-repeat;
          background-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.object')" />);
          }


          /*
          **********************
          Web Services Styles
          **********************
          */
          .Text
          {
          text-align:left;
          padding-left: 0px;
          color: #000000;//#435A4E;
          line-height: 13px;
          font-size: 11px;
          font-family:tahoma;
          cursor:hand;
          }



          .TextExtr
          {
          text-align:left;
          padding-left: 0px;
          color: #000000;
          line-height: 13px;
          font-size: 11px;
          font-family:tahoma;
          cursor:hand;
          }

          .Text_Header
          {

          font-weight:bolder;
          font-size:11px;
          }

          .DurationExtr
          {
          text-align:center;
          color: #a40d0d;
          font-size: 11px;
          font-family: tahoma;
          }

          .Duration
          {
          text-align:center;
          color: black;
          font-size: 11px;
          font-family: tahoma;
          }
          /*
          **************************
          End Web Services Styles
          **************************
          */

          /***************************
          Chart Styles
          ***************************/
          .ChartTitleLeft
          {
          font: 11px tahoma;
          color: #29719c;
          padding: 5px 0 0 0;
          vertical-align: top;
          }

          .ChartHeader
          {
          color: #6daab7;
          padding-left: 14px;
          padding-right: 14px;
          background: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.leftDownArrow')" />) no-repeat left bottom;
          }

          .ChartTitleRigth
          {
          text-align: right;
          font: 11px tahoma;
          color: #29719c;
          padding: 5px 0 0 0;
          vertical-align: top;
          }

          .ChartSummary
          {
          display: block;
          margin: 5px 0 5px 0;
          padding-left: 14px;
          font: bold 10px tahoma;
          color: #000000;
          }


          /***************************
          EventLog handler
          ***************************/
          table.EventData,
          table.EventData table
          {
          width: 100%;
          }

          table.EventData table td
          {
          padding: 1px;
          background: #efefef;
          text-align: center;
          }

          table.EventData th
          {
          background: #c4c4c4;
          font: bold 11px Verdana;
          }

          .EventData .Bytes td
          {
          padding: 2px;
          }

          .EventData .Bytes td.Offset
          {
          width: 50px;
          font-weight: bold;
          padding-left: 10px;
          }

          .EventData table.Symbols
          {
          }

          .EventData .Symbols td
          {
          padding: 3px 2px 2px 5px;
          }

          .EventData .Dwords td
          {
          padding: 2px 5px 2px 5px;
          }

          /* Instrumentation Handler */
          table.InstrumentationEventData
          {
          border-top: 1px solid white;
          border-left: 1px solid white;
          table-layout: fixed;
          width: 100%;
          border-collapse: collapse;
          }

          table.InstrumentationEventData table
          {
          border-top: 0;
          border-left: 0;
          border-collapse: collapse;
          width: 100%;
          }

          .InstrumentationEventData th
          {
          background: #c4c4c4;
          font: bold 10px Verdana;
          text-align: left;
          padding: 2px;
          border-bottom: 1px solid white;
          border-right: 1px solid white;
          }

          .InstrumentationEventData td
          {
          font: normal 11px tahoma;
          background: #efefef;
          padding: 2px 5px 2px 5px;
          border-bottom: 1px solid white;
          border-right: 1px solid white;
          }

          .InstrumentationEventData td.InstrumentationEventKey
          {
          }

          .InstrumentationEventData td.InstrumentationEventValue
          {
          word-wrap: break-word;
          }

          .InstrumentationEventData td.InstrumentationEventNestedTable
          {
          padding: 0;
          }

          /* EventLog Handler */
          div.EventLogBody
          {
          width: 100%;
          word-wrap: break-word;
          word-break: break-all
          }

          div.EventLogData
          {
          }


          /************************************************
          *************** Collection notes ****************
          *************************************************/

          ul.CollectionNotes
          {
          margin: 0 0 10px 10px;
          padding: 0 0 0 10px;
          }

          ul.CollectionNotes li
          {
          list-style-position: outside;
          list-style-type:square;
          list-style-image: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.list')" />);
          padding: 0px;
          margin: 0px 0px 5px 0px;
          }

          A.MSDNImg
          {
          display: block;
          float: right;
          border: 0px solid #ffffff;
          padding: 0px;
          margin: 0px;
          width: 16px;
          height: 16px;
          background: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.msdn')" />);
          }

          .PageUrl
          {
          margin-bottom: 0px;
          padding: 1px 2px 2px 0px;
          width: 100%;
          white-space: nowrap;
          }

          .PageUrlLabel
          {
          font-weight: bold;

          }

          .PageUrlName
          {
          width: 580px;
          overflow: hidden;
          text-overflow: ellipsis;
          white-space: nowrap;
          }

          .CallSectionTitlePlus
          {
          background: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.detailsPlus1')" />) no-repeat;
          padding: 0 0 0 14px;
          font-weight: bold;
          cursor: hand;
          }

          .CallSectionTitleMinus
          {
          background: url(<xsl:value-of select="DataTypeTransformer:CreateMPImageURL('AVIcode.DotNet.SystemCenter.Enterprise.Monitoring', '5e9f8bbdb7409eb4', 'AVIcode.DotNet.SystemCenter.Images.detailsMinus1')" />)  no-repeat;
          padding: 0 0 0 14px;
          font-weight: bold;
          cursor: hand;
          }

          .CallSectionTitleEmpty
          {
          padding: 0 0 0 14px;
          font-weight: bold;
          }

          .CallSection
          {
          width: 100%;
          padding: 10px 0 0 0;
          }

          .CallSectionContent
          {
          width: 100%;
          padding: 10px 0 0 14px;
          }

          .CallSectionContent .TreeVar
          {
          border: 1px solid #94b5e7;
          }

          .CallSectionContent .TreeNodeDetailsMinus LI,
          .CallSectionContent .TreeNodeDetailsPlus LI
          {
          word-wrap: break-word;
          }

          .uxGlovalDiv {
          background-color: #FFFFFF;
          border: 0;
          padding: 0;
          margin: 0 0 1 1;
          }
          .uxGlovalDiv b {
          vertical-align:text-top;
          margin: 0;
          padding-left:3px;
          }

          .whiteProgressBar
          {
          line-height: 3px;
          font-size:3px;
          border: solid 1px #7F7F7F;
          border-left: 0;
          background: #FFFFFF;
          }

          .whiteFirstProgressBar
          {
          line-height: 3px;
          font-size:3px;
          border: solid 1px #7F7F7F;
          background: #FFFFFF;
          }

          .orangeProgressBar
          {
          line-height: 3px;
          font-size:3px;
          border: solid 1px #7F7F7F;
          border-left: 0;
          background: #FF7E00;
          }

          .violetProgressBar
          {
          line-height: 3px;
          font-size:3px;
          border: solid 1px #7F7F7F;
          border-left: 0;
          background: #6F3198;
          }

          .violetFirstProgressBar
          {
          line-height: 3px;
          font-size:3px;
          border: solid 1px #7F7F7F;
          background: #6F3198;
          }

          .TabStyle
          {
          border: 0 !important;
          border-collapse: collapse !important;
          border-color: #FFFFFF !important;
          height: 7px !important;
          }

          .TabStyle td
          {
          border: 0 !important;
          border-collapse: collapse !important;
          border-color: #FFFFFF !important;
          }

        </xsl:element>

      </xsl:template>
    </xsl:stylesheet>
  </Transform>

  <!-- Apm LOB DataItem -->
  <Transform type="Microsoft.SystemCenter.Apm.LobDataType" locale="enu">
      <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:lg="http://AVICode.com/Intercept/MonitorLog" xmlns:DataTypeTransformer="urn:DatatypeTransformer">
  <!-- Returns the display string of the specified resouce -->

  <xsl:template name="GetDisplayString">
    <xsl:param name="Id" />
    <xsl:value-of select="DataTypeTransformer:GetStringResource('Microsoft.SystemCenter.Apm.Infrastructure', '31bf3856ad364e35', concat('Microsoft.SystemCenter.Apm.',$Id))" />
  </xsl:template>

  <xsl:template match="DataItem">
    <p>
      <xsl:if test="count(EventData/ViewDetail) &gt; 0">
        <xsl:variable name="currentlink" select="DataTypeTransformer:UrlEncode(EventData/ViewDetail)" />
        <xsl:variable name="webconsolelink" select="DataTypeTransformer:GetWebConsoleEventLink(concat('{0}/Pages/login.aspx?m=ev&amp;uid=', $currentlink))" />

        <xsl:if test="string-length($webconsolelink)&gt;0">
          <xsl:call-template name="GetDisplayString">
            <xsl:with-param name="Id">XSLTLink</xsl:with-param>
          </xsl:call-template>
          <br />
          
          <xsl:element name="a">
            <xsl:attribute name="href">
              <xsl:value-of select="$webconsolelink" disable-output-escaping="yes" />
            </xsl:attribute>
            <xsl:attribute name="target">_blank</xsl:attribute>
            <xsl:value-of select="DataTypeTransformer:HtmlEncode($webconsolelink)" disable-output-escaping="yes" />
          </xsl:element>
          
        </xsl:if>
      </xsl:if>
    </p>
  </xsl:template>
</xsl:stylesheet>
  </Transform>

  <!-- Base performance transform english locale -->
  <Transform type="System.Performance.Data" locale="enu">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">
  <!-- Localizable text -->
  <xsl:variable name="DateAndTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DateAndTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Object">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Object</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Counter">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Counter</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Instance">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Instance</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Value">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Value</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <!-- End localizable text -->

  <!-- Returns the display string of the specified resouce -->
  <xsl:template name="GetDisplayString">
    <xsl:param name="Id" />
    <xsl:value-of select="DataTypeTransformer:GetStringResource('System.Performance.Library', '31bf3856ad364e35', concat('System.Performance.Data.',$Id))" />
  </xsl:template>

  <xsl:template match="DataItem">
    <div align="left">
      <table border="0" width="100%" id="table1" style="border-collapse: collapse">

        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$DateAndTime" />
          <xsl:with-param name="Value1" select="DataTypeTransformer:FormatDateTime(TimeSampled)" />
        </xsl:call-template>

        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$Object" />
          <xsl:with-param name="Value1" select="ObjectName" />
        </xsl:call-template>

        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$Counter" />
          <xsl:with-param name="Value1" select="CounterName" />
        </xsl:call-template>

        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$Instance" />
          <xsl:with-param name="Value1" select="InstanceName" />
        </xsl:call-template>

        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$Value" />
          <xsl:with-param name="Value1" select="Value" />
        </xsl:call-template>

      </table>

    </div>
  </xsl:template>

  <xsl:template name="TableEntry">
    <xsl:param name="Title" />
    <xsl:param name="Value1" />
    <tr>
      <td width="154" style="font:bold;color:gray">
        <xsl:value-of select="$Title" />
      </td>
      <td width="286" style="color:gray">
        <xsl:value-of select="$Value1" />
      </td>
    </tr>
  </xsl:template>

</xsl:stylesheet>
  </Transform>

  <!-- System.Performance.ConsecutiveSamplesData transform english locale -->
  <Transform type="System.Performance.ConsecutiveSamplesData" locale="enu">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">

  <!-- Localizable text -->

  <xsl:variable name="DateAndTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DateAndTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="Object">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Object</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="Counter">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Counter</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="Instance">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Instance</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="LastSampledValue">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">LastSampledValue</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="NumberOfSamples">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">NumberOfSamples</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <!-- End localizable text -->

  <!-- Returns the display string of the specified resouce -->

  <xsl:template name="GetDisplayString">
    <xsl:param name="Id" />
    <xsl:value-of select="DataTypeTransformer:GetStringResource('System.Performance.Library', '31bf3856ad364e35', concat('System.Performance.Data.',$Id))" />
  </xsl:template>

  <xsl:template match="DataItem">
    <div align="left">
      <table border="0" width="100%" id="table1" style="border-collapse: collapse">
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$DateAndTime" />
          <xsl:with-param name="Value1" select="DataTypeTransformer:FormatDateTime(TimeSampled)" />
        </xsl:call-template>

        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$Object" />
          <xsl:with-param name="Value1" select="ObjectName" />
        </xsl:call-template>

        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$Counter" />
          <xsl:with-param name="Value1" select="CounterName" />
        </xsl:call-template>

        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$Instance" />
          <xsl:with-param name="Value1" select="InstanceName" />
        </xsl:call-template>

        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$LastSampledValue" />
          <xsl:with-param name="Value1" select="SampleValue" />
        </xsl:call-template>

        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$NumberOfSamples" />
          <xsl:with-param name="Value1" select="Value" />
        </xsl:call-template>

      </table>
    </div>
  </xsl:template>

  <xsl:template name="TableEntry">
    <xsl:param name="Title" />
    <xsl:param name="Value1" />

    <tr>
      <td width="154" style="font:bold;color:gray">
        <xsl:value-of select="$Title" />
      </td>

      <td width="286" style="color:gray">
        <xsl:value-of select="$Value1" />
      </td>
    </tr>
  </xsl:template>

</xsl:stylesheet>
  </Transform>


  <!-- System.Performance.AverageData transform english locale -->
  <Transform type="System.Performance.AverageData" locale="enu">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">

  <!-- Localizable text -->

  <xsl:variable name="DateAndTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DateAndTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="Object">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Object</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="Counter">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Counter</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="Instance">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Instance</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="AverageSampleValue">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AverageSampleValue</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="NumberOfSamples">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">NumberOfSamples</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <!-- End localizable text -->

  <!-- Returns the display string of the specified resouce -->

  <xsl:template name="GetDisplayString">
    <xsl:param name="Id" />
    <xsl:value-of select="DataTypeTransformer:GetStringResource('System.Performance.Library', '31bf3856ad364e35', concat('System.Performance.Data.',$Id))" />
  </xsl:template>

  <xsl:template match="DataItem">
    <div align="left">
      <table border="0" width="100%" id="table1" style="border-collapse: collapse">
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$DateAndTime" />
          <xsl:with-param name="Value1" select="DataTypeTransformer:FormatDateTime(TimeSampled)" />
        </xsl:call-template>

        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$Object" />
          <xsl:with-param name="Value1" select="ObjectName" />
        </xsl:call-template>

        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$Counter" />
          <xsl:with-param name="Value1" select="CounterName" />
        </xsl:call-template>

        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$Instance" />
          <xsl:with-param name="Value1" select="InstanceName" />
        </xsl:call-template>

        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$AverageSampleValue" />
          <xsl:with-param name="Value1" select="Value" />
        </xsl:call-template>

        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$NumberOfSamples" />
          <xsl:with-param name="Value1" select="SampleCount" />
        </xsl:call-template>

      </table>
    </div>
  </xsl:template>

  <xsl:template name="TableEntry">
    <xsl:param name="Title" />
    <xsl:param name="Value1" />

    <tr>
      <td width="154" style="font:bold;color:gray">
        <xsl:value-of select="$Title" />
      </td>

      <td width="286" style="color:gray">
        <xsl:value-of select="$Value1" />
      </td>
    </tr>
  </xsl:template>

</xsl:stylesheet>
  </Transform>


  <!-- System.Performance.DeltaData transform english locale -->
  <Transform type="System.Performance.DeltaData" locale="enu">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">

  <!-- Localizable text -->

  <xsl:variable name="DateAndTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DateAndTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="Object">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Object</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="Counter">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Counter</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="Instance">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Instance</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="FirstValue">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">FirstValue</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="LastValue">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">LastValue</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="DeltaValue">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DeltaValue</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="NumberOfSamples">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">NumberOfSamples</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <!-- End localizable text -->

  <!-- Returns the display string of the specified resouce -->

  <xsl:template name="GetDisplayString">
    <xsl:param name="Id" />
    <xsl:value-of select="DataTypeTransformer:GetStringResource('System.Performance.Library', '31bf3856ad364e35', concat('System.Performance.Data.',$Id))" />
  </xsl:template>

  <xsl:template match="DataItem">
    <div align="left">
      <table border="0" width="100%" id="table1" style="border-collapse: collapse">
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$DateAndTime" />
          <xsl:with-param name="Value1" select="DataTypeTransformer:FormatDateTime(TimeSampled)" />
        </xsl:call-template>

        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$Object" />
          <xsl:with-param name="Value1" select="ObjectName" />
        </xsl:call-template>

        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$Counter" />
          <xsl:with-param name="Value1" select="CounterName" />
        </xsl:call-template>

        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$Instance" />
          <xsl:with-param name="Value1" select="InstanceName" />
        </xsl:call-template>

        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$FirstValue" />
          <xsl:with-param name="Value1" select="FirstValue" />
        </xsl:call-template>

        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$LastValue" />
          <xsl:with-param name="Value1" select="LastValue" />
        </xsl:call-template>

        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$DeltaValue" />
          <xsl:with-param name="Value1" select="Value" />
        </xsl:call-template>

        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$NumberOfSamples" />
          <xsl:with-param name="Value1" select="SampleCount" />
        </xsl:call-template>

      </table>
    </div>
  </xsl:template>

  <xsl:template name="TableEntry">
    <xsl:param name="Title" />
    <xsl:param name="Value1" />

    <tr>
      <td width="154" style="font:bold;color:gray">
        <xsl:value-of select="$Title" />
      </td>

      <td width="286" style="color:gray">
        <xsl:value-of select="$Value1" />
      </td>
    </tr>
  </xsl:template>

</xsl:stylesheet>
  </Transform>


  <!-- Property bag transform english locale -->
  <Transform type="System.PropertyBagData" locale="enu">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">
  <!-- Localizable text -->
  <xsl:variable name="DateAndTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DateAndTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="PropertyName">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">PropertyName</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="PropertyValue">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">PropertyValue</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <!-- End localizable text -->

  <!-- Returns the display string of the specified resouce -->
  <xsl:template name="GetDisplayString">
    <xsl:param name="Id" />
    <xsl:value-of select="DataTypeTransformer:GetStringResource('System.Library', '31bf3856ad364e35', concat('System.PropertyBagData.',$Id))" />
  </xsl:template>

  <xsl:template match="DataItem">
    <div align="left">
      <table border="0" width="100%" id="table1" style="border-collapse: collapse">
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$DateAndTime" />
          <xsl:with-param name="Value1" select="DataTypeTransformer:FormatDateTime(@time)" />
        </xsl:call-template>
        <p />
        <xsl:call-template name="TableTitle">
          <xsl:with-param name="Title" select="$PropertyName" />
          <xsl:with-param name="Value1" select="$PropertyValue" />
        </xsl:call-template>
        <xsl:apply-templates select="Property" />
      </table>
    </div>
  </xsl:template>
  <xsl:template match="Property">
    <xsl:call-template name="TableEntry">
      <xsl:with-param name="Title" select="@Name" />
      <xsl:with-param name="Value1" select="." />
    </xsl:call-template>
  </xsl:template>
  <xsl:template name="TableTitle">
    <xsl:param name="Title" />
    <xsl:param name="Value1" />
    <tr>
      <td width="154" style="font:bold;color:#696969">
        <xsl:value-of select="$Title" />
      </td>
      <td width="286" style="font:bold;color:#696969">
        <xsl:value-of select="$Value1" />
      </td>
    </tr>
  </xsl:template>
  <xsl:template name="TableEntry">
    <xsl:param name="Title" />
    <xsl:param name="Value1" />
    <tr>
      <td width="154" style="font:bold;color:gray">
        <xsl:value-of select="$Title" />
      </td>
      <td width="286" style="color:gray">
        <xsl:value-of select="$Value1" />
      </td>
    </tr>
  </xsl:template>
</xsl:stylesheet>
  </Transform>

  <!-- Generic log entrytransform english locale -->
  <Transform type="System.ApplicationLog.GenericLogEntryData" locale="enu">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">
  <!-- Localizable text -->
  <xsl:variable name="DateAndTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DateAndTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="FileDirectory">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">FileDirectory</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="FileType">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">FileType</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="FileName">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">FileName</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ParameterTitle">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ParameterTitle</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ValueTitle">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ValueTitle</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <!-- End localizable text -->

  <!-- Returns the display string of the specified resouce -->
  <xsl:template name="GetDisplayString">
    <xsl:param name="Id" />
    <xsl:value-of select="DataTypeTransformer:GetStringResource('System.ApplicationLog.Library', '31bf3856ad364e35', concat('System.ApplicationLog.GenericLogEntryData.',$Id))" />
  </xsl:template>

  <xsl:template match="DataItem">
    <div align="left">
      <table border="0" width="100%" id="table1" style="border-collapse: collapse">
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$DateAndTime" />
          <xsl:with-param name="Value1" select="DataTypeTransformer:FormatDateTime(@time)" />
        </xsl:call-template>
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$FileType" />
          <xsl:with-param name="Value1" select="LogFileType" />
        </xsl:call-template>
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$FileDirectory" />
          <xsl:with-param name="Value1" select="LogFileDirectory" />
        </xsl:call-template>
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$FileName" />
          <xsl:with-param name="Value1" select="LogFileName" />
        </xsl:call-template>
      </table>
      <p />
      <table border="0" width="100%" id="table1" style="border-collapse: collapse">
        <xsl:call-template name="TableTitle">
          <xsl:with-param name="Title" select="$ParameterTitle" />
          <xsl:with-param name="Value1" select="$ValueTitle" />
        </xsl:call-template>
        <xsl:apply-templates select="Params/Param" />
      </table>
    </div>
  </xsl:template>
  <xsl:template match="Param">
    <xsl:call-template name="TableEntry">
      <xsl:with-param name="Title" select="position()" />
      <xsl:with-param name="Value1" select="." />
    </xsl:call-template>
  </xsl:template>
  <xsl:template name="TableTitle">
    <xsl:param name="Title" />
    <xsl:param name="Value1" />
    <tr>
      <td width="154" style="font:bold;color:#696969">
        <xsl:value-of select="$Title" />
      </td>
      <td width="286" style="font:bold;color:#696969">
        <xsl:value-of select="$Value1" />
      </td>
    </tr>
  </xsl:template>
  <xsl:template name="TableEntry">
    <xsl:param name="Title" />
    <xsl:param name="Value1" />
    <tr>
      <td width="154" style="font:bold;color:gray">
        <xsl:value-of select="$Title" />
      </td>
      <td width="286" style="color:gray">
        <xsl:value-of select="$Value1" />
      </td>
    </tr>
  </xsl:template>
</xsl:stylesheet>
  </Transform>

  <!-- SNMP transform -->
  <Transform type="System.SnmpData" locale="enu">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">
  <!-- Localizable text -->
  <xsl:variable name="Source">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Source</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Destination">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Destination</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Version">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Version</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ErrorCode">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ErrorCode</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="OID">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">OID</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Syntax">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Syntax</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Value">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Value</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <!-- End localizable text -->

  <!-- Returns the display string of the specified resouce -->
  <xsl:template name="GetDisplayString">
    <xsl:param name="Id" />
    <xsl:value-of select="DataTypeTransformer:GetStringResource('System.Snmp.Library', '31bf3856ad364e35', concat('System.SnmpData.',$Id))" />
  </xsl:template>

  <xsl:template match="DataItem">
    <div align="left">
      <table border="1" width="100%" id="table1" style="border-collapse: collapse">
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$Source" />
          <xsl:with-param name="Value" select="Source" />
        </xsl:call-template>
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$Destination" />
          <xsl:with-param name="Value" select="Destination" />
        </xsl:call-template>
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$Version" />
          <xsl:with-param name="Value" select="Version" />
        </xsl:call-template>
        <xsl:call-template name="TableEntryErrorCode">
          <xsl:with-param name="Title" select="$ErrorCode" />
          <xsl:with-param name="Value" select="ErrorCode" />
        </xsl:call-template>
      </table>
      <br />
      <table border="1" width="100%" id="table1" style="border-collapse: collapse">
        <xsl:call-template name="TableEntryOID">
          <xsl:with-param name="OID" select="$OID" />
          <xsl:with-param name="Syntax" select="$Syntax" />
          <xsl:with-param name="Value" select="$Value" />
        </xsl:call-template>
        <xsl:for-each select="SnmpVarBinds/SnmpVarBind">
          <xsl:call-template name="SnmpVarBind">
            <xsl:with-param name="OID" select="OID" />
            <xsl:with-param name="Syntax" select="Syntax" />
            <xsl:with-param name="Value" select="Value" />
          </xsl:call-template>
        </xsl:for-each>
      </table>
    </div>
  </xsl:template>
  <xsl:template name="TableEntry">
    <xsl:param name="Title" />
    <xsl:param name="Value" />
    <tr>
      <td width="154" style="font:bold;color:gray;background:#d3d3d3">
        <xsl:value-of select="$Title" />
      </td>
      <td width="286" style="color:gray">
        <xsl:value-of select="$Value" />
      </td>
    </tr>
  </xsl:template>
  <xsl:template name="TableEntryErrorCode">
    <xsl:param name="Title" />
    <xsl:param name="Value" />
    <xsl:variable name="Success">Success</xsl:variable>
    <xsl:variable name="Failure">Failure</xsl:variable>
    <tr>
      <td width="154" style="font:bold;color:gray;background:#d3d3d3">
        <xsl:value-of select="$Title" />
      </td>
      <td width="286" style="color:gray">
        <xsl:choose>
          <xsl:when test="ErrorCode = 1">
            <xsl:value-of select="$Success" />
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="$Failure" />
          </xsl:otherwise>
        </xsl:choose>
      </td>
    </tr>
  </xsl:template>
  <xsl:template name="TableEntryOID">
    <xsl:param name="OID" />
    <xsl:param name="Syntax" />
    <xsl:param name="Value" />
    <tr>
      <td width="25%" style=";font:bold;color:gray;background:#d3d3d3">
        <xsl:value-of select="$OID" />
      </td>
      <td width="10%" style="font:bold;color:gray;background:#d3d3d3">
        <xsl:value-of select="$Syntax" />
      </td>
      <td width="75%" style="font:bold;color:gray;background:#d3d3d3">
        <xsl:value-of select="$Value" />
      </td>
    </tr>
  </xsl:template>
  <xsl:template name="SnmpVarBind">
    <xsl:param name="OID" />
    <xsl:param name="Syntax" />
    <xsl:param name="Value" />
    <!-- Localizable text -->
    <xsl:variable name="Integer">Integer</xsl:variable>
    <xsl:variable name="Bits">Bits</xsl:variable>
    <xsl:variable name="Octets">Octets</xsl:variable>
    <xsl:variable name="Null">Null</xsl:variable>
    <xsl:variable name="OIDName">Oid</xsl:variable>
    <xsl:variable name="IPAddress">Ip Address</xsl:variable>
    <xsl:variable name="Counter32">Counter 32</xsl:variable>
    <xsl:variable name="Gauge32">Gauge 32</xsl:variable>
    <xsl:variable name="Timeticks">Timeticks</xsl:variable>
    <xsl:variable name="Opaque">Opaque</xsl:variable>
    <xsl:variable name="NsapAddr">NsapAddr</xsl:variable>
    <xsl:variable name="Counter64">Counter 64</xsl:variable>
    <xsl:variable name="UInt32">UInt 32</xsl:variable>
    <xsl:variable name="NoSuchObject">No Such Object</xsl:variable>
    <xsl:variable name="NoSuchInstance">No Such Instance</xsl:variable>
    <xsl:variable name="EndofMIB">End of MIB</xsl:variable>
    <!-- End localizable text -->
    <tr>
      <td width="25%" style="color:gray">
        <xsl:value-of select="OID" />
      </td>
      <td width="10%" style="color:gray">
        <xsl:choose>
          <xsl:when test="Syntax = 2">
            <xsl:value-of select="$Integer" />
          </xsl:when>
          <xsl:when test="Syntax = 3">
            <xsl:value-of select="$Bits" />
          </xsl:when>
          <xsl:when test="Syntax = 4">
            <xsl:value-of select="$Octets" />
          </xsl:when>
          <xsl:when test="Syntax = 5">
            <xsl:value-of select="$Null" />
          </xsl:when>
          <xsl:when test="Syntax = 6">
            <xsl:value-of select="$OIDName" />
          </xsl:when>
          <xsl:when test="Syntax = 64">
            <xsl:value-of select="$IPAddress" />
          </xsl:when>
          <xsl:when test="Syntax = 65">
            <xsl:value-of select="$Counter32" />
          </xsl:when>
          <xsl:when test="Syntax = 66">
            <xsl:value-of select="$Gauge32" />
          </xsl:when>
          <xsl:when test="Syntax = 67">
            <xsl:value-of select="$Timeticks" />
          </xsl:when>
          <xsl:when test="Syntax = 68">
            <xsl:value-of select="$Opaque" />
          </xsl:when>
          <xsl:when test="Syntax = 69">
            <xsl:value-of select="$NsapAddr" />
          </xsl:when>
          <xsl:when test="Syntax = 70">
            <xsl:value-of select="$Counter64" />
          </xsl:when>
          <xsl:when test="Syntax = 71">
            <xsl:value-of select="$UInt32" />
          </xsl:when>
          <xsl:when test="Syntax = 128">
            <xsl:value-of select="$NoSuchObject" />
          </xsl:when>
          <xsl:when test="Syntax = 129">
            <xsl:value-of select="$NoSuchInstance" />
          </xsl:when>
          <xsl:when test="Syntax = 130">
            <xsl:value-of select="$EndofMIB" />
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="Syntax" />
          </xsl:otherwise>
        </xsl:choose>
      </td>
      <td width="65%" style="color:gray">
        <xsl:value-of select="Value" />
      </td>
    </tr>
  </xsl:template>
</xsl:stylesheet>
  </Transform>

  <!-- Consolidator transform -->
  <Transform type="System.ConsolidatorData" locale="enu">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">
  <!-- Localizable text -->
  <xsl:variable name="TimeWindowStart">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TimeWindowStart</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="TimeWindowEnd">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TimeWindowEnd</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="TimeFirst">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TimeFirst</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="TimeLast">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TimeLast</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Count">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Count</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Context">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Context</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <!-- End Localizable text -->

  <!-- Returns the display string of the specified resouce -->
  <xsl:template name="GetDisplayString">
    <xsl:param name="Id" />
    <xsl:value-of select="DataTypeTransformer:GetStringResource('System.Library', '31bf3856ad364e35', concat('System.ConsolidatorData.',$Id))" />
  </xsl:template>

  <xsl:template match="DataItem">
    <div align="left" valign="top">

      <table border="1" width="100%" id="table1" style="border-collapse: collapse">
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$TimeWindowStart" />
          <xsl:with-param name="Value" select="DataTypeTransformer:FormatDateTime(TimeWindowStart)" />
        </xsl:call-template>
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$TimeWindowEnd" />
          <xsl:with-param name="Value" select="DataTypeTransformer:FormatDateTime(TimeWindowEnd)" />
        </xsl:call-template>
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$TimeFirst" />
          <xsl:with-param name="Value" select="DataTypeTransformer:FormatDateTime(TimeFirst)" />
        </xsl:call-template>
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$TimeLast" />
          <xsl:with-param name="Value" select="DataTypeTransformer:FormatDateTime(TimeLast)" />
        </xsl:call-template>
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$Count" />
          <xsl:with-param name="Value" select="Count" />
        </xsl:call-template>
      </table>
      <p style="font:bold;color:gray;margin-bottom:0">
        <xsl:value-of select="$Context" />
      </p>
      <xsl:variable name="ContextDataItem" select="Context/DataItem" />
      <xsl:if test="$ContextDataItem">
        <xsl:copy-of select="DataTypeTransformer:Transform($ContextDataItem)" />
      </xsl:if>
    </div>
  </xsl:template>
  <xsl:template name="TableEntry">
    <xsl:param name="Title" />
    <xsl:param name="Value" />
    <tr>
      <td width="154" style="font:bold;color:gray;background:#d3d3d3">
        <xsl:value-of select="$Title" />
      </td>
      <td width="286" style="color:gray">
        <xsl:value-of select="$Value" />
      </td>
    </tr>
  </xsl:template>
</xsl:stylesheet>
  </Transform>

  <!-- Signature Output transform english locale -->
  <Transform type="System.Performance.BaseliningStateData" locale="ENU">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">

  <!-- Localizable text -->
  <xsl:variable name="State">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">State</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="MovingAverage">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">MovingAverage</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Overshoot">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Overshoot</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ObjectName">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ObjectName</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="CounterName">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">CounterName</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="InstanceName">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">InstanceName</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="SignatureAverage">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">SignatureAverage</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="SignatureDeviation">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">SignatureDeviation</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="AboveEnvelope">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AboveEnvelope</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="WithinEnvelope">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">WithinEnvelope</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="BelowEnvelope">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">BelowEnvelope</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <!-- End localizable text -->

  <!-- Returns the display string of the specified resouce -->
  <xsl:template name="GetDisplayString">
    <xsl:param name="Id" />
    <xsl:value-of select="DataTypeTransformer:GetStringResource('System.Performance.Library', '31bf3856ad364e35', concat('System.Performance.BaseliningStateData.',$Id))" />
  </xsl:template>

  <xsl:template match="DataItem">

    <div class="Section1" marginTop="0">

      <table border="0" cellspacing="0" cellpadding="0">

        <!-- state-->
        <xsl:if test="(Property[@Name='state'] = 'AboveInnerEnvelope') or (Property[@Name='state'] = 'AboveOuterEnvelope')">
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="Title" select="$State" />
            <xsl:with-param name="Value" select="$AboveEnvelope" />
          </xsl:call-template>
        </xsl:if>

        <xsl:if test="Property[@Name='state'] = 'WithinInnerEnvelope' or Property[@Name='state']='InsufficientInfo'">
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="Title" select="$State" />
            <xsl:with-param name="Value" select="$WithinEnvelope" />
          </xsl:call-template>
        </xsl:if>

        <xsl:if test="(Property[@Name='state'] = 'BelowInnerEnvelope') or (Property[@Name='state'] = 'BelowOuterEnvelope')">
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="Title" select="$State" />
            <xsl:with-param name="Value" select="$BelowEnvelope" />
          </xsl:call-template>
        </xsl:if>

        <!-- Moving Average-->
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$MovingAverage" />
          <xsl:with-param name="Value" select="Property[@Name='Average']" />
        </xsl:call-template>

        <!-- If there is an Overshoot element-->
        <xsl:if test="Overshoot">
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="Title" select="$Overshoot" />
            <xsl:with-param name="Value" select="Property[@Name='Overshoot']" />
          </xsl:call-template>
        </xsl:if>

        <!-- ObjectName-->
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$ObjectName" />
          <xsl:with-param name="Value" select="Property[@Name='ObjectName']" />
        </xsl:call-template>

        <!-- CounterName-->
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$CounterName" />
          <xsl:with-param name="Value" select="Property[@Name='CounterName']" />
        </xsl:call-template>

        <!-- InstanceName-->
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$InstanceName" />
          <xsl:with-param name="Value" select="Property[@Name='InstanceName']" />
        </xsl:call-template>

        <!-- SignatureAverage-->
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$SignatureAverage" />
          <xsl:with-param name="Value" select="Property[@Name='SignatureAverage']" />
        </xsl:call-template>

        <!-- SignatureDeviation-->
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$SignatureDeviation" />
          <xsl:with-param name="Value" select="Property[@Name='SignatureDeviation']" />
        </xsl:call-template>
      </table>
    </div>

  </xsl:template>

  <xsl:template name="TableEntry">
    <xsl:param name="Title" />
    <xsl:param name="Value" />
    <tr>
      <td width="400" style="font:bold;color:gray;background:#d3d3d3">
        <xsl:value-of select="$Title" />
      </td>
      <td width="300" style="color:gray">
        <xsl:value-of select="$Value" />
      </td>
    </tr>
  </xsl:template>
</xsl:stylesheet>
  </Transform>

  <!-- Web Test Data transform english locale -->
  <Transform type="Microsoft.SystemCenter.WebApplicationTest.WebTestData" locale="ENU">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">
  <xsl:variable name="Success">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Success</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Warning">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Warning</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Error">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Error</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="EvaluationResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">EvaluationResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <!-- Transaction -->
  <xsl:variable name="TransactionResponseTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TransactionResponseTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="TransactionErrorCode">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TransactionErrorCode</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="CollectPerformanceData">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">CollectPerformanceData</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="TestTimeout">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TestTimeout</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="TransactionEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TransactionEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="TransactionResponseTimeEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TransactionResponseTimeEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="TransactionErrorCodeEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TransactionErrorCodeEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="TransactionCriteriaEvaluationDetails">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TransactionCriteriaEvaluationDetails</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="TransactionTimeoutErrorCode">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TransactionTimeoutErrorCode</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <!-- Request -->
  <xsl:variable name="ContentMatch">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ContentMatch</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ContentMatchHelp">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ContentMatchHelp</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Request">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Request</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="RequestResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">RequestResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="RequestCriteriaEvaluationDetails">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">RequestCriteriaEvaluationDetails</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Url">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Url</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="State">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">State</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="StateValue0">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">StateValue0</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="StateValue1">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">StateValue1</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="RequestEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">RequestEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="RequestNameResolutionErrorCode">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">RequestNameResolutionErrorCode</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="RequestUnreachableErrorCode">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">RequestUnreachableErrorCode</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <!-- Base page -->
  <xsl:variable name="ResponseBodyEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ResponseBodyEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="BasePageStatusCodeEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">BasePageStatusCodeEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="BasePageErrorCodeEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">BasePageErrorCodeEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="MonitorSSLEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">MonitorSSLEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="CheckRedirectsEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">CheckRedirectsEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="BasePageCriteriaEvaluationDetails">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">BasePageCriteriaEvaluationDetails</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="DNSResolutionTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DNSResolutionTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="TCPConnectTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TCPConnectTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="TimeToFirstByte">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TimeToFirstByte</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="TimeToLastByte">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TimeToLastByte</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="RedirectTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">RedirectTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ContentTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ContentTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ResponseTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ResponseTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="DownloadTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DownloadTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ContentSize">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ContentSize</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="StatusCode">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">StatusCode</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ErrorCode">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ErrorCode</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ResponseUrl">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ResponseUrl</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ResponseHeaders">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ResponseHeaders</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ResponseBody">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ResponseBody</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="SecureFailureCode">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">SecureFailureCode</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="DaysToExpiry">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DaysToExpiry</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="RequestHeaders">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">RequestHeaders</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Verb">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Verb</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Version">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Version</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Redirected">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Redirected</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="CertificateExpired">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">CertificateExpired</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="CertificateAuthorityUntrusted">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">CertificateAuthorityUntrusted</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="CertificateCNInvalid">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">CertificateCNInvalid</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="DNSResolutionFailure">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DNSResolutionFailure</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Unreachable">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Unreachable</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ResponseBodyHelp">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ResponseBodyHelp</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <!-- Resource data -->
  <xsl:variable name="ResourceDataStatusCodeEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ResourceDataStatusCodeEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ResourceDataErrorCodeEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ResourceDataErrorCodeEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ResourceDataCriteriaEvaluationDetails">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ResourceDataCriteriaEvaluationDetails</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="AggregateDNSResolutionTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggregateDNSResolutionTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="AggregateTCPConnectTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggregateTCPConnectTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="AggregateTimeToFirstByte">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggregateTimeToFirstByte</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="AggregateTimeToLastByte">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggregateTimeToLastByte</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="AggregateRedirectTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggregateRedirectTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="AggregateContentTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggregateContentTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="AggregateResponseTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggregateResponseTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="AggregateContentSize">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggregateContentSize</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Resource">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Resource</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ResourceStatusCodeEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ResourceStatusCodeEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ResourceErrorCodeEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ResourceErrorCodeEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="DefaultPadding">5px 5.5px 0px 5.5px</xsl:variable>
  <xsl:variable name="SummaryPadding">7.5px 5.5px 0px 5.5px</xsl:variable>
  <xsl:variable name="IndentPadding">5px 5.5px 0px 20px</xsl:variable>

  <!-- Returns the display string of the specified resouce -->
  <xsl:template name="GetDisplayString">
    <xsl:param name="Id" />
    <xsl:value-of select="DataTypeTransformer:GetStringResource('Microsoft.SystemCenter.WebApplicationTest.Library', '31bf3856ad364e35', concat('Microsoft.SystemCenter.WebApplicationTest.WebTestData.',$Id))" />
  </xsl:template>

  <xsl:template match="DataItem">
    <div>
      <xsl:call-template name="ScriptFunctions" />
      <!-- summary of criteria evaluation (transaction) -->
      <table width="auto" style="border-collapse:collapse">
        <xsl:call-template name="EvalResultEntryShowEvaluatedOnly">
          <xsl:with-param name="RowName" select="$TransactionEvalResult" />
          <xsl:with-param name="RowValue" select="TransactionEvalResult" />
          <xsl:with-param name="Padding" select="$SummaryPadding" />
          <xsl:with-param name="GreaterThan" select="number('0')" />
        </xsl:call-template>
        <xsl:call-template name="EvalResultEntryShowEvaluatedOnly">
          <xsl:with-param name="RowName" select="$TransactionResponseTimeEvalResult" />
          <xsl:with-param name="RowValue" select="TransactionResponseTimeEvalResult" />
          <xsl:with-param name="Padding" select="$SummaryPadding" />
          <xsl:with-param name="GreaterThan" select="number('1')" />
        </xsl:call-template>
        <xsl:if test="TransactionResponseTimeEvalResult &gt; 1">
          <xsl:call-template name="TableDecimalEntry">
            <xsl:with-param name="RowName" select="$TransactionResponseTime" />
            <xsl:with-param name="RowValue" select="TransactionResponseTime" />
            <xsl:with-param name="Padding" select="$IndentPadding" />
            <xsl:with-param name="Hide" select="'false'" />
          </xsl:call-template>
        </xsl:if>
        <xsl:call-template name="EvalResultEntryShowEvaluatedOnly">
          <xsl:with-param name="RowName" select="$TransactionErrorCodeEvalResult" />
          <xsl:with-param name="RowValue" select="TransactionErrorCodeEvalResult" />
          <xsl:with-param name="Padding" select="$SummaryPadding" />
          <xsl:with-param name="GreaterThan" select="number('1')" />
        </xsl:call-template>
        <xsl:if test="TransactionErrorCodeEvalResult &gt; 1">
          <xsl:call-template name="TableErrorCodeEntry">
            <xsl:with-param name="RowName" select="$TransactionErrorCode" />
            <xsl:with-param name="RowValue" select="TransactionErrorCode" />
            <xsl:with-param name="Padding" select="$IndentPadding" />
            <xsl:with-param name="Hide" select="'false'" />
          </xsl:call-template>
        </xsl:if>
      </table>
      <p />

      <!-- summary of criteria evaluation (request) -->
      <xsl:apply-templates select="RequestResults/RequestResult/RequestEvalResult" />

      <!-- result detail (transaction) -->
      <table width="auto" style="border-collapse:collapse">
        <xsl:call-template name="TableHeader">
          <xsl:with-param name="HeaderName" select="$TransactionCriteriaEvaluationDetails" />
          <xsl:with-param name="Id">
            <xsl:text>TransactionCriteriaEvaluationDetails</xsl:text>
          </xsl:with-param>
        </xsl:call-template>
        <xsl:element name="tr">
          <xsl:attribute name="style">
            <xsl:text>display:none;</xsl:text>
          </xsl:attribute>
          <xsl:element name="td">
            <xsl:attribute name="style">
              <xsl:text>padding:</xsl:text>
              <xsl:value-of select="$DefaultPadding" />
            </xsl:attribute>
            <p />
            <table width="auto" style="border-collapse:collapse">
              <xsl:call-template name="EvalResultEntryShowEvaluatedOnly">
                <xsl:with-param name="RowName" select="$TransactionEvalResult" />
                <xsl:with-param name="RowValue" select="TransactionEvalResult" />
                <xsl:with-param name="Padding" select="$DefaultPadding" />
                <xsl:with-param name="GreaterThan" select="number('0')" />
              </xsl:call-template>
              <xsl:call-template name="EvalResultEntryShowEvaluatedOnly">
                <xsl:with-param name="RowName" select="$TransactionResponseTimeEvalResult" />
                <xsl:with-param name="RowValue" select="TransactionResponseTimeEvalResult" />
                <xsl:with-param name="Padding" select="$DefaultPadding" />
                <xsl:with-param name="GreaterThan" select="number('0')" />
              </xsl:call-template>
              <xsl:call-template name="EvalResultEntryShowEvaluatedOnly">
                <xsl:with-param name="RowName" select="$TransactionErrorCodeEvalResult" />
                <xsl:with-param name="RowValue" select="TransactionErrorCodeEvalResult" />
                <xsl:with-param name="Padding" select="$DefaultPadding" />
                <xsl:with-param name="GreaterThan" select="number('0')" />
              </xsl:call-template>
              <xsl:call-template name="TableDecimalEntry">
                <xsl:with-param name="RowName" select="$TransactionResponseTime" />
                <xsl:with-param name="RowValue" select="TransactionResponseTime" />
                <xsl:with-param name="Padding" select="$DefaultPadding" />
                <xsl:with-param name="Hide" select="'false'" />
              </xsl:call-template>
              <xsl:call-template name="TableErrorCodeEntry">
                <xsl:with-param name="RowName" select="$TransactionErrorCode" />
                <xsl:with-param name="RowValue" select="TransactionErrorCode" />
                <xsl:with-param name="Padding" select="$DefaultPadding" />
                <xsl:with-param name="Hide" select="'false'" />
              </xsl:call-template>
              <xsl:call-template name="TableEntry">
                <xsl:with-param name="RowName" select="$CollectPerformanceData" />
                <xsl:with-param name="RowValue" select="CollectPerformanceData" />
                <xsl:with-param name="Padding" select="$DefaultPadding" />
                <xsl:with-param name="Hide" select="'false'" />
              </xsl:call-template>
              <xsl:call-template name="TableEntry">
                <xsl:with-param name="RowName" select="$TestTimeout" />
                <xsl:with-param name="RowValue" select="TestTimeout" />
                <xsl:with-param name="Padding" select="$DefaultPadding" />
                <xsl:with-param name="Hide" select="'false'" />
              </xsl:call-template>
            </table>
          </xsl:element>
        </xsl:element>
      </table>
      <p />

      <!-- result detail (request) -->
      <xsl:apply-templates select="RequestResults/RequestResult" />
      <p />
    </div>
  </xsl:template>

  <xsl:template match="RequestEvalResult">
    <!-- this summary table shows up only if at least one eval result is warning or error -->
    <xsl:if test=". &gt; 1">
      <xsl:element name="div">
        <xsl:attribute name="style">
          <xsl:text>padding:</xsl:text>
          <xsl:value-of select="$DefaultPadding" />
          <xsl:text>; font:bold</xsl:text>
        </xsl:attribute>
        <xsl:value-of select="concat('URL ', ../@Id, ': ', ../BasePageData/RequestUrl)" />
      </xsl:element>
      <table width="auto" style="border-collapse:collapse">
        <xsl:call-template name="EvalResultEntryShowEvaluatedOnly">
          <xsl:with-param name="RowName" select="$RequestEvalResult" />
          <xsl:with-param name="RowValue" select="." />
          <xsl:with-param name="Padding" select="$SummaryPadding" />
          <xsl:with-param name="GreaterThan" select="number('1')" />
        </xsl:call-template>
        <xsl:call-template name="EvalResultEntryShowEvaluatedOnly">
          <xsl:with-param name="RowName" select="$BasePageStatusCodeEvalResult" />
          <xsl:with-param name="RowValue" select="../BasePageData/StatusCodeEvalResult" />
          <xsl:with-param name="Padding" select="$SummaryPadding" />
          <xsl:with-param name="GreaterThan" select="number('1')" />
        </xsl:call-template>
        <xsl:if test="../BasePageData/StatusCodeEvalResult &gt; 1">
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$StatusCode" />
            <xsl:with-param name="RowValue" select="../BasePageData/StatusCode" />
            <xsl:with-param name="Padding" select="$IndentPadding" />
            <xsl:with-param name="Hide" select="'false'" />
          </xsl:call-template>
        </xsl:if>
        <xsl:call-template name="EvalResultEntryShowEvaluatedOnly">
          <xsl:with-param name="RowName" select="$BasePageErrorCodeEvalResult" />
          <xsl:with-param name="RowValue" select="../BasePageData/ErrorCodeEvalResult" />
          <xsl:with-param name="Padding" select="$SummaryPadding" />
          <xsl:with-param name="GreaterThan" select="number('1')" />
        </xsl:call-template>
        <xsl:if test="../BasePageData/ErrorCodeEvalResult &gt; 1">
          <xsl:call-template name="TableErrorCodeEntry">
            <xsl:with-param name="RowName" select="$ErrorCode" />
            <xsl:with-param name="RowValue" select="../BasePageData/ErrorCode" />
            <xsl:with-param name="Padding" select="$IndentPadding" />
            <xsl:with-param name="Hide" select="'false'" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$DNSResolutionFailure" />
            <xsl:with-param name="RowValue" select="../BasePageData/DNSResolutionFailure" />
            <xsl:with-param name="Padding" select="$IndentPadding" />
            <xsl:with-param name="Hide" select="'false'" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$Unreachable" />
            <xsl:with-param name="RowValue" select="../BasePageData/Unreachable" />
            <xsl:with-param name="Padding" select="$IndentPadding" />
            <xsl:with-param name="Hide" select="'false'" />
          </xsl:call-template>
        </xsl:if>
        <xsl:call-template name="EvalResultEntryShowEvaluatedOnly">
          <xsl:with-param name="RowName" select="$ResponseBodyEvalResult" />
          <xsl:with-param name="RowValue" select="../BasePageData/ResponseBodyEvalResult" />
          <xsl:with-param name="Padding" select="$SummaryPadding" />
          <xsl:with-param name="GreaterThan" select="number('1')" />
        </xsl:call-template>
        <xsl:if test="../BasePageData/ResponseBodyEvalResult &gt; 1">
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$ContentMatch" />
            <xsl:with-param name="RowValue" select="$ContentMatchHelp" />
            <xsl:with-param name="Padding" select="$IndentPadding" />
            <xsl:with-param name="Hide" select="'false'" />
          </xsl:call-template>
        </xsl:if>
        <xsl:call-template name="EvalResultEntryShowEvaluatedOnly">
          <xsl:with-param name="RowName" select="$MonitorSSLEvalResult" />
          <xsl:with-param name="RowValue" select="../BasePageData/MonitorSSLEvalResult" />
          <xsl:with-param name="Padding" select="$SummaryPadding" />
          <xsl:with-param name="GreaterThan" select="number('1')" />
        </xsl:call-template>
        <xsl:if test="../BasePageData/MonitorSSLEvalResult &gt; 1">
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$CertificateExpired" />
            <xsl:with-param name="RowValue" select="../BasePageData/CertificateExpired" />
            <xsl:with-param name="Padding" select="$IndentPadding" />
            <xsl:with-param name="Hide" select="'false'" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$CertificateAuthorityUntrusted" />
            <xsl:with-param name="RowValue" select="../BasePageData/CertificateAuthorityUntrusted" />
            <xsl:with-param name="Padding" select="$IndentPadding" />
            <xsl:with-param name="Hide" select="'false'" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$CertificateCNInvalid" />
            <xsl:with-param name="RowValue" select="../BasePageData/CertificateCNInvalid" />
            <xsl:with-param name="Padding" select="$IndentPadding" />
            <xsl:with-param name="Hide" select="'false'" />
          </xsl:call-template>
        </xsl:if>
        <xsl:call-template name="EvalResultEntryShowEvaluatedOnly">
          <xsl:with-param name="RowName" select="$CheckRedirectsEvalResult" />
          <xsl:with-param name="RowValue" select="../BasePageData/CheckRedirectsEvalResult" />
          <xsl:with-param name="Padding" select="$SummaryPadding" />
          <xsl:with-param name="GreaterThan" select="number('1')" />
        </xsl:call-template>
        <xsl:if test="../BasePageData/CheckRedirectsEvalResult &gt; 1">
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$Redirected" />
            <xsl:with-param name="RowValue" select="../BasePageData/Redirected" />
            <xsl:with-param name="Padding" select="$IndentPadding" />
            <xsl:with-param name="Hide" select="'false'" />
          </xsl:call-template>
        </xsl:if>
        <xsl:call-template name="EvalResultEntryShowEvaluatedOnly">
          <xsl:with-param name="RowName" select="$ResourceDataStatusCodeEvalResult" />
          <xsl:with-param name="RowValue" select="../ResourceData/StatusCodeEvalResult" />
          <xsl:with-param name="Padding" select="$SummaryPadding" />
          <xsl:with-param name="GreaterThan" select="number('1')" />
        </xsl:call-template>
        <xsl:call-template name="EvalResultEntryShowEvaluatedOnly">
          <xsl:with-param name="RowName" select="$ResourceDataErrorCodeEvalResult" />
          <xsl:with-param name="RowValue" select="../ResourceData/ErrorCodeEvalResult" />
          <xsl:with-param name="Padding" select="$SummaryPadding" />
          <xsl:with-param name="GreaterThan" select="number('1')" />
        </xsl:call-template>
      </table>
      <p />
    </xsl:if>
  </xsl:template>

  <xsl:template match="RequestResult">
    <table style="border-collapse:collapse">
      <xsl:element name="tr">
        <xsl:attribute name="id">
          <xsl:value-of select="concat('RequestResult', @Id)" />
        </xsl:attribute>
        <xsl:element name="td">
          <xsl:attribute name="colspan">2</xsl:attribute>
          <p style="font:bold;">
            <xsl:element name="a">
              <xsl:attribute name="onclick">
                <xsl:text>ToggleDisplayMode('</xsl:text>
                <xsl:value-of select="concat('RequestResult', @Id)" />
                <xsl:text>')</xsl:text>
              </xsl:attribute>
              <xsl:text>  </xsl:text>
              <u style="color:blue">[+]</u>
            </xsl:element>
            <b>
              <xsl:value-of select="concat($RequestResult, ' ', @Id, ': ', BasePageData/RequestUrl)" />
            </b>
          </p>
        </xsl:element>
      </xsl:element>
      <xsl:element name="tr">
        <xsl:attribute name="style">
          <xsl:text>display:none;</xsl:text>
        </xsl:attribute>
        <xsl:element name="td">
          <xsl:attribute name="style">
            <xsl:text>padding:</xsl:text>
            <xsl:value-of select="$DefaultPadding" />
          </xsl:attribute>
          <p />
          <table width="auto" style="border-collapse:collapse">
            <xsl:call-template name="EvalResultEntryShowEvaluatedOnly">
              <xsl:with-param name="RowName" select="$RequestEvalResult" />
              <xsl:with-param name="RowValue" select="RequestEvalResult" />
              <xsl:with-param name="Padding" select="$DefaultPadding" />
              <xsl:with-param name="GreaterThan" select="number('0')" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntryShowEvaluatedOnly">
              <xsl:with-param name="RowName" select="$BasePageStatusCodeEvalResult" />
              <xsl:with-param name="RowValue" select="BasePageData/StatusCodeEvalResult" />
              <xsl:with-param name="Padding" select="$DefaultPadding" />
              <xsl:with-param name="GreaterThan" select="number('0')" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntryShowEvaluatedOnly">
              <xsl:with-param name="RowName" select="$BasePageErrorCodeEvalResult" />
              <xsl:with-param name="RowValue" select="BasePageData/ErrorCodeEvalResult" />
              <xsl:with-param name="Padding" select="$DefaultPadding" />
              <xsl:with-param name="GreaterThan" select="number('0')" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntryShowEvaluatedOnly">
              <xsl:with-param name="RowName" select="$ResponseBodyEvalResult" />
              <xsl:with-param name="RowValue" select="BasePageData/ResponseBodyEvalResult" />
              <xsl:with-param name="Padding" select="$DefaultPadding" />
              <xsl:with-param name="GreaterThan" select="number('0')" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntryShowEvaluatedOnly">
              <xsl:with-param name="RowName" select="$MonitorSSLEvalResult" />
              <xsl:with-param name="RowValue" select="BasePageData/MonitorSSLEvalResult" />
              <xsl:with-param name="Padding" select="$DefaultPadding" />
              <xsl:with-param name="GreaterThan" select="number('0')" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntryShowEvaluatedOnly">
              <xsl:with-param name="RowName" select="$CheckRedirectsEvalResult" />
              <xsl:with-param name="RowValue" select="BasePageData/CheckRedirectsEvalResult" />
              <xsl:with-param name="Padding" select="$DefaultPadding" />
              <xsl:with-param name="GreaterThan" select="number('0')" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntryShowEvaluatedOnly">
              <xsl:with-param name="RowName" select="$ResourceDataStatusCodeEvalResult" />
              <xsl:with-param name="RowValue" select="ResourceData/StatusCodeEvalResult" />
              <xsl:with-param name="Padding" select="$DefaultPadding" />
              <xsl:with-param name="GreaterThan" select="number('0')" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntryShowEvaluatedOnly">
              <xsl:with-param name="RowName" select="$ResourceDataErrorCodeEvalResult" />
              <xsl:with-param name="RowValue" select="ResourceData/ErrorCodeEvalResult" />
              <xsl:with-param name="Padding" select="$DefaultPadding" />
              <xsl:with-param name="GreaterThan" select="number('0')" />
            </xsl:call-template>
          </table>
          <p />
          <table width="auto" border="1" style="border:ridge; border-collapse:collapse">
            <xsl:call-template name="TableHeader">
              <xsl:with-param name="HeaderName" select="$RequestCriteriaEvaluationDetails" />
              <xsl:with-param name="Id" select="concat('RequestCriteriaEvaluationDetails', @Id)" />
            </xsl:call-template>
            <xsl:element name="tr">
              <xsl:attribute name="style">
                <xsl:text>display:none;</xsl:text>
              </xsl:attribute>
              <xsl:element name="td">
                <xsl:attribute name="style">
                  <xsl:text>padding:</xsl:text>
                  <xsl:value-of select="$DefaultPadding" />
                </xsl:attribute>
                <p style="font:bold; color:gray; white-space: nowrap;">
                  <xsl:value-of select="$State" />
                </p>
              </xsl:element>
              <xsl:element name="td">
                <xsl:attribute name="style">
                  <xsl:text>padding:</xsl:text>
                  <xsl:value-of select="$DefaultPadding" />
                </xsl:attribute>
                <p style="color:gray; text-align:right">
                  <xsl:choose>
                    <xsl:when test="State = 0">
                      <xsl:value-of select="$StateValue0" />
                    </xsl:when>
                    <xsl:when test="State = 1">
                      <xsl:value-of select="$StateValue1" />
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="State" />
                    </xsl:otherwise>
                  </xsl:choose>
                </p>
              </xsl:element>
            </xsl:element>
            <xsl:call-template name="TableEntry">
              <xsl:with-param name="RowName" select="$CollectPerformanceData" />
              <xsl:with-param name="RowValue" select="CollectPerformanceData" />
              <xsl:with-param name="Padding" select="$DefaultPadding" />
              <xsl:with-param name="Hide" select="'true'" />
            </xsl:call-template>
          </table>
          <p />
          <xsl:apply-templates select="BasePageData" />
          <xsl:apply-templates select="ResourceData" />
          <table width="auto" border="1" style="border:ridge; border-collapse:collapse">
            <xsl:call-template name="TableHeader">
              <xsl:with-param name="HeaderName" select="$ResponseBody" />
              <xsl:with-param name="Id" select="concat('ResponseBody', @Id)" />
            </xsl:call-template>
            <tr style="display:none;">
              <td>
                <p style="color:gray; text-align:right">
                  <xsl:value-of select="BasePageData/ResponseBody" />
                </p>
              </td>
            </tr>
          </table>
          <p />
        </xsl:element>
      </xsl:element>
    </table>
    <p />
  </xsl:template>

  <xsl:template match="BasePageData">
    <table width="auto" border="1" style="border:ridge; border-collapse:collapse">
      <xsl:call-template name="TableHeader">
        <xsl:with-param name="HeaderName" select="$BasePageCriteriaEvaluationDetails" />
        <xsl:with-param name="Id" select="concat('BasePageCriteriaEvaluationDetails', ../@Id)" />
      </xsl:call-template>
      <xsl:call-template name="TableDecimalEntry">
        <xsl:with-param name="RowName" select="$DNSResolutionTime" />
        <xsl:with-param name="RowValue" select="DNSResolutionTime" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableDecimalEntry">
        <xsl:with-param name="RowName" select="$TCPConnectTime" />
        <xsl:with-param name="RowValue" select="TCPConnectTime" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableDecimalEntry">
        <xsl:with-param name="RowName" select="$TimeToFirstByte" />
        <xsl:with-param name="RowValue" select="TimeToFirstByte" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableDecimalEntry">
        <xsl:with-param name="RowName" select="$TimeToLastByte" />
        <xsl:with-param name="RowValue" select="TimeToLastByte" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$Redirected" />
        <xsl:with-param name="RowValue" select="Redirected" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableDecimalEntry">
        <xsl:with-param name="RowName" select="$RedirectTime" />
        <xsl:with-param name="RowValue" select="RedirectTime" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableDecimalEntry">
        <xsl:with-param name="RowName" select="$ContentTime" />
        <xsl:with-param name="RowValue" select="ContentTime" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableDecimalEntry">
        <xsl:with-param name="RowName" select="$ResponseTime" />
        <xsl:with-param name="RowValue" select="ResponseTime" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableDecimalEntry">
        <xsl:with-param name="RowName" select="$DownloadTime" />
        <xsl:with-param name="RowValue" select="DownloadTime" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$ContentSize" />
        <xsl:with-param name="RowValue" select="ContentSize" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$StatusCode" />
        <xsl:with-param name="RowValue" select="StatusCode" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableErrorCodeEntry">
        <xsl:with-param name="RowName" select="$ErrorCode" />
        <xsl:with-param name="RowValue" select="ErrorCode" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$ResponseUrl" />
        <xsl:with-param name="RowValue" select="ResponseUrl" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$ResponseHeaders" />
        <xsl:with-param name="RowValue" select="ResponseHeaders" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$ResponseBody" />
        <xsl:with-param name="RowValue" select="$ResponseBodyHelp" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$SecureFailureCode" />
        <xsl:with-param name="RowValue" select="SecureFailureCode" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$DaysToExpiry" />
        <xsl:with-param name="RowValue" select="DaysToExpiry" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$RequestHeaders" />
        <xsl:with-param name="RowValue" select="RequestHeaders" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$Verb" />
        <xsl:with-param name="RowValue" select="Verb" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$Version" />
        <xsl:with-param name="RowValue" select="Version" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$CertificateExpired" />
        <xsl:with-param name="RowValue" select="CertificateExpired" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$CertificateAuthorityUntrusted" />
        <xsl:with-param name="RowValue" select="CertificateAuthorityUntrusted" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$CertificateCNInvalid" />
        <xsl:with-param name="RowValue" select="CertificateCNInvalid" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$DNSResolutionFailure" />
        <xsl:with-param name="RowValue" select="DNSResolutionFailure" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$Unreachable" />
        <xsl:with-param name="RowValue" select="Unreachable" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
    </table>
    <p />
  </xsl:template>

  <xsl:template match="ResourceData">
    <table width="auto" border="1" style="border:ridge; border-collapse:collapse">
      <xsl:call-template name="TableHeader">
        <xsl:with-param name="HeaderName" select="$ResourceDataCriteriaEvaluationDetails" />
        <xsl:with-param name="Id" select="concat('ResourceDataCriteriaEvaluationDetails', ../@Id)" />
      </xsl:call-template>
      <xsl:call-template name="TableDecimalEntry">
        <xsl:with-param name="RowName" select="$AggregateDNSResolutionTime" />
        <xsl:with-param name="RowValue" select="AggregateDNSResolutionTime" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableDecimalEntry">
        <xsl:with-param name="RowName" select="$AggregateTCPConnectTime" />
        <xsl:with-param name="RowValue" select="AggregateTCPConnectTime" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableDecimalEntry">
        <xsl:with-param name="RowName" select="$AggregateTimeToFirstByte" />
        <xsl:with-param name="RowValue" select="AggregateTimeToFirstByte" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableDecimalEntry">
        <xsl:with-param name="RowName" select="$AggregateTimeToLastByte" />
        <xsl:with-param name="RowValue" select="AggregateTimeToLastByte" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableDecimalEntry">
        <xsl:with-param name="RowName" select="$AggregateRedirectTime" />
        <xsl:with-param name="RowValue" select="AggregateRedirectTime" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableDecimalEntry">
        <xsl:with-param name="RowName" select="$AggregateContentTime" />
        <xsl:with-param name="RowValue" select="AggregateContentTime" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableDecimalEntry">
        <xsl:with-param name="RowName" select="$AggregateResponseTime" />
        <xsl:with-param name="RowValue" select="AggregateResponseTime" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableDecimalEntry">
        <xsl:with-param name="RowName" select="$AggregateContentSize" />
        <xsl:with-param name="RowValue" select="AggregateContentSize" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
    </table>
    <p />

    <xsl:apply-templates select="Resources/Resource" />
  </xsl:template>

  <xsl:template match="Resource">
    <table width="auto" border="1" style="border:ridge; border-collapse:collapse">
      <xsl:call-template name="TableHeader">
        <xsl:with-param name="HeaderName" select="concat($Resource, ': ', RequestUrl)" />
        <xsl:with-param name="Id" select="concat('Resource', RequestUrl)" />
      </xsl:call-template>
      <xsl:call-template name="EvalResultEntryShowEvaluatedOnly">
        <xsl:with-param name="RowName" select="$ResourceStatusCodeEvalResult" />
        <xsl:with-param name="RowValue" select="StatusCodeEvalResult" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="GreaterThan" select="number('0')" />
      </xsl:call-template>
      <xsl:call-template name="EvalResultEntryShowEvaluatedOnly">
        <xsl:with-param name="RowName" select="$ResourceErrorCodeEvalResult" />
        <xsl:with-param name="RowValue" select="ErrorCodeEvalResult" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="GreaterThan" select="number('0')" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$StatusCode" />
        <xsl:with-param name="RowValue" select="StatusCode" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$Unreachable" />
        <xsl:with-param name="RowValue" select="Unreachable" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$ErrorCode" />
        <xsl:with-param name="RowValue" select="ErrorCode" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$DNSResolutionFailure" />
        <xsl:with-param name="RowValue" select="DNSResolutionFailure" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableDecimalEntry">
        <xsl:with-param name="RowName" select="$DNSResolutionTime" />
        <xsl:with-param name="RowValue" select="DNSResolutionTime" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableDecimalEntry">
        <xsl:with-param name="RowName" select="$TCPConnectTime" />
        <xsl:with-param name="RowValue" select="TCPConnectTime" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableDecimalEntry">
        <xsl:with-param name="RowName" select="$TimeToFirstByte" />
        <xsl:with-param name="RowValue" select="TimeToFirstByte" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableDecimalEntry">
        <xsl:with-param name="RowName" select="$TimeToLastByte" />
        <xsl:with-param name="RowValue" select="TimeToLastByte" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$Redirected" />
        <xsl:with-param name="RowValue" select="Redirected" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableDecimalEntry">
        <xsl:with-param name="RowName" select="$RedirectTime" />
        <xsl:with-param name="RowValue" select="RedirectTime" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableDecimalEntry">
        <xsl:with-param name="RowName" select="$ContentTime" />
        <xsl:with-param name="RowValue" select="ContentTime" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableDecimalEntry">
        <xsl:with-param name="RowName" select="$ResponseTime" />
        <xsl:with-param name="RowValue" select="ResponseTime" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$ContentSize" />
        <xsl:with-param name="RowValue" select="ContentSize" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$SecureFailureCode" />
        <xsl:with-param name="RowValue" select="SecureFailureCode" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$Verb" />
        <xsl:with-param name="RowValue" select="Verb" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$Version" />
        <xsl:with-param name="RowValue" select="Version" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$RequestHeaders" />
        <xsl:with-param name="RowValue" select="RequestHeaders" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$ResponseUrl" />
        <xsl:with-param name="RowValue" select="ResponseUrl" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$ResponseHeaders" />
        <xsl:with-param name="RowValue" select="ResponseHeaders" />
        <xsl:with-param name="Padding" select="$DefaultPadding" />
        <xsl:with-param name="Hide" select="'true'" />
      </xsl:call-template>
    </table>
    <p />
  </xsl:template>

  <xsl:template name="TableHeader">
    <xsl:param name="HeaderName" />
    <xsl:param name="Id" />
    <xsl:param name="Padding" />
    <xsl:element name="tr">
      <xsl:attribute name="id">
        <xsl:value-of select="$Id" />
      </xsl:attribute>
      <xsl:element name="td">
        <xsl:attribute name="colspan">2</xsl:attribute>
        <xsl:if test="$Padding != ''">
          <xsl:attribute name="style">
            <xsl:text>padding:</xsl:text>
            <xsl:value-of select="$Padding" />
          </xsl:attribute>
        </xsl:if>
        <p style="font:bold;">
          <xsl:element name="a">
            <xsl:attribute name="onclick">
              <xsl:text>ToggleDisplayMode('</xsl:text>
              <xsl:value-of select="$Id" />
              <xsl:text>')</xsl:text>
            </xsl:attribute>
            <xsl:text>  </xsl:text>
            <u style="color:blue">[+]</u>
          </xsl:element>
          <b>
            <xsl:value-of select="$HeaderName" />
          </b>
        </p>
      </xsl:element>
    </xsl:element>
  </xsl:template>

  <xsl:template name="TableHeaderNoToggle">
    <xsl:param name="HeaderName" />
    <xsl:param name="Id" />
    <xsl:param name="Padding" />
    <xsl:element name="tr">
      <xsl:attribute name="id">
        <xsl:value-of select="$Id" />
      </xsl:attribute>
      <xsl:element name="td">
        <xsl:attribute name="colspan">2</xsl:attribute>
        <xsl:if test="$Padding != ''">
          <xsl:attribute name="style">
            <xsl:text>padding:</xsl:text>
            <xsl:value-of select="$Padding" />
          </xsl:attribute>
        </xsl:if>
        <p style="font:bold;">
          <b>
            <xsl:value-of select="$HeaderName" />
          </b>
        </p>
      </xsl:element>
    </xsl:element>
  </xsl:template>

  <xsl:template name="TableEntry">
    <xsl:param name="RowName" />
    <xsl:param name="RowValue" />
    <xsl:param name="Padding" />
    <xsl:param name="Hide" />
    <xsl:element name="tr">
      <xsl:if test="$Hide = 'true'">
        <xsl:attribute name="style">
          <xsl:text>display:none;</xsl:text>
        </xsl:attribute>
      </xsl:if>
      <xsl:element name="td">
        <xsl:if test="$Padding != ''">
          <xsl:attribute name="style">
            <xsl:text>padding:</xsl:text>
            <xsl:value-of select="$Padding" />
          </xsl:attribute>
        </xsl:if>
        <p style="font:bold; color:gray; white-space: nowrap;">
          <xsl:value-of select="$RowName" />
        </p>

      </xsl:element>
      <xsl:element name="td">
        <xsl:if test="$Padding != ''">
          <xsl:attribute name="style">
            <xsl:text>padding:</xsl:text>
            <xsl:value-of select="$Padding" />
          </xsl:attribute>
        </xsl:if>
        <p style="color:gray; text-align:right">
          <xsl:value-of select="$RowValue" />
        </p>
      </xsl:element>
    </xsl:element>
  </xsl:template>

  <xsl:template name="TableErrorCodeEntry">
    <xsl:param name="RowName" />
    <xsl:param name="RowValue" />
    <xsl:param name="Padding" />
    <xsl:param name="Hide" />
    <xsl:variable name="CovertedValue">
      <xsl:call-template name="ConvertToHex">
        <xsl:with-param name="Input" select="$RowValue" />
      </xsl:call-template>
    </xsl:variable>
    <xsl:element name="tr">
      <xsl:if test="$Hide = 'true'">
        <xsl:attribute name="style">
          <xsl:text>display:none;</xsl:text>
        </xsl:attribute>
      </xsl:if>
      <xsl:element name="td">
        <xsl:if test="$Padding != ''">
          <xsl:attribute name="style">
            <xsl:text>padding:</xsl:text>
            <xsl:value-of select="$Padding" />
          </xsl:attribute>
        </xsl:if>
        <p style="font:bold; color:gray; white-space: nowrap;">
          <xsl:value-of select="$RowName" />
        </p>

      </xsl:element>
      <xsl:element name="td">
        <xsl:if test="$Padding != ''">
          <xsl:attribute name="style">
            <xsl:text>padding:</xsl:text>
            <xsl:value-of select="$Padding" />
          </xsl:attribute>
        </xsl:if>
        <p style="color:gray; text-align:right">
          <xsl:choose>
            <xsl:when test="$RowValue = 2147943860">
              <xsl:value-of select="concat($CovertedValue, '(', $TransactionTimeoutErrorCode, ')')" />
            </xsl:when>
            <xsl:when test="$RowValue = 2147954402">
              <xsl:value-of select="concat($CovertedValue, '(', $RequestUnreachableErrorCode, ')')" />
            </xsl:when>
            <xsl:when test="$RowValue = 2147954407">
              <xsl:value-of select="concat($CovertedValue, '(', $RequestNameResolutionErrorCode, ')')" />
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="$CovertedValue" />
            </xsl:otherwise>
          </xsl:choose>
        </p>
      </xsl:element>
    </xsl:element>
  </xsl:template>

  <xsl:template name="TableDecimalEntry">
    <xsl:param name="RowName" />
    <xsl:param name="RowValue" />
    <xsl:param name="Padding" />
    <xsl:param name="Hide" />
    <xsl:variable name="CovertedValue">
      <xsl:call-template name="convertToDecimal">
        <xsl:with-param name="InputValueParam" select="$RowValue" />
      </xsl:call-template>
    </xsl:variable>

    <xsl:element name="tr">
      <xsl:if test="$Hide = 'true'">
        <xsl:attribute name="style">
          <xsl:text>display:none;</xsl:text>
        </xsl:attribute>
      </xsl:if>
      <xsl:element name="td">
        <xsl:if test="$Padding != ''">
          <xsl:attribute name="style">
            <xsl:text>padding:</xsl:text>
            <xsl:value-of select="$Padding" />
          </xsl:attribute>
        </xsl:if>
        <p style="font:bold; color:gray; white-space: nowrap;">
          <xsl:value-of select="$RowName" />
        </p>
      </xsl:element>
      <xsl:element name="td">
        <xsl:if test="$Padding != ''">
          <xsl:attribute name="style">
            <xsl:text>padding:</xsl:text>
            <xsl:value-of select="$Padding" />
          </xsl:attribute>
        </xsl:if>
        <p style="color:gray; text-align:right">
          <!-- throw away under 1 millisecond -->
          <xsl:value-of select="format-number($CovertedValue, '0.###')" />
        </p>
      </xsl:element>
    </xsl:element>
  </xsl:template>

  <!-- remove scientific notation -->
  <xsl:template name="convertToDecimal">
    <xsl:param name="InputValueParam" select="0" />

    <xsl:variable name="MaxExp">
      <xsl:value-of select="'00000000000000000000000000000000'" />
    </xsl:variable>

    <xsl:variable name="InputValue">
      <xsl:value-of select="translate(string($InputValueParam),'e','E')" />
    </xsl:variable>

    <xsl:choose>
      <xsl:when test="$InputValue = 0">
        <xsl:value-of select="$InputValue" />
      </xsl:when>
      <xsl:when test="number($InputValue)">
        <xsl:value-of select="$InputValue" />
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="Mantisa">
          <xsl:value-of select="number(substring-before($InputValue,'E'))" />
        </xsl:variable>

        <xsl:variable name="Exponent">
          <xsl:choose>
            <xsl:when test="contains($InputValue,'E+')">
              <xsl:value-of select="substring-after($InputValue,'E+')" />
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="substring-after($InputValue,'E')" />
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>

        <xsl:variable name="Coefficient">
          <xsl:choose>
            <xsl:when test="$Exponent &gt; 0">
              <xsl:text>1</xsl:text>
              <xsl:value-of select="substring($MaxExp, 1, number($Exponent))" />
            </xsl:when>
            <xsl:when test="$Exponent &lt; 0">
              <xsl:text>0.</xsl:text>
              <xsl:value-of select="substring($MaxExp, 1, -number($Exponent)-1)" />
              <xsl:text>1</xsl:text>
            </xsl:when>
            <xsl:otherwise>1</xsl:otherwise>
          </xsl:choose>
        </xsl:variable>

        <xsl:value-of select="number($Coefficient) * number($Mantisa)" />
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="ConvertToHex">
    <xsl:param name="Input" select="0" />
    <xsl:param name="Output" />

    <xsl:choose>
      <xsl:when test="$Input = 0">
        <xsl:value-of select="$Output" />
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="Remainder" select="$Input mod 16" />
        <xsl:call-template name="ConvertToHex">
          <xsl:with-param name="Input" select="floor($Input div 16)" />
          <xsl:with-param name="Output">
            <xsl:choose>
              <xsl:when test="$Remainder &lt; 10">
                <xsl:value-of select="concat($Remainder,$Output)" />
              </xsl:when>
              <xsl:when test="$Remainder = 10">
                <xsl:value-of select="concat('A',$Output)" />
              </xsl:when>
              <xsl:when test="$Remainder = 11">
                <xsl:value-of select="concat('B',$Output)" />
              </xsl:when>
              <xsl:when test="$Remainder = 12">
                <xsl:value-of select="concat('C',$Output)" />
              </xsl:when>
              <xsl:when test="$Remainder = 13">
                <xsl:value-of select="concat('D',$Output)" />
              </xsl:when>
              <xsl:when test="$Remainder = 14">
                <xsl:value-of select="concat('E',$Output)" />
              </xsl:when>
              <xsl:when test="$Remainder = 15">
                <xsl:value-of select="concat('F',$Output)" />
              </xsl:when>
            </xsl:choose>
          </xsl:with-param>
        </xsl:call-template>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="EvalResultEntryShowEvaluatedOnly">
    <xsl:param name="RowName" />
    <xsl:param name="RowValue" />
    <xsl:param name="Padding" />
    <xsl:param name="GreaterThan" />
    <xsl:if test="$RowValue &gt; $GreaterThan">
      <xsl:element name="tr">
        <xsl:element name="td">
          <xsl:if test="$Padding != ''">
            <xsl:attribute name="style">
              <xsl:text>padding:</xsl:text>
              <xsl:value-of select="$Padding" />
            </xsl:attribute>
          </xsl:if>
          <p style="font:bold; color:gray; white-space: nowrap;">
            <xsl:value-of select="$RowName" />
          </p>
        </xsl:element>
        <xsl:choose>
          <xsl:when test="$RowValue = 1">
            <xsl:element name="td">
              <xsl:if test="$Padding != ''">
                <xsl:attribute name="style">
                  <xsl:text>padding:</xsl:text>
                  <xsl:value-of select="$Padding" />
                </xsl:attribute>
              </xsl:if>
              <p style="color:006600; text-align:right">
                <xsl:value-of select="$Success" />
              </p>
            </xsl:element>
          </xsl:when>
          <xsl:when test="$RowValue = 2">
            <xsl:element name="td">
              <xsl:if test="$Padding != ''">
                <xsl:attribute name="style">
                  <xsl:text>padding:</xsl:text>
                  <xsl:value-of select="$Padding" />
                </xsl:attribute>
              </xsl:if>
              <p style="color:FF9900; text-align:right">
                <xsl:value-of select="$Warning" />
              </p>
            </xsl:element>
          </xsl:when>
          <xsl:when test="$RowValue = 3">
            <xsl:element name="td">
              <xsl:if test="$Padding != ''">
                <xsl:attribute name="style">
                  <xsl:text>padding:</xsl:text>
                  <xsl:value-of select="$Padding" />
                </xsl:attribute>
              </xsl:if>
              <p style="color:FF0000; text-align:right">
                <xsl:value-of select="$Error" />
              </p>
            </xsl:element>
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="$RowValue" />
          </xsl:otherwise>
        </xsl:choose>
      </xsl:element>
    </xsl:if>
  </xsl:template>

  <xsl:template name="ScriptFunctions">
    <xsl:element name="script">
      <xsl:comment>
        
function ToggleDisplayMode(node) 
{
    var tableHeader = document.getElementById(node);
    // alert(tableHeader.id);
	
	if (null != tableHeader)
	{
		// this is &lt;u&gt; tag under &lt;a/&gt;
		var toggleTextNode = tableHeader.childNodes(0).childNodes(0).childNodes(0).childNodes(0);
		if (toggleTextNode.innerText == "[+]")
		{
		  toggleTextNode.innerText = "[-]";
		}
		else
		{
		  toggleTextNode.innerText = "[+]";
		}
        
		var row = tableHeader.nextSibling;
		while (row != null)
		{
			if ( row.style.display != "none" ) {
				row.style.display = "none";
			}
			else {
				row.style.display = "";
			}
			row = row.nextSibling;
		}
	}
}
                
      </xsl:comment>
    </xsl:element>
  </xsl:template>
</xsl:stylesheet>
  </Transform>

  <!-- Web Application Data transform english locale -->
  <Transform type="Microsoft.SystemCenter.WebApplication.WebApplicationData" locale="ENU">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">
  <!-- Localizable text -->
  <xsl:variable name="RequestResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">RequestResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <!-- Common Strings -->
  <xsl:variable name="StatusCode">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">StatusCode</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Unreachable">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Unreachable</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ErrorCode">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ErrorCode</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="DNSResolutionFailure">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DNSResolutionFailure</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="DNSResolutionTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DNSResolutionTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="TCPConnectTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TCPConnectTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="TimeToFirstByte">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TimeToFirstByte</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="TimeToLastByte">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TimeToLastByte</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="RedirectTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">RedirectTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="DownloadTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DownloadTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="TotalResponseTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TotalResponseTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ContentSize">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ContentSize</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="SecureFailureCode">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">SecureFailureCode</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Verb">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Verb</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Version">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Version</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="RequestHeaders">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">RequestHeaders</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ResponseHeaders">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ResponseHeaders</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ResponseUrl">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ResponseUrl</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Success">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Success</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Warning">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Warning</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Error">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Error</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="EvalResultLegendHelp">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">EvalResultLegendHelp</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ShowHideString">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ShowHideString</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <!-- Aggregate Data -->
  <xsl:variable name="AggregateDNSResolutionTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggregateDNSResolutionTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="AggregateTCPConnectTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggregateTCPConnectTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="AggregateTimeToFirstByte">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggregateTimeToFirstByte</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="AggregateTimeToLastByte">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggregateTimeToLastByte</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="AggregateRedirectTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggregateRedirectTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="AggregateDownloadTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggregateDownloadTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="AggregateTotalResponseTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggregateTotalResponseTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="AggregateContentSize">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggregateContentSize</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="AggregateDNSResolutionTimeEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggregateDNSResolutionTimeEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="AggregateTCPConnectTimeEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggregateTCPConnectTimeEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="AggregateTimeToFirstByteEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggregateTimeToFirstByteEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="AggregateTimeToLastByteEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggregateTimeToLastByteEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="AggregateRedirectTimeEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggregateRedirectTimeEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="AggregateDownloadTimeEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggregateDownloadTimeEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="AggregateTotalResponseTimeEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggregateTotalResponseTimeEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="AggregateContentSizeEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggregateContentSizeEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <!-- Base Page -->
  <xsl:variable name="BasePage">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">BasePage</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="DaysToExpiry">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DaysToExpiry</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="CertificateExpired">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">CertificateExpired</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="CertificateAuthorityUntrusted">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">CertificateAuthorityUntrusted</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="CertificateCNInvalid">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">CertificateCNInvalid</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ResponseBody">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ResponseBody</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ResponseBodyNote">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ResponseBodyNote</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <!-- Criteria Eval Results -->
  <xsl:variable name="CriteriaEvalResults">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">CriteriaEvalResults</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="DNSResolutionTimeEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DNSResolutionTimeEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="TCPConnectTimeEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TCPConnectTimeEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="TimeToFirstByteEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TimeToFirstByteEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="TimeToLastByteEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TimeToLastByteEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="RedirectTimeEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">RedirectTimeEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="DownloadTimeEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DownloadTimeEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="TotalResponseTimeEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TotalResponseTimeEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ContentSizeEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ContentSizeEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ResponseBodyEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ResponseBodyEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="StatusCodeEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">StatusCodeEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ErrorCodeEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ErrorCodeEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="CustomCriteriaEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">CustomCriteriaEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="DaysToExpiryEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DaysToExpiryEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <!-- Agg Link Data -->
  <xsl:variable name="AggLinkData">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggLinkData</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="AggLinkDataEvalResults">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggLinkDataEvalResults</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <!-- Links -->
  <xsl:variable name="Links">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Links</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <!-- Agg Resource Data -->
  <xsl:variable name="AggResourceData">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggResourceData</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="AggResourceDataEvalResults">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">AggResourceDataEvalResults</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <!-- Resources -->
  <xsl:variable name="Resources">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Resources</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <!-- Total Data -->
  <xsl:variable name="TotalData">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TotalData</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="TotalDataEvalResults">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TotalDataEvalResults</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <!-- Deep Check Data -->
  <xsl:variable name="DeepCheckData">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DeepCheckData</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <!-- Total Transaction Time -->
  <xsl:variable name="TotalTransaction">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TotalTransaction</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="TransactionResponseTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TransactionResponseTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="TransactionResponseTimeEvalResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">TransactionResponseTimeEvalResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <!-- End localizable text -->

  <!-- Returns the display string of the specified resouce -->
  <xsl:template name="GetDisplayString">
    <xsl:param name="Id" />
    <xsl:value-of select="DataTypeTransformer:GetStringResource('Microsoft.SystemCenter.WebApplication.Library', '31bf3856ad364e35', concat('Microsoft.SystemCenter.WebApplication.WebApplicationData.',$Id))" />
  </xsl:template>

  <xsl:template match="DataItem">
    <div>
      <xsl:call-template name="ScriptFunctions" />
      <xsl:apply-templates select="RequestResults/RequestResult" />
      <table width="auto" style="border-collapse:collapse">
        <xsl:call-template name="TableHeader">
          <xsl:with-param name="HeaderName" select="$TotalTransaction" />
          <xsl:with-param name="Id" />
        </xsl:call-template>
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="RowName" select="$TransactionResponseTime" />
          <xsl:with-param name="RowValue" select="TransactionResponseTime" />
        </xsl:call-template>
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="RowName" select="$TransactionResponseTimeEvalResult" />
          <xsl:with-param name="RowValue" select="TransactionResponseTimeEvalResult" />
        </xsl:call-template>
      </table>
      <p />
    </div>
  </xsl:template>
  <xsl:template match="RequestResult">
    <p>
      <b>
        <xsl:value-of select="$RequestResult" />
        <xsl:value-of select="@Id" />
        <xsl:text>:  </xsl:text>
        <xsl:value-of select="BasePageData/RequestUrl" />
      </b>
    </p>
    <xsl:apply-templates select="BasePageData" />
    <p />
    <xsl:apply-templates select="LinkData" />
    <p />
    <xsl:apply-templates select="ResourceData" />
    <p />
    <xsl:apply-templates select="TotalData" />
    <p />
    <xsl:apply-templates select="DeepCheckData" />
    <p />
    <table width="auto" style="border-collapse:collapse">
      <xsl:element name="tr">
        <xsl:attribute name="id">
          <xsl:value-of select="concat($ResponseBody, @Id)" />
        </xsl:attribute>
        <xsl:element name="td">
          <xsl:attribute name="colspan">2</xsl:attribute>
          <xsl:attribute name="style">border:solid black 1.0pt;</xsl:attribute>
          <p style="font:bold; color:gray;">
            <b>
              <xsl:value-of select="$ResponseBody" />
            </b>
            <xsl:element name="a">
              <xsl:attribute name="onclick">
                <xsl:text>ToggleDisplayMode('</xsl:text>
                <xsl:value-of select="concat($ResponseBody, @Id)" />
                <xsl:text>')</xsl:text>
              </xsl:attribute>
              <xsl:text>  </xsl:text>
              <u style="color:blue">
                <xsl:value-of select="$ShowHideString" />
              </u>
            </xsl:element>
          </p>
        </xsl:element>
      </xsl:element>
      <tr style="display:none">
        <td style="border:solid black 1.0pt;">
          <p style="font:bold; color:gray;">
            <b>
              <xsl:value-of select="BasePageData/ResponseBody" />
            </b>
          </p>
        </td>
      </tr>
    </table>
    <p />
  </xsl:template>
  <xsl:template match="BasePageData">
    <table width="auto" style="border-collapse:collapse">
      <xsl:call-template name="TableHeader">
        <xsl:with-param name="HeaderName" select="$BasePage" />
        <xsl:with-param name="Id" select="../@Id" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$StatusCode" />
        <xsl:with-param name="RowValue" select="StatusCode" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$Unreachable" />
        <xsl:with-param name="RowValue" select="Unreachable" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$ErrorCode" />
        <xsl:with-param name="RowValue" select="ErrorCode" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$DNSResolutionFailure" />
        <xsl:with-param name="RowValue" select="DNSResolutionFailure" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$DNSResolutionTime" />
        <xsl:with-param name="RowValue" select="DNSResolutionTime" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$TCPConnectTime" />
        <xsl:with-param name="RowValue" select="TCPConnectTime" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$TimeToFirstByte" />
        <xsl:with-param name="RowValue" select="TimeToFirstByte" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$TimeToLastByte" />
        <xsl:with-param name="RowValue" select="TimeToLastByte" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$RedirectTime" />
        <xsl:with-param name="RowValue" select="RedirectTime" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$DownloadTime" />
        <xsl:with-param name="RowValue" select="DownloadTime" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$TotalResponseTime" />
        <xsl:with-param name="RowValue" select="TotalResponseTime" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$ContentSize" />
        <xsl:with-param name="RowValue" select="ContentSize" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$SecureFailureCode" />
        <xsl:with-param name="RowValue" select="SecureFailureCode" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$DaysToExpiry" />
        <xsl:with-param name="RowValue" select="DaysToExpiry" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$Verb" />
        <xsl:with-param name="RowValue" select="Verb" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$Version" />
        <xsl:with-param name="RowValue" select="Version" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$CertificateExpired" />
        <xsl:with-param name="RowValue" select="CertificateExpired" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$CertificateAuthorityUntrusted" />
        <xsl:with-param name="RowValue" select="CertificateAuthorityUntrusted" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$CertificateCNInvalid" />
        <xsl:with-param name="RowValue" select="CertificateCNInvalid" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$ResponseHeaders" />
        <xsl:with-param name="RowValue" select="ResponseHeaders" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$ResponseUrl" />
        <xsl:with-param name="RowValue" select="ResponseUrl" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$RequestHeaders" />
        <xsl:with-param name="RowValue" select="RequestHeaders" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$ResponseBody" />
        <xsl:with-param name="RowValue" select="$ResponseBodyNote" />
      </xsl:call-template>
      <tr>
        <td style="border:solid black 1.0pt; padding:0in 5.5pt 0in 5.5pt">
          <p style="font:bold; color:gray; white-space: nowrap;">
            <xsl:value-of select="$CriteriaEvalResults" />
          </p>
        </td>
        <td style="border:solid black 1.0pt;">
          <table width="auto" style="border-collapse:collapse">
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$DNSResolutionTimeEvalResult" />
              <xsl:with-param name="RowValue" select="DNSResolutionTimeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$TCPConnectTimeEvalResult" />
              <xsl:with-param name="RowValue" select="TCPConnectTimeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$TimeToFirstByteEvalResult" />
              <xsl:with-param name="RowValue" select="TimeToFirstByteEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$TimeToLastByteEvalResult" />
              <xsl:with-param name="RowValue" select="TimeToLastByteEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$RedirectTimeEvalResult" />
              <xsl:with-param name="RowValue" select="RedirectTimeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$DownloadTimeEvalResult" />
              <xsl:with-param name="RowValue" select="DownloadTimeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$TotalResponseTimeEvalResult" />
              <xsl:with-param name="RowValue" select="TotalResponseTimeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$ContentSizeEvalResult" />
              <xsl:with-param name="RowValue" select="ContentSizeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$ResponseBodyEvalResult" />
              <xsl:with-param name="RowValue" select="ResponseBodyEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$StatusCodeEvalResult" />
              <xsl:with-param name="RowValue" select="StatusCodeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$ErrorCodeEvalResult" />
              <xsl:with-param name="RowValue" select="ErrorCodeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$CustomCriteriaEvalResult" />
              <xsl:with-param name="RowValue" select="CustomCriteriaEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$DaysToExpiryEvalResult" />
              <xsl:with-param name="RowValue" select="DaysToExpiryEvalResult" />
            </xsl:call-template>
          </table>
        </td>
      </tr>
    </table>
  </xsl:template>
  <xsl:template match="LinkData">
    <table width="auto" style="border-collapse:collapse">
      <xsl:call-template name="TableHeader">
        <xsl:with-param name="HeaderName" select="$AggLinkData" />
        <xsl:with-param name="Id" select="../@Id" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$AggregateDNSResolutionTime" />
        <xsl:with-param name="RowValue" select="AggregateDNSResolutionTime" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$AggregateTCPConnectTime" />
        <xsl:with-param name="RowValue" select="AggregateTCPConnectTime" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$AggregateTimeToFirstByte" />
        <xsl:with-param name="RowValue" select="AggregateTimeToFirstByte" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$AggregateTimeToLastByte" />
        <xsl:with-param name="RowValue" select="AggregateTimeToLastByte" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$AggregateRedirectTime" />
        <xsl:with-param name="RowValue" select="AggregateRedirectTime" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$AggregateDownloadTime" />
        <xsl:with-param name="RowValue" select="AggregateDownloadTime" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$AggregateTotalResponseTime" />
        <xsl:with-param name="RowValue" select="AggregateTotalResponseTime" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$AggregateContentSize" />
        <xsl:with-param name="RowValue" select="AggregateContentSize" />
      </xsl:call-template>
      <tr>
        <td style="border:solid black 1.0pt; padding:0in 5.5pt 0in 5.5pt">
          <p style="font:bold; color:gray; white-space: nowrap;">
            <xsl:value-of select="$AggLinkDataEvalResults" />
          </p>
        </td>
        <td style="border:solid black 1.0pt;">
          <table width="auto" style="border-collapse:collapse">
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$AggregateDNSResolutionTimeEvalResult" />
              <xsl:with-param name="RowValue" select="AggregateDNSResolutionTimeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$AggregateTCPConnectTimeEvalResult" />
              <xsl:with-param name="RowValue" select="AggregateTCPConnectTimeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$AggregateTimeToFirstByteEvalResult" />
              <xsl:with-param name="RowValue" select="AggregateTimeToFirstByteEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$AggregateTimeToLastByteEvalResult" />
              <xsl:with-param name="RowValue" select="AggregateTimeToLastByteEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$AggregateRedirectTimeEvalResult" />
              <xsl:with-param name="RowValue" select="AggregateRedirectTimeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$AggregateDownloadTimeEvalResult" />
              <xsl:with-param name="RowValue" select="AggregateDownloadTimeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$AggregateTotalResponseTimeEvalResult" />
              <xsl:with-param name="RowValue" select="AggregateTotalResponseTimeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$AggregateContentSizeEvalResult" />
              <xsl:with-param name="RowValue" select="AggregateContentSizeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$StatusCodeEvalResult" />
              <xsl:with-param name="RowValue" select="StatusCodeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$ErrorCodeEvalResult" />
              <xsl:with-param name="RowValue" select="ErrorCodeEvalResult" />
            </xsl:call-template>
          </table>
        </td>
      </tr>
    </table>
    <p />
    <table width="auto" style="border-collapse:collapse">
      <xsl:call-template name="TableHeader">
        <xsl:with-param name="HeaderName" select="$Links" />
        <xsl:with-param name="Id" select="../@Id" />
      </xsl:call-template>
      <xsl:apply-templates select="Links/Link" />
    </table>
  </xsl:template>
  <xsl:template match="Link">
    <xsl:element name="tr">
      <xsl:element name="td">
        <xsl:attribute name="style">border:solid black 1.0pt; padding:0in 5.5pt 0in 5.5pt</xsl:attribute>
        <p style="font:bold; color:gray;">
          <b>
            <xsl:value-of select="RequestUrl" />
          </b>
          <xsl:element name="a">
            <xsl:attribute name="onclick">
              <xsl:text>ShowSiblingTable()</xsl:text>
            </xsl:attribute>
            <xsl:text>  </xsl:text>
            <u style="color:blue">
              <xsl:value-of select="$ShowHideString" />
            </u>
          </xsl:element>
        </p>
      </xsl:element>
    </xsl:element>
    <tr>
      <td style="border:solid black 1.0pt; padding: 0pt 0pt 0pt 25pt;">
        <table width="auto" style="border-collapse:collapse; display:none;">
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$StatusCode" />
            <xsl:with-param name="RowValue" select="StatusCode" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$Unreachable" />
            <xsl:with-param name="RowValue" select="Unreachable" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$ErrorCode" />
            <xsl:with-param name="RowValue" select="ErrorCode" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$DNSResolutionFailure" />
            <xsl:with-param name="RowValue" select="DNSResolutionFailure" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$DNSResolutionTime" />
            <xsl:with-param name="RowValue" select="DNSResolutionTime" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$DNSResolutionTime" />
            <xsl:with-param name="RowValue" select="DNSResolutionTime" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$TimeToFirstByte" />
            <xsl:with-param name="RowValue" select="TimeToFirstByte" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$TimeToLastByte" />
            <xsl:with-param name="RowValue" select="TimeToLastByte" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$RedirectTime" />
            <xsl:with-param name="RowValue" select="RedirectTime" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$DownloadTime" />
            <xsl:with-param name="RowValue" select="DownloadTime" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$TotalResponseTime" />
            <xsl:with-param name="RowValue" select="TotalResponseTime" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$ContentSize" />
            <xsl:with-param name="RowValue" select="ContentSize" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$SecureFailureCode" />
            <xsl:with-param name="RowValue" select="SecureFailureCode" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$Verb" />
            <xsl:with-param name="RowValue" select="Verb" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$Version" />
            <xsl:with-param name="RowValue" select="Version" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$RequestHeaders" />
            <xsl:with-param name="RowValue" select="RequestHeaders" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$ResponseHeaders" />
            <xsl:with-param name="RowValue" select="ResponseHeaders" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$ResponseUrl" />
            <xsl:with-param name="RowValue" select="ResponseUrl" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$StatusCodeEvalResult" />
            <xsl:with-param name="RowValue" select="StatusCodeEvalResult" />
          </xsl:call-template>
        </table>
      </td>
    </tr>
  </xsl:template>
  <xsl:template match="ResourceData">
    <table width="auto" style="border-collapse:collapse">
      <xsl:call-template name="TableHeader">
        <xsl:with-param name="HeaderName" select="$AggResourceData" />
        <xsl:with-param name="Id" select="../@Id" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$AggregateDNSResolutionTime" />
        <xsl:with-param name="RowValue" select="AggregateDNSResolutionTime" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$AggregateTCPConnectTime" />
        <xsl:with-param name="RowValue" select="AggregateTCPConnectTime" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$AggregateTimeToFirstByte" />
        <xsl:with-param name="RowValue" select="AggregateTimeToFirstByte" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$AggregateTimeToLastByte" />
        <xsl:with-param name="RowValue" select="AggregateTimeToLastByte" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$AggregateRedirectTime" />
        <xsl:with-param name="RowValue" select="AggregateRedirectTime" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$AggregateDownloadTime" />
        <xsl:with-param name="RowValue" select="AggregateDownloadTime" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$AggregateTotalResponseTime" />
        <xsl:with-param name="RowValue" select="AggregateTotalResponseTime" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$AggregateContentSize" />
        <xsl:with-param name="RowValue" select="AggregateContentSize" />
      </xsl:call-template>
      <tr>
        <td style="border:solid black 1.0pt; padding:0in 5.5pt 0in 5.5pt">
          <p style="font:bold; color:gray; white-space: nowrap;">
            <xsl:value-of select="$AggResourceDataEvalResults" />
          </p>
        </td>
        <td style="border:solid black 1.0pt;">
          <table width="auto" style="border-collapse:collapse">
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$AggregateDNSResolutionTimeEvalResult" />
              <xsl:with-param name="RowValue" select="AggregateDNSResolutionTimeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$AggregateTCPConnectTimeEvalResult" />
              <xsl:with-param name="RowValue" select="AggregateTCPConnectTimeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$AggregateTimeToFirstByteEvalResult" />
              <xsl:with-param name="RowValue" select="AggregateTimeToFirstByteEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$AggregateTimeToLastByteEvalResult" />
              <xsl:with-param name="RowValue" select="AggregateTimeToLastByteEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$AggregateRedirectTimeEvalResult" />
              <xsl:with-param name="RowValue" select="AggregateRedirectTimeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$AggregateDownloadTimeEvalResult" />
              <xsl:with-param name="RowValue" select="AggregateDownloadTimeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$AggregateTotalResponseTimeEvalResult" />
              <xsl:with-param name="RowValue" select="AggregateTotalResponseTimeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$AggregateContentSizeEvalResult" />
              <xsl:with-param name="RowValue" select="AggregateContentSizeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$StatusCodeEvalResult" />
              <xsl:with-param name="RowValue" select="StatusCodeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$ErrorCodeEvalResult" />
              <xsl:with-param name="RowValue" select="ErrorCodeEvalResult" />
            </xsl:call-template>
          </table>
        </td>
      </tr>
    </table>
    <p />
    <table width="auto" style="border-collapse:collapse">
      <xsl:call-template name="TableHeader">
        <xsl:with-param name="HeaderName" select="$Resources" />
        <xsl:with-param name="Id" select="../@Id" />
      </xsl:call-template>
      <xsl:apply-templates select="Resources/Resource" />
    </table>
  </xsl:template>
  <xsl:template match="Resource">
    <xsl:element name="tr">
      <xsl:element name="td">
        <xsl:attribute name="style">border:solid black 1.0pt; padding:0in 5.5pt 0in 5.5pt</xsl:attribute>
        <p style="font:bold; color:gray;">
          <b>
            <xsl:value-of select="RequestUrl" />
          </b>
          <xsl:element name="a">
            <xsl:attribute name="onclick">
              <xsl:text>ShowSiblingTable()</xsl:text>
            </xsl:attribute>
            <xsl:text>  </xsl:text>
            <u style="color:blue">
              <xsl:value-of select="$ShowHideString" />
            </u>
          </xsl:element>
        </p>
      </xsl:element>
    </xsl:element>
    <tr>
      <td style="border:solid black 1.0pt; padding: 0pt 0pt 0pt 25pt;">
        <table width="auto" style="border-collapse:collapse; display:none;">
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$StatusCode" />
            <xsl:with-param name="RowValue" select="StatusCode" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$Unreachable" />
            <xsl:with-param name="RowValue" select="Unreachable" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$ErrorCode" />
            <xsl:with-param name="RowValue" select="ErrorCode" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$DNSResolutionFailure" />
            <xsl:with-param name="RowValue" select="DNSResolutionFailure" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$DNSResolutionTime" />
            <xsl:with-param name="RowValue" select="DNSResolutionTime" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$TCPConnectTime" />
            <xsl:with-param name="RowValue" select="TCPConnectTime" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$TimeToFirstByte" />
            <xsl:with-param name="RowValue" select="TimeToFirstByte" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$TimeToLastByte" />
            <xsl:with-param name="RowValue" select="TimeToLastByte" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$RedirectTime" />
            <xsl:with-param name="RowValue" select="RedirectTime" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$DownloadTime" />
            <xsl:with-param name="RowValue" select="DownloadTime" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$TotalResponseTime" />
            <xsl:with-param name="RowValue" select="TotalResponseTime" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$ContentSize" />
            <xsl:with-param name="RowValue" select="ContentSize" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$SecureFailureCode" />
            <xsl:with-param name="RowValue" select="SecureFailureCode" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$Verb" />
            <xsl:with-param name="RowValue" select="Verb" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$Version" />
            <xsl:with-param name="RowValue" select="Version" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$RequestHeaders" />
            <xsl:with-param name="RowValue" select="RequestHeaders" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$ResponseHeaders" />
            <xsl:with-param name="RowValue" select="ResponseHeaders" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$ResponseUrl" />
            <xsl:with-param name="RowValue" select="ResponseUrl" />
          </xsl:call-template>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="RowName" select="$StatusCodeEvalResult" />
            <xsl:with-param name="RowValue" select="StatusCodeEvalResult" />
          </xsl:call-template>
        </table>
      </td>
    </tr>
  </xsl:template>
  <xsl:template match="TotalData">
    <table width="auto" style="border-collapse:collapse">
      <xsl:call-template name="TableHeader">
        <xsl:with-param name="HeaderName" select="$TotalData" />
        <xsl:with-param name="Id" select="../@Id" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$AggregateDNSResolutionTime" />
        <xsl:with-param name="RowValue" select="AggregateDNSResolutionTime" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$AggregateTCPConnectTime" />
        <xsl:with-param name="RowValue" select="AggregateTCPConnectTime" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$AggregateTimeToFirstByte" />
        <xsl:with-param name="RowValue" select="AggregateTimeToFirstByte" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$AggregateTimeToLastByte" />
        <xsl:with-param name="RowValue" select="AggregateTimeToLastByte" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$AggregateRedirectTime" />
        <xsl:with-param name="RowValue" select="AggregateRedirectTime" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$AggregateDownloadTime" />
        <xsl:with-param name="RowValue" select="AggregateDownloadTime" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$AggregateTotalResponseTime" />
        <xsl:with-param name="RowValue" select="AggregateTotalResponseTime" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$AggregateContentSize" />
        <xsl:with-param name="RowValue" select="AggregateContentSize" />
      </xsl:call-template>
      <tr>
        <td style="border:solid black 1.0pt; padding:0in 5.5pt 0in 5.5pt">
          <p style="font:bold; color:gray; white-space: nowrap;">
            <xsl:value-of select="$TotalDataEvalResults" />
          </p>
        </td>
        <td style="border:solid black 1.0pt;">
          <table width="auto" style="border-collapse:collapse">
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$AggregateDNSResolutionTimeEvalResult" />
              <xsl:with-param name="RowValue" select="AggregateDNSResolutionTimeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$AggregateTCPConnectTimeEvalResult" />
              <xsl:with-param name="RowValue" select="AggregateTCPConnectTimeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$AggregateTimeToFirstByteEvalResult" />
              <xsl:with-param name="RowValue" select="AggregateTimeToFirstByteEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$AggregateTimeToLastByteEvalResult" />
              <xsl:with-param name="RowValue" select="AggregateTimeToLastByteEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$AggregateRedirectTimeEvalResult" />
              <xsl:with-param name="RowValue" select="AggregateRedirectTimeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$AggregateDownloadTimeEvalResult" />
              <xsl:with-param name="RowValue" select="AggregateDownloadTimeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$AggregateTotalResponseTimeEvalResult" />
              <xsl:with-param name="RowValue" select="AggregateTotalResponseTimeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$AggregateContentSizeEvalResult" />
              <xsl:with-param name="RowValue" select="AggregateContentSizeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$StatusCodeEvalResult" />
              <xsl:with-param name="RowValue" select="StatusCodeEvalResult" />
            </xsl:call-template>
            <xsl:call-template name="EvalResultEntry">
              <xsl:with-param name="RowName" select="$ErrorCodeEvalResult" />
              <xsl:with-param name="RowValue" select="ErrorCodeEvalResult" />
            </xsl:call-template>
          </table>
        </td>
      </tr>
    </table>
    <p />
  </xsl:template>
  <xsl:template match="DeepCheckData">
    <table width="auto" style="border-collapse:collapse">
      <xsl:call-template name="TableHeader">
        <xsl:with-param name="HeaderName" select="$DeepCheckData" />
        <xsl:with-param name="Id" select="../@Id" />
      </xsl:call-template>
      <xsl:call-template name="TableEntry">
        <xsl:with-param name="RowName" select="$StatusCodeEvalResult" />
        <xsl:with-param name="RowValue" select="StatusCodeEvalResult" />
      </xsl:call-template>
    </table>
  </xsl:template>
  <xsl:template name="TableHeader">
    <xsl:param name="HeaderName" />
    <xsl:param name="Id" />
    <xsl:element name="tr">
      <xsl:attribute name="id">
        <xsl:value-of select="concat($HeaderName,$Id)" />
      </xsl:attribute>
      <xsl:element name="td">
        <xsl:attribute name="colspan">2</xsl:attribute>
        <xsl:attribute name="style">border:solid black 1.0pt;</xsl:attribute>
        <p style="font:bold; color:gray;">
          <b>
            <xsl:value-of select="$HeaderName" />
          </b>
          <xsl:element name="a">
            <xsl:attribute name="onclick">
              <xsl:text>ToggleDisplayMode('</xsl:text>
              <xsl:value-of select="concat($HeaderName,$Id)" />
              <xsl:text>')</xsl:text>
            </xsl:attribute>
            <xsl:text>  </xsl:text>
            <u style="color:blue">
              <xsl:value-of select="$ShowHideString" />
            </u>
          </xsl:element>
        </p>
      </xsl:element>
    </xsl:element>
  </xsl:template>
  <xsl:template name="TableEntry">
    <xsl:param name="RowName" />
    <xsl:param name="RowValue" />
    <tr style="display:none;">
      <td style="border:solid black 1.0pt; padding:0in 5.5pt 0in 5.5pt;">
        <p style="font:bold; color:gray; white-space: nowrap;">
          <xsl:value-of select="$RowName" />
        </p>
      </td>
      <td style="border:solid black 1.0pt; padding:0in 5.5pt 0in 5.5pt;">
        <p style="color:gray; text-align:right">
          <xsl:value-of select="$RowValue" />
        </p>
      </td>
    </tr>
  </xsl:template>
  <xsl:template name="EvalResultEntry">
    <xsl:param name="RowName" />
    <xsl:param name="RowValue" />
    <tr>
      <td style="border:solid black 1.0pt; padding:0in 5.5pt 0in 5.5pt;">
        <p style="font:bold; color:gray; white-space: nowrap;">
          <xsl:value-of select="$RowName" />
        </p>
      </td>
      <td style="border:solid black 1.0pt; padding:0in 5.5pt 0in 5.5pt;">
        <p style="color:gray; text-align:right">
          <xsl:call-template name="TranslateEvalResult">
            <xsl:with-param name="EvalResult" select="$RowValue" />
          </xsl:call-template>
        </p>
      </td>
    </tr>
  </xsl:template>
  <xsl:template name="TranslateEvalResult">
    <xsl:param name="EvalResult" />
    <xsl:choose>
      <xsl:when test="$EvalResult = 1">
        <xsl:value-of select="$Success" />
      </xsl:when>
      <xsl:when test="$EvalResult = 2">
        <xsl:value-of select="$Warning" />
      </xsl:when>
      <xsl:when test="$EvalResult = 3">
        <xsl:value-of select="$Error" />
      </xsl:when>
    </xsl:choose>
  </xsl:template>
  <xsl:template name="ScriptFunctions">
    <xsl:element name="script">
      <xsl:comment>
        
                

function ToggleDisplayMode(node) 
{
    var tableHeader = document.getElementById(node);
    // alert(tableHeader.id);
        
	if (null != tableHeader)
	{
		var row = tableHeader.nextSibling;
		while (row != null)
		{
			if ( row.style.display != "none" ) {
				row.style.display = "none";
			}
			else {
				row.style.display = "";
			}
			row = row.nextSibling;
		}
	}
}

function ShowSiblingTable()
{
    var showHideDetailsText = window.event.srcElement;
    var aTag = showHideDetailsText.parentNode;
    var pTag = aTag.parentNode;
    var cellContainingRequestUrl = pTag.parentNode;
    var rowAboveTable = cellContainingRequestUrl.parentNode;
    var row = rowAboveTable.nextSibling;

    var cellWrappingTable = row.childNodes(0);
    var innerTable = cellWrappingTable.childNodes(0);
    var trElements = innerTable.all.tags("tr");

    if ( innerTable.style.display != "none" ){
        innerTable.style.display = "none";
    }
    else {
        innerTable.style.display = "";
    }
    
    for(innerTableElement = 0; innerTableElement &lt; trElements.length; innerTableElement++)
    {
        if ( trElements[innerTableElement].style.display != "none" ) {
            trElements[innerTableElement].style.display = "none";
        }
        else {
            trElements[innerTableElement].style.display = "";
        }
    }
}

                
      </xsl:comment>
    </xsl:element>
  </xsl:template>
</xsl:stylesheet>
  </Transform>

  <!-- TCP Port Check Data transform english locale -->
  <Transform type="Microsoft.SystemCenter.SyntheticTransactions.TCPPortCheckData" locale="ENU">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">
  <!-- Localizable text -->
  <xsl:variable name="DateAndTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DateAndTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ServerName">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ServerName</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Port">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Port</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="StatusCode">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">StatusCode</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ConnectionTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ConnectionTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <!-- End localizable text -->

  <!-- Returns the display string of the specified resouce -->
  <xsl:template name="GetDisplayString">
    <xsl:param name="Id" />
    <xsl:value-of select="DataTypeTransformer:GetStringResource('Microsoft.SystemCenter.SyntheticTransactions.Library', '31bf3856ad364e35', concat('Microsoft.SystemCenter.SyntheticTransactions.TCPPortCheckData.',$Id))" />
  </xsl:template>

  <xsl:template match="DataItem">
    <div align="left">
      <table border="0" width="100%" id="table1" style="border-collapse: collapse">
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$DateAndTime" />
          <xsl:with-param name="Value1" select="DataTypeTransformer:FormatDateTime(@time)" />
        </xsl:call-template>
        <p />
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$ServerName" />
          <xsl:with-param name="Value1" select="ServerName" />
        </xsl:call-template>
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$Port" />
          <xsl:with-param name="Value1" select="Port" />
        </xsl:call-template>
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$StatusCode" />
          <xsl:with-param name="Value1" select="StatusCode" />
        </xsl:call-template>
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$ConnectionTime" />
          <xsl:with-param name="Value1" select="ConnectionTime" />
        </xsl:call-template>
      </table>
    </div>
  </xsl:template>
  <xsl:template name="TableTitle">
    <xsl:param name="Title" />
    <xsl:param name="Value1" />
    <tr>
      <td width="154" style="font:bold;color:#696969">
        <xsl:value-of select="$Title" />
      </td>
      <td width="286" style="font:bold;color:#696969">
        <xsl:value-of select="$Value1" />
      </td>
    </tr>
  </xsl:template>
  <xsl:template name="TableEntry">
    <xsl:param name="Title" />
    <xsl:param name="Value1" />
    <tr>
      <td width="154" style="font:bold;color:gray">
        <xsl:value-of select="$Title" />
      </td>
      <td width="286" style="color:gray">
        <xsl:value-of select="$Value1" />
      </td>
    </tr>
  </xsl:template>
</xsl:stylesheet>
  </Transform>

  <!-- OLE DB Data transform english locale -->
  <Transform type="System.OleDbData" locale="ENU">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">
  <!-- Localizable text -->
  <xsl:variable name="DateAndTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DateAndTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="HRResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">HRResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Result">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Result</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="InitializationTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">InitializationTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="OpenTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">OpenTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ExecutionTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ExecutionTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="FetchTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">FetchTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ResultSet">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ResultSet</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="OriginalData">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">OriginalData</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ErrorDescription">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ErrorDescription</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <!-- End localizable text -->

  <!-- Returns the display string of the specified resouce -->
  <xsl:template name="GetDisplayString">
    <xsl:param name="Id" />
    <xsl:value-of select="DataTypeTransformer:GetStringResource('System.Library', '31bf3856ad364e35', concat('System.OleDbData.',$Id))" />
  </xsl:template>


  <xsl:template match="DataItem">
    <div align="left">
      <table border="0" width="100%" id="table1" style="border-collapse: collapse">
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$DateAndTime" />
          <xsl:with-param name="Value1" select="DataTypeTransformer:FormatDateTime(@time)" />
        </xsl:call-template>
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$HRResult" />
          <xsl:with-param name="Value1" select="HRResult" />
        </xsl:call-template>
        <xsl:choose>
          <xsl:when test="Result='Success'">
            <xsl:variable name="ResultString0">
              <xsl:call-template name="GetDisplayString">
                <xsl:with-param name="Id">Result.0.Success</xsl:with-param>
              </xsl:call-template>
            </xsl:variable>
            <xsl:call-template name="TableEntry">
              <xsl:with-param name="Title" select="$Result" />
              <xsl:with-param name="Value1" select="$ResultString0" />
            </xsl:call-template>
          </xsl:when>
          <xsl:when test="Result='Data Source could not be initialized'">
            <xsl:variable name="ResultString1">
              <xsl:call-template name="GetDisplayString">
                <xsl:with-param name="Id">Result.1.InitFailed</xsl:with-param>
              </xsl:call-template>
            </xsl:variable>
            <xsl:call-template name="TableEntry">
              <xsl:with-param name="Title" select="$Result" />
              <xsl:with-param name="Value1" select="$ResultString1" />
            </xsl:call-template>
          </xsl:when>
          <xsl:when test="Result='Session could not be opened'">
            <xsl:variable name="ResultString2">
              <xsl:call-template name="GetDisplayString">
                <xsl:with-param name="Id">Result.2.OpenFailed</xsl:with-param>
              </xsl:call-template>
            </xsl:variable>
            <xsl:call-template name="TableEntry">
              <xsl:with-param name="Title" select="$Result" />
              <xsl:with-param name="Value1" select="$ResultString2" />
            </xsl:call-template>
          </xsl:when>
          <xsl:when test="Result='Execution of query failed'">
            <xsl:variable name="ResultString3">
              <xsl:call-template name="GetDisplayString">
                <xsl:with-param name="Id">Result.3.ExecFailed</xsl:with-param>
              </xsl:call-template>
            </xsl:variable>
            <xsl:call-template name="TableEntry">
              <xsl:with-param name="Title" select="$Result" />
              <xsl:with-param name="Value1" select="$ResultString3" />
            </xsl:call-template>
          </xsl:when>
          <xsl:when test="Result='Fetch Failed'">
            <xsl:variable name="ResultString4">
              <xsl:call-template name="GetDisplayString">
                <xsl:with-param name="Id">Result.4.FetchFailed</xsl:with-param>
              </xsl:call-template>
            </xsl:variable>
            <xsl:call-template name="TableEntry">
              <xsl:with-param name="Title" select="$Result" />
              <xsl:with-param name="Value1" select="$ResultString4" />
            </xsl:call-template>
          </xsl:when>
        </xsl:choose>
        <xsl:if test="ErrorDescriptionLength!=0">
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="Title" select="$ErrorDescription" />
            <xsl:with-param name="Value1" select="ErrorDescription" />
          </xsl:call-template>
        </xsl:if>
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$InitializationTime" />
          <xsl:with-param name="Value1" select="InitializationTime" />
        </xsl:call-template>
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$OpenTime" />
          <xsl:with-param name="Value1" select="OpenTime" />
        </xsl:call-template>
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$ExecutionTime" />
          <xsl:with-param name="Value1" select="ExecutionTime" />
        </xsl:call-template>
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$FetchTime" />
          <xsl:with-param name="Value1" select="FetchTime" />
        </xsl:call-template>
        <tr>
          <td width="154" style="font:bold;color:gray">
            <xsl:value-of select="$ResultSet" />
          </td>
          <td>
            <div align="left">
              <table border="1" width="100%">
                <xsl:for-each select="Columns">
                  <tr>
                    <xsl:for-each select="Column">
                      <td width="286" style="color:gray">
                        <xsl:value-of select="." />
                      </td>
                    </xsl:for-each>
                  </tr>
                </xsl:for-each>
              </table>
            </div>
          </td>
        </tr>
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$OriginalData" />
          <xsl:with-param name="Value1" select="OriginalData" />
        </xsl:call-template>
      </table>
    </div>
  </xsl:template>
  <xsl:template name="TableEntry">
    <xsl:param name="Title" />
    <xsl:param name="Value1" />
    <tr>
      <td width="154" style="font:bold;color:gray">
        <xsl:value-of select="$Title" />
      </td>
      <td width="286" style="color:gray">
        <xsl:value-of select="$Value1" />
      </td>
    </tr>
  </xsl:template>
</xsl:stylesheet>
  </Transform>

  <!-- WSMan transform -->
  <Transform type="Microsoft.SystemCenter.WSManagement.WSManData" locale="enu">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">

  <xsl:template match="DataItem">
    <div align="left" class="Section1" marginTop="0" marginBottom="0">
      <!-- table border="0" width="100%" id="table1" cellspacing="0" cellpadding="0" -->
      <!-- Transform WSMan Data -->

      <xsl:apply-templates select="WsManData/*" />
      <!-- /table -->
    </div>
  </xsl:template>

  <!-- WSMan Generic template -->

  <xsl:template match="node()">
    <xsl:apply-templates select="." mode="DisplayWsManProbeDataTable" />
  </xsl:template>

  <!-- WSMan Probe section template -->

  <xsl:template match="node()" mode="DisplayWsManProbeDataTable">
    <p />

    <table width="100%" id="table1" cellspacing="0" cellpadding="0" style="border:solid;border-width:1px">
      <!-- div align="left" class="Section1" marginTop="10" marginBottom="10" style="font:bold;color:gray" -->
      <th align="left" style="font:bold;color:gray">
        <xsl:value-of select="local-name(.)" />
      </th>
      <!-- /div -->


      <xsl:apply-templates select="*[boolean(string-length(.))]" mode="DisplayWsManProbeData" />
    </table>

  </xsl:template>

  <!-- WSMan Probe template -->

  <xsl:template match="node()" mode="DisplayWsManProbeData">
    <tr>
      <xsl:if test="1 = position() mod 2">
        <xsl:attribute name="style">background:silver</xsl:attribute>
      </xsl:if>

      <td align="left" width="154" style="font:bold;color:black;">
        <pre style="margin:0px;margin-left:5px;">
          <xsl:value-of select="local-name(.)" />
        </pre>
      </td>

      <td align="left" width="286" style="color:black;">
        <pre style="margin:0px;">
          <xsl:value-of select="." />
        </pre>
      </td>
    </tr>
  </xsl:template>
</xsl:stylesheet>
  </Transform>

  <!-- Base performance transform english locale -->
  <Transform type="System.ProcessInformationData" locale="enu">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">
  <!-- Localizable text -->
  <xsl:variable name="ProcessName">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ProcessName</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ActiveInstanceCount">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ActiveInstanceCount</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <!-- End localizable text -->

  <!-- Returns the display string of the specified resouce -->
  <xsl:template name="GetDisplayString">
    <xsl:param name="Id" />
    <xsl:value-of select="DataTypeTransformer:GetStringResource('System.Library', '31bf3856ad364e35', concat('System.ProcessInformationData.',$Id))" />
  </xsl:template>

  <xsl:template match="DataItem">
    <div align="left">
      <table border="0" width="100%" id="table1" style="border-collapse: collapse">

        <tr>
          <td width="200" style="font:bold;color:black">
            <xsl:value-of select="$ProcessName" />
          </td>
          <td width="130" style="font:bold;color:black">
            <xsl:value-of select="$ActiveInstanceCount" />
          </td>
        </tr>

        <xsl:apply-templates select="ProcessInformations/ProcessInformation" />

      </table>

    </div>
  </xsl:template>

  <xsl:template match="ProcessInformation">
    <xsl:call-template name="TableEntry">
      <xsl:with-param name="Name" select="ProcessName" />
      <xsl:with-param name="Value" select="ActiveInstanceCount" />
    </xsl:call-template>
  </xsl:template>

  <xsl:template name="TableEntry">
    <xsl:param name="Name" />
    <xsl:param name="Value" />
    <tr>
      <td width="200" style="font:bold;color:gray">
        <xsl:value-of select="$Name" />
      </td>
      <td width="130" style="color:gray">
        <xsl:value-of select="$Value" />
      </td>
    </tr>
  </xsl:template>

</xsl:stylesheet>
  </Transform>

  <Transform type="Microsoft.Windows.SerializedObjectData" locale="enu">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">

  <xsl:template match="DataItem">
    <div class="Section1" marginTop="0">
      <table border="0" cellspacing="0" cellpadding="0">
        <tr>
          <td valign="top" style="width:466.9pt;background:#B3B3B3;padding:0in 5.4pt 0in 5.4pt">
            <p>
              <pre>
                <xsl:value-of select="Description" />
              </pre>
            </p>
          </td>
        </tr>
      </table>
    </div>
  </xsl:template>
</xsl:stylesheet>
  </Transform>

  <!-- Consolidator transform -->
  <Transform type="System.CorrelatorData" locale="enu">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">
  <!-- Localizable text -->
  <xsl:variable name="DateAndTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DateAndTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="FirstDataItem">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">FirstDataItem</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="SecondDataItem">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">SecondDataItem</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="NumberOfOccurrences">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">NumberOfOccurrences</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="SampleData">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">SampleData</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <!-- End Localizable text -->

  <!-- Returns the display string of the specified resouce -->
  <xsl:template name="GetDisplayString">
    <xsl:param name="Id" />
    <xsl:value-of select="DataTypeTransformer:GetStringResource('System.Library', '31bf3856ad364e35', concat('System.CorrelatorData.',$Id))" />
  </xsl:template>

  <xsl:template match="DataItem">
    <div align="left" valign="top" class="correlator">

      <xsl:call-template name="CSS" />
      <xsl:call-template name="ScriptFunctions" />

      <table class="mainTable" width="100%">
        <table>
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="Title" select="$DateAndTime" />
            <xsl:with-param name="TitleStyle" select="string(&quot;bold&quot;)" />
            <xsl:with-param name="Value" select="DataTypeTransformer:FormatDateTime(@time)" />
          </xsl:call-template>
        </table>

        <table class="dataDeclarationTable">
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="Title" select="$FirstDataItem" />
            <xsl:with-param name="TitleStyle" select="string(&quot;bold&quot;)" />
            <xsl:with-param name="Value" />
          </xsl:call-template>

          <table id="DataTable" class="containedTable">

            <xsl:call-template name="TableEntry">
              <xsl:with-param name="Title" select="$NumberOfOccurrences" />
              <xsl:with-param name="Value" select="Item0Count" />
            </xsl:call-template>

            <tr>
              <td colSpan="2">

                <table id="SampleData" class="innerTable">

                  <xsl:call-template name="TableToggleEntry">
                    <xsl:with-param name="Id">SampleData1</xsl:with-param>
                    <xsl:with-param name="Title" select="$SampleData" />
                  </xsl:call-template>

                  <tr style="display:none">
                    <td colspan="2">
                      <table class="dataDeclarationTable">

                        <xsl:variable name="ContextDataItem" select="Item0Context/DataItem" />
                        <xsl:if test="$ContextDataItem">
                          <xsl:copy-of select="DataTypeTransformer:Transform($ContextDataItem)" />
                        </xsl:if>

                      </table>
                    </td>
                  </tr>

                </table>
              </td>
            </tr>
          </table>

        </table>

        <table class="dataDeclarationTable">
          <xsl:call-template name="TableEntry">
            <xsl:with-param name="Title" select="$SecondDataItem" />
            <xsl:with-param name="TitleStyle" select="string(&quot;bold&quot;)" />
            <xsl:with-param name="Value" />
          </xsl:call-template>

          <table id="DataTable" class="containedTable">

            <xsl:call-template name="TableEntry">
              <xsl:with-param name="Title" select="$NumberOfOccurrences" />
              <xsl:with-param name="Value" select="Item1Count" />
            </xsl:call-template>

            <tr>
              <td colSpan="2">

                <table id="SampleData" class="innerTable">

                  <xsl:call-template name="TableToggleEntry">
                    <xsl:with-param name="Id">SampleData2</xsl:with-param>
                    <xsl:with-param name="Title" select="$SampleData" />
                  </xsl:call-template>

                  <tr style="display:none">
                    <td colspan="2">
                      <table class="dataDeclarationTable">
                        <xsl:variable name="ContextDataItem" select="Item1Context/DataItem" />
                        <xsl:if test="$ContextDataItem">
                          <xsl:copy-of select="DataTypeTransformer:Transform($ContextDataItem)" />
                        </xsl:if>
                      </table>
                    </td>
                  </tr>
                </table>
              </td>
            </tr>

          </table>
        </table>
      </table>
    </div>
  </xsl:template>

  <xsl:template name="TableToggleEntry">
    <xsl:param name="Id" />
    <xsl:param name="Title" />
    <xsl:element name="tr">
      <xsl:attribute name="id"><xsl:value-of select="$Id" /></xsl:attribute>
      <xsl:element name="td">
        <xsl:attribute name="colspan">2</xsl:attribute>

        <xsl:element name="p">
          <xsl:element name="a">
            <xsl:attribute name="onclick">
              <xsl:text>ToggleDisplayMode('</xsl:text>
              <xsl:value-of select="$Id" />
              <xsl:text>')</xsl:text>
            </xsl:attribute>
            <xsl:element name="b">
              <xsl:attribute name="id"><xsl:value-of select="$Id" />toggle</xsl:attribute>
              <xsl:attribute name="style">cursor='hand'</xsl:attribute>
              +
            </xsl:element>
          </xsl:element>
          <xsl:element name="b">
            <xsl:attribute name="class">dataTitle</xsl:attribute>
            <xsl:value-of select="$Title" />
          </xsl:element>
        </xsl:element>
      </xsl:element>
    </xsl:element>
  </xsl:template>

  <xsl:template name="TableEntry">
    <xsl:param name="Title" />
    <xsl:param name="Value" />
    <xsl:param name="RowStyle" />
    <xsl:param name="TitleStyle" />
    <xsl:param name="ValueStyle" />
    <xsl:element name="tr">
      <xsl:element name="div">
        <xsl:if test="string($RowStyle)">
          <xsl:attribute name="class">
            <xsl:value-of select="string($RowStyle)" />
          </xsl:attribute>
        </xsl:if>
        <xsl:element name="td">
          <xsl:choose>
            <xsl:when test="string($TitleStyle)">
              <xsl:attribute name="class">boldColumn</xsl:attribute>
            </xsl:when>
          </xsl:choose>

          <xsl:value-of select="$Title" />
        </xsl:element>
        <xsl:element name="td">
          <xsl:choose>
            <xsl:when test="string($ValueStyle)">
              <xsl:attribute name="class">boldColumn</xsl:attribute>
            </xsl:when>
            <xsl:otherwise>
              <xsl:attribute name="width">65%</xsl:attribute>
            </xsl:otherwise>
          </xsl:choose>

          <xsl:value-of select="$Value" />
        </xsl:element>
      </xsl:element>
    </xsl:element>
  </xsl:template>

  <xsl:template name="ScriptFunctions">
    <xsl:element name="script">
      

            function ToggleDisplayMode(node) 
            {
                var toggleNode = document.getElementById(node + "toggle");
                if (toggleNode.innerText == "-") {
                  toggleNode.innerText = "+";
                }
                else {
                  toggleNode.innerText = "-";
                }

                var tableHeader = document.getElementById(node);
				if (tableHeader != null)
				{
					var row = tableHeader.nextSibling;
					while (row != null)
					{
						if ( row.style.display != "none" ) {
							row.style.display = "none";
						}
						else {
							row.style.display = "";
						}
						row = row.nextSibling;
					}
				}
                
            }

            
    </xsl:element>
  </xsl:template>

  <xsl:template name="CSS">
    <xsl:element name="style">
      .correlator .mainTable
      {
      width: 100%;
      border-style: none;
      border-collapse: collapse;
      }

      .correlator td
      {
      text-align: left;
      vertical-align: top;
      color: gray;
      }

      .correlator .boldColumn
      {
      text-align: left;
      vertical-align: top;
      font: bold;
      color: #696969;
      }

      .correlator .innerTable
      {
      width: 100%;
      border-style: none;
      border-collapse: collapse;
      }

      .correlator .dataTitle
      {
      text-align: left;
      vertical-align: top;
      margin-left: 10px;
      }

      .correlator .containedTable
      {
      width: 100%;
      margin-left: 15px;
      }

      .correlator b
      {
      text-align: left;
      vertical-align: top;
      font: bold;
      color: #696969;
      }

      .correlator .dataDeclarationTable
      {
      margin-top: 15px;
      }

    </xsl:element>
  </xsl:template>

</xsl:stylesheet>
  </Transform>

  <!-- ICMP Response transform english locale -->
  <Transform type="System.ICMPResponse" locale="enu">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">

  <!-- Localizable text -->
  <xsl:variable name="DateAndTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DateAndTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Destination">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Destination</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ResponseStatus">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ResponseStatus</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ResponseString">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ResponseString</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="ResponseTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ResponseTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="RetryAttempts">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">RetryAttempts</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <!-- End localizable text -->

  <!-- Returns the display string of the specified resouce -->
  <xsl:template name="GetDisplayString">
    <xsl:param name="Id" />
    <xsl:value-of select="DataTypeTransformer:GetStringResource('System.Library', '31bf3856ad364e35', concat('System.ICMPResponse.',$Id))" />
  </xsl:template>

  <xsl:template match="DataItem">
    <div align="left">
      <table border="0" width="100%" id="table1" style="border-collapse: collapse">

        <tr>
          <td width="200" style="font:bold;color:black">
            <xsl:value-of select="$DateAndTime" />
          </td>
          <td width="130" style="color:black">
            <xsl:value-of select="DataTypeTransformer:FormatDateTime(@time)" />
          </td>
        </tr>

        <tr>
          <td width="200" style="font:bold;color:black">
            <xsl:value-of select="$Destination" />
          </td>
          <td width="130" style="color:black">
            <xsl:value-of select="Destination" />
          </td>
        </tr>

        <tr>
          <td width="200" style="font:bold;color:black">
            <xsl:value-of select="$ResponseStatus" />
          </td>
          <td width="130" style="color:black">
            <xsl:value-of select="ResponseStatus" />
          </td>
        </tr>

        <xsl:variable name="ResponseCode" select="ResponseStatus" />
        <xsl:choose>
          <!-- For some reason the GetIPErrorCode returns message "general failure" for success code 0 
                   sNeed to special case this to avoid showing error message for success -->
          <xsl:when test="$ResponseCode = 0" />
          <xsl:otherwise>
            <tr>
              <td width="200" style="font:bold;color:black">
                <xsl:value-of select="$ResponseString" />
              </td>
              <td width="130" style="color:black">
                <xsl:value-of select="DataTypeTransformer:GetMessageForIPErrorCode($ResponseCode)" />
              </td>
            </tr>
          </xsl:otherwise>
        </xsl:choose>

        <tr>
          <td width="200" style="font:bold;color:black">
            <xsl:value-of select="$ResponseTime" />
          </td>
          <td width="130" style="color:black">
            <xsl:value-of select="ResponseTime" />
          </td>
        </tr>

        <tr>
          <td width="200" style="font:bold;color:black">
            <xsl:value-of select="$RetryAttempts" />
          </td>
          <td width="130" style="color:black">
            <xsl:value-of select="RetryAttempts" />
          </td>
        </tr>

      </table>

    </div>
  </xsl:template>

</xsl:stylesheet>
  </Transform>

  <!-- Microsoft.SystemCenter.Apm.Library.IIS7 Compatibility Report Data transform (english locale) -->
  <Transform type="Microsoft.SystemCenter.Apm.Library.IIS7.CompatibilityReportData" locale="enu">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">

  <!-- Localizable text -->

  <xsl:variable name="Title.Application">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Title.Application</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="Title.ScanResult">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Title.ScanResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="RulesTableColumn1Header">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Title.Header.Id</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="RulesTableColumn2Header">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Title.Header.Name</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="RulesTableColumn3Header">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Title.Header.CheckResult</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="Title.Knowledgebase">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Title.Knowledgebase</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Title.Description">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Title.Description</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Title.CriticalEnvironments">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Title.CriticalEnvironments</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Title.ResolutionOptions">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Title.ResolutionOptions</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Title.ResolutionOptions.General">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Title.ResolutionOptions.General</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Rules.ResolutionOptions.General.Line1">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Rules.ResolutionOptions.General.Line1</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Rules.ResolutionOptions.General.Line2">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Rules.ResolutionOptions.General.Line2</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Title.ResolutionOptions.RuleSpecific">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Title.ResolutionOptions.RuleSpecific</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Rules.ResolutionOptions.RuleSpecific.Failed">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Rules.ResolutionOptions.RuleSpecific.Failed</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="Rules.ResolutionOptions.RuleSpecific.SameTypeContent">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Rules.ResolutionOptions.RuleSpecific.SameTypeContent</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="Rules.ResolutionOptions.RuleSpecific.FailedCritical">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Rules.ResolutionOptions.RuleSpecific.FailedCritical</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="Rules.ResolutionOptions.RuleSpecific.FailedCritical.StartDescription">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Rules.ResolutionOptions.RuleSpecific.FailedCritical.StartDescription</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="Rules.ResolutionOptions.RuleSpecific.FailedCritical.Description.Begin">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Rules.ResolutionOptions.RuleSpecific.FailedCritical.Description.Begin</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="Rules.ResolutionOptions.RuleSpecific.FailedCritical.Description.End">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Rules.ResolutionOptions.RuleSpecific.FailedCritical.Description.End</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="Rules.ResolutionOptions.RuleSpecific.FailedCritical.Description.Escalated.Begin">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Rules.ResolutionOptions.RuleSpecific.FailedCritical.Description.Escalated.Begin</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="Rules.ResolutionOptions.RuleSpecific.FailedCritical.Description.Escalated.End">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Rules.ResolutionOptions.RuleSpecific.FailedCritical.Description.Escalated.End</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="Title.IncompatibleResources">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Title.IncompatibleResources</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="Line">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Line</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Char">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">Char</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="MethodRefName">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">MethodRefName</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="ApplicationCheckResult">
    <xsl:call-template name="GetCheckResultLongName">
      <xsl:with-param name="resultId" select="/DataItem/Report/Applications/Application/@CheckResult" />
      <xsl:with-param name="isEscalated" select="count(/DataItem/Report/Applications/Application/RulesResults/RuleResult[@IsEscalated = 'true']) &gt; 0" />
    </xsl:call-template>
  </xsl:variable>

  <!-- End localizable text -->

  <!-- Returns the display string of the specified resouce -->
  <xsl:template name="GetDisplayString">
    <xsl:param name="Id" />
    <xsl:value-of select="DataTypeTransformer:GetStringResource('Microsoft.SystemCenter.Apm.Web.IIS7', '31bf3856ad364e35', concat('Microsoft.SystemCenter.Apm.Web.IIS7.StringResources.', $Id))" />
  </xsl:template>

  <xsl:template name="GetRuleEscalationThreshold">
    <xsl:param name="RuleId" />
    <xsl:choose>
      <xsl:when test="count(/DataItem/Report/Rules/Rule[@ID = $RuleId]) = 1">
        <xsl:value-of select="/DataItem/Report/Rules/Rule[@ID = $RuleId]/@EscalationThreshold" />
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="0" />
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="string-replace-first">
    <xsl:param name="strIn" />
    <xsl:param name="strFrom" />
    <xsl:param name="strTo" />
    <xsl:choose>
      <xsl:when test="contains($strIn, $strFrom) and $strFrom != $strTo">
        <xsl:value-of select="concat(substring-before($strIn,$strFrom), $strTo, substring-after($strIn,$strFrom))" />
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$strIn" />
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="GetDisplayStringIfExists">
    <xsl:param name="Id" />
    <xsl:variable name="StringFullName" select="concat('Microsoft.SystemCenter.Apm.Web.IIS7.StringResources.', $Id)" />
    <xsl:variable name="DisplayStringValue" select="DataTypeTransformer:GetStringResource('Microsoft.SystemCenter.Apm.Web.IIS7', '31bf3856ad364e35', $StringFullName)" />
    <xsl:choose>
      <xsl:when test="$DisplayStringValue = $StringFullName">
        <xsl:value-of select="''" />
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$DisplayStringValue" />
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="GetRuleDisplayString">
    <xsl:param name="Id" />
    <xsl:param name="RuleId" />
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id" select="concat('Rules.', $RuleId, '.', $Id)" />
    </xsl:call-template>
  </xsl:template>

  <xsl:template name="GetRuleDisplayStringIfExists">
    <xsl:param name="Id" />
    <xsl:param name="RuleId" />
    <xsl:call-template name="GetDisplayStringIfExists">
      <xsl:with-param name="Id" select="concat('Rules.', $RuleId, '.', $Id)" />
    </xsl:call-template>
  </xsl:template>

  <xsl:template name="GetRuleCanBeFilteredResourceType">
    <xsl:param name="ResourceTypeId" />
    <xsl:param name="RuleId" />
    <xsl:call-template name="GetRuleDisplayStringIfExists">
      <xsl:with-param name="Id" select="concat('ResolutionOptions.RuleSpecific.FailedCritical.Escalated.Resources.', $ResourceTypeId)" />
      <xsl:with-param name="RuleId" select="$RuleId" />
    </xsl:call-template>
  </xsl:template>

  <xsl:template name="GetRuleCanNotBeFilteredResourceType">
    <xsl:param name="ResourceTypeId" />
    <xsl:param name="RuleId" />
    <xsl:call-template name="GetRuleDisplayStringIfExists">
      <xsl:with-param name="Id" select="concat('ResolutionOptions.RuleSpecific.FailedCritical.Resources.', $ResourceTypeId)" />
      <xsl:with-param name="RuleId" select="$RuleId" />
    </xsl:call-template>
  </xsl:template>

  <xsl:template name="GetResourceTypeNameString">
    <xsl:param name="TypeId" />
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id" select="concat('ResourceTypes.', $TypeId, '.Name')" />
    </xsl:call-template>
  </xsl:template>

  <xsl:template name="ReplaceOneOccurrence">
    <xsl:param name="string" />
    <xsl:param name="oldvalue" />
    <xsl:param name="newvalue" />
    <xsl:choose>
      <xsl:when test="contains($string, $oldvalue)">
        <xsl:value-of select="concat(substring-before($string, $oldvalue), $newvalue, substring-after($string, $oldvalue))" />
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$string" />
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="GetCheckResultShortName">
    <xsl:param name="resultId" />
    <xsl:param name="isEscalated" />
    <xsl:choose>
      <xsl:when test="$isEscalated = 'true'">
        <xsl:call-template name="GetDisplayString">
          <xsl:with-param name="Id" select="concat('CheckResults.', $resultId, '.ShortName.Escalated')" />
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:call-template name="GetDisplayString">
          <xsl:with-param name="Id" select="concat('CheckResults.', $resultId, '.ShortName')" />
        </xsl:call-template>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="GetCheckResultLongName">
    <xsl:param name="resultId" />
    <xsl:param name="isEscalated" />
    <xsl:choose>
      <xsl:when test="$isEscalated = 'true'">
        <xsl:call-template name="GetDisplayString">
          <xsl:with-param name="Id" select="concat('CheckResults.', $resultId, '.LongName.Escalated')" />
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:call-template name="GetDisplayString">
          <xsl:with-param name="Id" select="concat('CheckResults.', $resultId, '.LongName')" />
        </xsl:call-template>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="DataItem">
    <html xmlns="http://www.w3.org/1999/xhtml">
      <head>
        <title>Compatibility Check Results</title>
      </head>
      <body>
        <h4>
          <xsl:value-of select="$Title.Application" />: <span style="color:#404040">
            <xsl:value-of select="/DataItem/Report/Applications/Application/@Name" />
          </span>
        </h4>
        <h4>
          <xsl:value-of select="$Title.ScanResult" />: <span style="color:#404040">
            <xsl:value-of select="$ApplicationCheckResult" />
          </span>
        </h4>
        <hr />
        <table style="width: 100%">
          <tr>
            <xsl:call-template name="TableColumnHeader">
              <xsl:with-param name="Column1Name" select="$RulesTableColumn1Header" />
              <xsl:with-param name="Column2Name" select="$RulesTableColumn2Header" />
              <xsl:with-param name="Column3Name" select="$RulesTableColumn3Header" />
            </xsl:call-template>
          </tr>
          <xsl:for-each select="Report/Applications/Application/RulesResults/RuleResult[@CheckResult != '0']">
            <xsl:call-template name="RuleDescription">
              <xsl:with-param name="RuleID" select="@RuleID" />
              <xsl:with-param name="RuleCheckStatus" select="@CheckResult" />
              <xsl:with-param name="IsEscalated" select="@IsEscalated" />
              <xsl:with-param name="IncompatibleResourcesCount" select="@IncompatibleResourcesCount" />
              <xsl:with-param name="ProcessedResourcesCount" select="@ProcessedResourcesCount" />
            </xsl:call-template>
          </xsl:for-each>
        </table>
        <hr />
      </body>
    </html>
  </xsl:template>

  <xsl:template name="RuleDescription">
    <xsl:param name="RuleID" />
    <xsl:param name="RuleCheckStatus" />
    <xsl:param name="IsEscalated" />
    <xsl:param name="IncompatibleResourcesCount" />
    <xsl:param name="ProcessedResourcesCount" />

    <xsl:variable name="RuleEscalationThreshold">
      <xsl:call-template name="GetRuleEscalationThreshold">
        <xsl:with-param name="RuleId" select="$RuleID" />
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="RuleName">
      <xsl:call-template name="GetRuleDisplayString">
        <xsl:with-param name="Id">Name</xsl:with-param>
        <xsl:with-param name="RuleId" select="$RuleID" />
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="RuleDescription">
      <xsl:call-template name="GetRuleDisplayString">
        <xsl:with-param name="Id">Description</xsl:with-param>
        <xsl:with-param name="RuleId" select="$RuleID" />
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="RuleCriticalEnvironments">
      <xsl:call-template name="GetRuleDisplayString">
        <xsl:with-param name="Id">CriticalEnvironments</xsl:with-param>
        <xsl:with-param name="RuleId" select="$RuleID" />
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="RuleCanNotBeFilteredResourceTypes">
      <xsl:call-template name="GetRuleDisplayString">
        <xsl:with-param name="Id">ResolutionOptions.RuleSpecific.FailedCritical.Resources</xsl:with-param>
        <xsl:with-param name="RuleId" select="$RuleID" />
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="RuleCanNotBeFilteredResourceType1">
      <xsl:call-template name="GetRuleCanNotBeFilteredResourceType">
        <xsl:with-param name="ResourceTypeId">1</xsl:with-param>
        <xsl:with-param name="RuleId" select="$RuleID" />
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="RuleCanNotBeFilteredResourceType2">
      <xsl:call-template name="GetRuleCanNotBeFilteredResourceType">
        <xsl:with-param name="ResourceTypeId">2</xsl:with-param>
        <xsl:with-param name="RuleId" select="$RuleID" />
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="RuleCanNotBeFilteredResourceType3">
      <xsl:call-template name="GetRuleCanNotBeFilteredResourceType">
        <xsl:with-param name="ResourceTypeId">3</xsl:with-param>
        <xsl:with-param name="RuleId" select="$RuleID" />
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="RuleCanNotBeFilteredResourceType4">
      <xsl:call-template name="GetRuleCanNotBeFilteredResourceType">
        <xsl:with-param name="ResourceTypeId">4</xsl:with-param>
        <xsl:with-param name="RuleId" select="$RuleID" />
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="RuleCanNotBeFilteredResourceType5">
      <xsl:call-template name="GetRuleCanNotBeFilteredResourceType">
        <xsl:with-param name="ResourceTypeId">5</xsl:with-param>
        <xsl:with-param name="RuleId" select="$RuleID" />
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="RuleCanNotBeFilteredResourceType6">
      <xsl:call-template name="GetRuleCanNotBeFilteredResourceType">
        <xsl:with-param name="ResourceTypeId">6</xsl:with-param>
        <xsl:with-param name="RuleId" select="$RuleID" />
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="RuleCanNotBeFilteredResourceType7">
      <xsl:call-template name="GetRuleCanNotBeFilteredResourceType">
        <xsl:with-param name="ResourceTypeId">7</xsl:with-param>
        <xsl:with-param name="RuleId" select="$RuleID" />
      </xsl:call-template>
    </xsl:variable>
    
    <xsl:variable name="RuleCanBeFilteredResourceTypes">
      <xsl:call-template name="GetRuleDisplayString">
        <xsl:with-param name="Id">ResolutionOptions.RuleSpecific.FailedCritical.Escalated.Resources</xsl:with-param>
        <xsl:with-param name="RuleId" select="$RuleID" />
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="RuleCanBeFilteredResourceType1">
      <xsl:call-template name="GetRuleCanBeFilteredResourceType">
        <xsl:with-param name="ResourceTypeId">1</xsl:with-param>
        <xsl:with-param name="RuleId" select="$RuleID" />
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="RuleCanBeFilteredResourceType2">
      <xsl:call-template name="GetRuleCanBeFilteredResourceType">
        <xsl:with-param name="ResourceTypeId">2</xsl:with-param>
        <xsl:with-param name="RuleId" select="$RuleID" />
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="RuleCanBeFilteredResourceType3">
      <xsl:call-template name="GetRuleCanBeFilteredResourceType">
        <xsl:with-param name="ResourceTypeId">3</xsl:with-param>
        <xsl:with-param name="RuleId" select="$RuleID" />
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="RuleCanBeFilteredResourceType4">
      <xsl:call-template name="GetRuleCanBeFilteredResourceType">
        <xsl:with-param name="ResourceTypeId">4</xsl:with-param>
        <xsl:with-param name="RuleId" select="$RuleID" />
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="RuleCanBeFilteredResourceType5">
      <xsl:call-template name="GetRuleCanBeFilteredResourceType">
        <xsl:with-param name="ResourceTypeId">5</xsl:with-param>
        <xsl:with-param name="RuleId" select="$RuleID" />
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="RuleCanBeFilteredResourceType6">
      <xsl:call-template name="GetRuleCanBeFilteredResourceType">
        <xsl:with-param name="ResourceTypeId">6</xsl:with-param>
        <xsl:with-param name="RuleId" select="$RuleID" />
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="RuleCanBeFilteredResourceType7">
      <xsl:call-template name="GetRuleCanBeFilteredResourceType">
        <xsl:with-param name="ResourceTypeId">7</xsl:with-param>
        <xsl:with-param name="RuleId" select="$RuleID" />
      </xsl:call-template>
    </xsl:variable>
    
    <xsl:variable name="RuleCheckResult">
      <xsl:call-template name="GetCheckResultShortName">
        <xsl:with-param name="resultId" select="$RuleCheckStatus" />
        <xsl:with-param name="isEscalated" select="$IsEscalated" />
      </xsl:call-template>
    </xsl:variable>

    <xsl:call-template name="TableEntry3BigFont">
      <xsl:with-param name="Column1Value" select="$RuleID" />
      <xsl:with-param name="Column2Value" select="$RuleName" />
      <xsl:with-param name="Column3Value" select="$RuleCheckResult" />
    </xsl:call-template>
    <td>
    </td>

    <td colspan="2">
      <!-- We do not need to show KB and Incompatible Resources for rules with Check Passed: -->
      <xsl:if test="$RuleCheckStatus &gt; 1">
        <div style="background-color: #EEEEEE; margin:10,10,10,10">
          <h3>
            <xsl:value-of select="$Title.Knowledgebase" />:
          </h3>
        </div>
        <div>
          <b>
            <i>
              <xsl:value-of select="$Title.Description" />:
            </i>
          </b>
          <xsl:value-of select="$RuleDescription" />
        </div>
        <div>
          <b>
            <i>
              <xsl:value-of select="$Title.CriticalEnvironments" />:
            </i>
          </b>
          <xsl:value-of select="$RuleCriticalEnvironments" />
        </div>
        <div>
          <b>
            <i>
              <xsl:value-of select="$Title.ResolutionOptions" />:
            </i>
          </b>
        </div>

        <li>
          <div>
            <b>
              <xsl:value-of select="$Title.ResolutionOptions.General" />:
            </b>
            <xsl:value-of select="$Rules.ResolutionOptions.General.Line1" />
            <xsl:text> </xsl:text>
            <xsl:value-of select="$Rules.ResolutionOptions.General.Line2" />
          </div>
        </li>
        <li>
          <div>
            <b>
              <xsl:value-of select="$Title.ResolutionOptions.RuleSpecific" />:
            </b>
            <xsl:choose>
              <!-- Failed-->
              <xsl:when test="$RuleCheckStatus = 2">
                <xsl:value-of select="$Rules.ResolutionOptions.RuleSpecific.Failed" />
              </xsl:when>
              <!-- FailedCritical-->
              <xsl:when test="$RuleCheckStatus = 3">
                <xsl:value-of select="$Rules.ResolutionOptions.RuleSpecific.FailedCritical" />
                <xsl:text> </xsl:text>
                <xsl:value-of select="$Rules.ResolutionOptions.RuleSpecific.FailedCritical.StartDescription" />
                <xsl:text>: </xsl:text>
                <div>
                  <xsl:choose>
                    <xsl:when test="$IsEscalated = 'true'">
                      <xsl:variable name="Rules.ResolutionOptions.RuleSpecific.FailedCritical.Description.Escalated.Begin.Replaced">
                        <xsl:call-template name="string-replace-first">
                          <xsl:with-param name="strIn" select="$Rules.ResolutionOptions.RuleSpecific.FailedCritical.Description.Escalated.Begin" />
                          <xsl:with-param name="strFrom" select="'#'" />
                          <xsl:with-param name="strTo" select="$RuleEscalationThreshold" />
                        </xsl:call-template>
                      </xsl:variable>
                      <xsl:value-of select="$Rules.ResolutionOptions.RuleSpecific.FailedCritical.Description.Escalated.Begin.Replaced" />
                      <xsl:text>: </xsl:text>
                      <ul>
                        <!-- List of resources, cannot be filtered for the rule. There are 6 of them but, because there are 6 possible types for now. -->
                        <xsl:if test="string-length($RuleCanBeFilteredResourceType1) &gt; 0">
                          <li style="list-style-type : lower-alpha;padding-bottom: 2;padding-top: 2;">
                            <xsl:value-of select="$RuleCanBeFilteredResourceType1" />
                          </li>
                        </xsl:if>
                        <xsl:if test="string-length($RuleCanBeFilteredResourceType2) &gt; 0">
                          <li style="list-style-type : lower-alpha;padding-bottom: 2;padding-top: 2;">
                            <xsl:value-of select="$RuleCanBeFilteredResourceType2" />
                          </li>
                        </xsl:if>
                        <xsl:if test="string-length($RuleCanBeFilteredResourceType3) &gt; 0">
                          <li style="list-style-type : lower-alpha;padding-bottom: 2;padding-top: 2;">
                            <xsl:value-of select="$RuleCanBeFilteredResourceType3" />
                          </li>
                        </xsl:if>
                        <xsl:if test="string-length($RuleCanBeFilteredResourceType4) &gt; 0">
                          <li style="list-style-type : lower-alpha;padding-bottom: 2;padding-top: 2;">
                            <xsl:value-of select="$RuleCanBeFilteredResourceType4" />
                          </li>
                        </xsl:if>
                        <xsl:if test="string-length($RuleCanBeFilteredResourceType5) &gt; 0">
                          <li style="list-style-type : lower-alpha;padding-bottom: 2;padding-top: 2;">
                            <xsl:value-of select="$RuleCanBeFilteredResourceType5" />
                          </li>
                        </xsl:if>
                        <xsl:if test="string-length($RuleCanBeFilteredResourceType6) &gt; 0">
                          <li style="list-style-type : lower-alpha;padding-bottom: 2;padding-top: 2;">
                            <xsl:value-of select="$RuleCanBeFilteredResourceType6" />
                          </li>
                        </xsl:if>
                        <xsl:if test="string-length($RuleCanBeFilteredResourceType7) &gt; 0">
                          <li style="list-style-type : lower-alpha;padding-bottom: 2;padding-top: 2;">
                            <xsl:value-of select="$RuleCanBeFilteredResourceType7" />
                          </li>
                        </xsl:if>
                        <!-- Last item for same-content resources -->
                        <li style="list-style-type : lower-alpha;padding-bottom: 2;padding-top: 2;">
                          <xsl:value-of select="$Rules.ResolutionOptions.RuleSpecific.SameTypeContent" />
                        </li>
                      </ul>
                      <xsl:value-of select="$Rules.ResolutionOptions.RuleSpecific.FailedCritical.Description.Escalated.End" />
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="$Rules.ResolutionOptions.RuleSpecific.FailedCritical.Description.Begin" />
                      <xsl:text>: </xsl:text>
                      <ul>
                        <!-- List of resources, cannot be filtered for the rule. There are 6 of them but, because there are 6 possible types for now. -->
                        <xsl:if test="string-length($RuleCanNotBeFilteredResourceType1) &gt; 0">
                          <li style="list-style-type : lower-alpha;padding-bottom: 2;padding-top: 2;">
                            <xsl:value-of select="$RuleCanNotBeFilteredResourceType1" />
                          </li>
                        </xsl:if>
                        <xsl:if test="string-length($RuleCanNotBeFilteredResourceType2) &gt; 0">
                          <li style="list-style-type : lower-alpha;padding-bottom: 2;padding-top: 2;">
                            <xsl:value-of select="$RuleCanNotBeFilteredResourceType2" />
                          </li>
                        </xsl:if>
                        <xsl:if test="string-length($RuleCanNotBeFilteredResourceType3) &gt; 0">
                          <li style="list-style-type : lower-alpha;padding-bottom: 2;padding-top: 2;">
                            <xsl:value-of select="$RuleCanNotBeFilteredResourceType3" />
                          </li>
                        </xsl:if>
                        <xsl:if test="string-length($RuleCanNotBeFilteredResourceType4) &gt; 0">
                          <li style="list-style-type : lower-alpha;padding-bottom: 2;padding-top: 2;">
                            <xsl:value-of select="$RuleCanNotBeFilteredResourceType4" />
                          </li>
                        </xsl:if>
                        <xsl:if test="string-length($RuleCanNotBeFilteredResourceType5) &gt; 0">
                          <li style="list-style-type : lower-alpha;padding-bottom: 2;padding-top: 2;">
                            <xsl:value-of select="$RuleCanNotBeFilteredResourceType5" />
                          </li>
                        </xsl:if>
                        <xsl:if test="string-length($RuleCanNotBeFilteredResourceType6) &gt; 0">
                          <li style="list-style-type : lower-alpha;padding-bottom: 2;padding-top: 2;">
                            <xsl:value-of select="$RuleCanNotBeFilteredResourceType6" />
                          </li>
                        </xsl:if>
                        <xsl:if test="string-length($RuleCanNotBeFilteredResourceType7) &gt; 0">
                          <li style="list-style-type : lower-alpha;padding-bottom: 2;padding-top: 2;">
                            <xsl:value-of select="$RuleCanNotBeFilteredResourceType7" />
                          </li>
                        </xsl:if>
                        <!-- Last item for same-content resources -->
                        <li style="list-style-type : lower-alpha;padding-bottom: 2;padding-top: 2;">
                          <xsl:value-of select="$Rules.ResolutionOptions.RuleSpecific.SameTypeContent" />
                        </li>
                      </ul>
                      <xsl:value-of select="$Rules.ResolutionOptions.RuleSpecific.FailedCritical.Description.End" />
                    </xsl:otherwise>
                  </xsl:choose>
                </div>
              </xsl:when>
            </xsl:choose>
          </div>
        </li>
        <div>
          <h3 style="background-color: #EEEEEE; margin:10,10,10,10">
            <xsl:value-of select="$Title.IncompatibleResources" /> (<xsl:value-of select="$IncompatibleResourcesCount" />):
          </h3>
        </div>
        <div style="margin:0,10,0,0">
          <table width="100%">
            <xsl:for-each select="/DataItem/Report/Applications/Application/RulesResources/RuleResource[@RuleID = $RuleID]">
              <xsl:call-template name="ResourceDescription">
                <!-- Pass Rule ID for script purposes only -->
                <xsl:with-param name="RuleID" select="@RuleID" />
                <xsl:with-param name="ResourceID" select="@ResourceID" />
                <xsl:with-param name="Description" select="@Description" />
              </xsl:call-template>
            </xsl:for-each>
          </table>
        </div>
      </xsl:if>
      <hr />
    </td>
  </xsl:template>

  <!-- Forms Resource Description: -->
  <xsl:template name="ResourceDescription">
    <xsl:param name="RuleID" />
    <xsl:param name="ResourceID" />
    <xsl:param name="Description" />
    <xsl:variable name="ResourceTypeName">
      <xsl:call-template name="GetResourceTypeNameString">
        <xsl:with-param name="TypeId" select="/DataItem/Report/Applications/Application/Resources/Resource[@ID = $ResourceID]/@TypeID" />
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="LocalizedDescriptionStage1">
      <xsl:call-template name="ReplaceOneOccurrence">
        <xsl:with-param name="string" select="$Description" />
        <xsl:with-param name="oldvalue" select="'Line'" />
        <xsl:with-param name="newvalue" select="$Line" />
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="LocalizedDescriptionStage2">
      <xsl:call-template name="ReplaceOneOccurrence">
        <xsl:with-param name="string" select="$LocalizedDescriptionStage1" />
        <xsl:with-param name="oldvalue" select="'Char'" />
        <xsl:with-param name="newvalue" select="$Char" />
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="LocalizedDescription">
      <xsl:call-template name="ReplaceOneOccurrence">
        <xsl:with-param name="string" select="$LocalizedDescriptionStage2" />
        <xsl:with-param name="oldvalue" select="'Member Ref Name'" />
        <xsl:with-param name="newvalue" select="$MethodRefName" />
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="ResourceName">
      <xsl:value-of select="/DataItem/Report/Applications/Application/Resources/Resource[@ID = $ResourceID]/@Name" />
    </xsl:variable>
    <xsl:call-template name="SimpleFormat1">
      <xsl:with-param name="Column1ValuePart1" select="concat($ResourceTypeName, ': ')" />
      <xsl:with-param name="Column1ValuePart2" select="$ResourceName" />
      <xsl:with-param name="Column1ValuePart3" select="concat(' - ', $LocalizedDescription)" />
    </xsl:call-template>
  </xsl:template>

  <xsl:template name="TableColumnHeader">
    <xsl:param name="Column1Name" />
    <xsl:param name="Column2Name" />
    <xsl:param name="Column3Name" />
    <th align="left" style="font:bold;color:gray;font-size:14px">
      <xsl:value-of select="$Column1Name" />
    </th>
    <th align="left" style="font:bold;color:gray;font-size:14px">
      <xsl:value-of select="$Column2Name" />
    </th>
    <th align="left" style="font:bold;color:gray;font-size:14px">
      <xsl:value-of select="$Column3Name" />
    </th>
  </xsl:template>
  <xsl:template name="TableEntry3">
    <xsl:param name="Column1Value" />
    <xsl:param name="Column2Value" />
    <xsl:param name="Column3Value" />
    <tr>
      <td style="font:bold;color:gray">
        <xsl:value-of select="$Column1Value" />
      </td>
      <td style="font:bold;color:gray">
        <xsl:value-of select="$Column2Value" />
      </td>
      <td style="font:bold;color:gray">
        <xsl:value-of select="$Column3Value" />
      </td>
    </tr>
  </xsl:template>

  <xsl:template name="TableEntry3BigFont">
    <xsl:param name="Column1Value" />
    <xsl:param name="Column2Value" />
    <xsl:param name="Column3Value" />
    <tr style="font:bold;color:gray">
      <td style="font-size:12px">
        <xsl:value-of select="$Column1Value" />
      </td>
      <td style="font-size:12px">
        <xsl:value-of select="$Column2Value" />
      </td>
      <td style="font-size:12px">
        <xsl:value-of select="$Column3Value" />
      </td>
    </tr>
  </xsl:template>

  <xsl:template name="TableEntry2">
    <xsl:param name="Column1Value" />
    <xsl:param name="Column2Value" />
    <tr>
      <td style="font:bold;color:gray">
        <xsl:value-of select="$Column1Value" />
      </td>
      <td style="color:gray">
        <xsl:value-of select="$Column2Value" />
      </td>
    </tr>
  </xsl:template>

  <xsl:template name="TableEntry1">
    <xsl:param name="Column1Value" />
    <tr>
      <td style="font:bold;color:gray">
        <xsl:value-of select="$Column1Value" />
      </td>
    </tr>
  </xsl:template>

  <xsl:template name="SimpleFormat1">
    <xsl:param name="Column1ValuePart1" />
    <xsl:param name="Column1ValuePart2" />
    <xsl:param name="Column1ValuePart3" />
    <tr>
      <td style="color:gray">
        <xsl:value-of select="$Column1ValuePart1" />
        <b>
          <xsl:value-of select="$Column1ValuePart2" />
        </b>
        <xsl:value-of select="$Column1ValuePart3" />
      </td>
    </tr>
  </xsl:template>

</xsl:stylesheet>
  </Transform>
	<Transform type="Microsoft.SystemCenter.GetPoolMemberMonitoringTLME.DataType" locale="enu">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">
  <!-- Localizable text -->

  <xsl:variable name="DateAndTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DateAndTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="PoolName">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">PoolName</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="ManagedEntity">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ManagedEntity</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="ManagingHealthService">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ManagingHealthService</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <!-- End localizable text -->
  <!-- Returns the display string of the specified resouce -->

  <xsl:template name="GetDisplayString">
    <xsl:param name="Id" />
    <xsl:value-of select="DataTypeTransformer:GetStringResource('Microsoft.SystemCenter.Library', '9396306c2be7fcc4', concat('Microsoft.SystemCenter.GetPoolMemberMonitoringTLME.DataType.',$Id))" />
  </xsl:template>

  <xsl:template match="DataItem">
    <div align="left">
      <table border="0" width="100%" id="table1" style="border-collapse: collapse">
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$DateAndTime" />
          <xsl:with-param name="Value1" select="DataTypeTransformer:FormatDateTime(@time)" />
        </xsl:call-template>

        <xsl:call-template name="TableTitle">
          <xsl:with-param name="Title" select="$ManagedEntity" />
          <xsl:with-param name="Value1" select="ManagedEntity" />
          <xsl:with-param name="Value2" select="ManagedEntity/@managedEntityId" />
        </xsl:call-template>

        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$PoolName" />
          <xsl:with-param name="Value1" select="Pool" />
          <xsl:with-param name="Value2" select="Pool/@poolId" />
        </xsl:call-template>

        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$ManagingHealthService" />
          <xsl:with-param name="Value1" select="ManagingHealthService" />
          <xsl:with-param name="Value2" select="ManagingHealthService/@healthServiceId" />
        </xsl:call-template>
      </table>
    </div>
  </xsl:template>

  <xsl:template name="TableTitle">
    <xsl:param name="Title" />
    <xsl:param name="Value1" />
    <xsl:param name="Value2" />

    <tr height="25" valign="bottom">
      <td width="154" style="font:bold;color:#696969">
        <xsl:value-of select="$Title" />
      </td>

      <td width="286" style="font:bold;color:#696969">
        <xsl:value-of select="$Value1" />
      </td>

      <td width="286" style="font:bold;color:#696969">
        <xsl:value-of select="$Value2" />
      </td>
    </tr>
  </xsl:template>

  <xsl:template name="TableEntry">
    <xsl:param name="Title" />
    <xsl:param name="Value1" />
    <xsl:param name="Value2" />

    <tr>
      <td width="154" style="font:bold;color:gray">
        <xsl:value-of select="$Title" />
      </td>

      <td width="286" style="color:gray">
        <xsl:value-of select="$Value1" />
      </td>

      <td width="286" style="color:gray">
        <xsl:value-of select="$Value2" />
      </td>
    </tr>
  </xsl:template>
</xsl:stylesheet>
	</Transform>

	<Transform type="Microsoft.SystemCenter.GetTLMEsMonitoredByPoolMember.DataType" locale="enu">
    <!--
	<DataItem type="Microsoft.SystemCenter.GetTLMEsMonitoredByPoolMember.DataType" time="2011-02-15T17:24:50.422Z" sourceHealthServiceId="16A74711-2708-B18F-C86C-CFC712FB6D5F">
		<Pool poolId="10A8E3ED-27D7-E860-D22F-C6EA78208838">Microsoft.SystemCenter.AllManagementServersPool</Pool>
		<ManagedEntities>
			<ManagedEntity managedEntityId="D1913987-7B49-1FBC-CF68-4713275F1D5F">Microsoft.SystemCenter.AgentWatchersGroup</ManagedEntity>
			<ManagedEntity managedEntityId="3801C7FB-E7A7-46F2-943D-40F44B7C75AF">Some other entity display name</ManagedEntity>
		</ManagedEntities>
	</DataItem>
		--><xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">
  <!-- Localizable text -->

  <xsl:variable name="DateAndTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">DateAndTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="PoolName">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">PoolName</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="ManagedEntities">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">ManagedEntities</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <!-- End localizable text -->
  <!-- Returns the display string of the specified resouce -->

  <xsl:template name="GetDisplayString">
    <xsl:param name="Id" />
    <xsl:value-of select="DataTypeTransformer:GetStringResource('Microsoft.SystemCenter.Library', '9396306c2be7fcc4', concat('Microsoft.SystemCenter.GetTLMEsMonitoredByPoolMember.DataType.',$Id))" />
  </xsl:template>

  <xsl:template match="DataItem">
    <div align="left">
      <table border="0" width="100%" id="table1" style="border-collapse: collapse">
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$DateAndTime" />
          <xsl:with-param name="Value1" select="DataTypeTransformer:FormatDateTime(@time)" />
        </xsl:call-template>

        <xsl:call-template name="TableTitle">
          <xsl:with-param name="Title" select="$PoolName" />
          <xsl:with-param name="Value1" select="Pool" />
          <xsl:with-param name="Value2" select="Pool/@poolId" />
        </xsl:call-template>

        <tr height="25" valign="bottom">
          <td width="154" style="font:bold;color:gray">
            <xsl:value-of select="$ManagedEntities" />
          </td>
        </tr>
      </table>

      <DIV STYLE="margin-left:1em;">
        <table width="100%" id="table1" style="border-collapse:collapse" frame="hsides" cellpadding="10">
          <xsl:apply-templates select="ManagedEntities/ManagedEntity" />
        </table>
      </DIV>
    </div>
  </xsl:template>

  <xsl:template name="TableTitle">
    <xsl:param name="Title" />
    <xsl:param name="Value1" />
    <xsl:param name="Value2" />

    <tr height="25" valign="bottom">
      <td width="154" style="font:bold;color:#696969">
        <xsl:value-of select="$Title" />
      </td>

      <td width="286" style="font:bold;color:#696969">
        <xsl:value-of select="$Value1" />
      </td>

      <td width="286" style="font:bold;color:#696969">
        <xsl:value-of select="$Value2" />
      </td>
    </tr>
  </xsl:template>

  <xsl:template name="TableEntry">
    <xsl:param name="Title" />
    <xsl:param name="Value1" />
    <xsl:param name="Value2" />

    <tr>
      <td width="154" style="font:bold;color:gray">
        <xsl:value-of select="$Title" />
      </td>

      <td width="286" style="color:gray">
        <xsl:value-of select="$Value1" />
      </td>

      <xsl:if test="boolean($Value2)">
        <td width="286" style="color:gray">
          <xsl:value-of select="$Value2" />
        </td>
      </xsl:if>
    </tr>
  </xsl:template>

  <xsl:template name="TableEntry2">
    <xsl:param name="Title" />
    <xsl:param name="Value1" />

    <tr>
      <td width="286" style="font:bold;color:gray">
        <xsl:value-of select="$Title" />
      </td>

      <td width="286" style="color:gray">
        <xsl:value-of select="$Value1" />
      </td>

    </tr>
  </xsl:template>

  <xsl:template match="ManagedEntity">
    <xsl:call-template name="TableEntry2">
      <xsl:with-param name="Title" select="." />
      <xsl:with-param name="Value1" select="@managedEntityId" />
    </xsl:call-template>
  </xsl:template>
</xsl:stylesheet>
	</Transform>

	<Transform type="System.ComputationData" locale="enu">
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ms="urn:schemas-microsoft-com:xslt" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2004/07/xpath-functions" xmlns:xdt="http://www.w3.org/2004/07/xpath-datatypes" xmlns:DataTypeTransformer="urn:DatatypeTransformer">
  <!-- Localizable text -->
  <xsl:variable name="DateAndTime">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">System.CorrelatorData.DateAndTime</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Value">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">System.Typed.Data.KeyPropertyValue</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="Context">
    <xsl:call-template name="GetDisplayString">
      <xsl:with-param name="Id">System.ConsolidatorData.Context</xsl:with-param>
    </xsl:call-template>
  </xsl:variable>
  <!-- End localizable text -->

  <!-- Returns the display string of the specified resouce -->
  <xsl:template name="GetDisplayString">
    <xsl:param name="Id" />
    <xsl:value-of select="DataTypeTransformer:GetStringResource('System.Library', '31bf3856ad364e35', $Id)" />
  </xsl:template>

  <xsl:template match="DataItem">
    <div align="left">
      <table border="0" width="100%" id="table1" style="border-collapse: collapse">
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$DateAndTime" />
          <xsl:with-param name="Value" select="DataTypeTransformer:FormatDateTime(@time)" />
        </xsl:call-template>
        <xsl:call-template name="TableEntry">
          <xsl:with-param name="Title" select="$Value" />
          <xsl:with-param name="Value" select="Value" />
        </xsl:call-template>
        <p />
      </table>

      <p style="font:bold;color:gray;margin-bottom:0">
        <xsl:value-of select="$Context" />
      </p>
      <xsl:variable name="ContextDataItem" select="Context/DataItem" />
      <xsl:if test="$ContextDataItem">
        <xsl:copy-of select="DataTypeTransformer:Transform($ContextDataItem)" />
      </xsl:if>

    </div>
  </xsl:template>

  <xsl:template name="TableEntry">
    <xsl:param name="Title" />
    <xsl:param name="Value" />
    <tr>
      <td width="154" style="font:bold;color:gray;background:#d3d3d3">
        <xsl:value-of select="$Title" />
      </td>
      <td width="286" style="color:gray;background:#d3d3d3">
        <xsl:value-of select="$Value" />
      </td>
    </tr>
  </xsl:template>

</xsl:stylesheet>
	</Transform>
</Transforms>